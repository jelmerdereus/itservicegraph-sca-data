{"critical":[{"cwe_ids":["78"],"id":"python_lang_os_command_injection","title":"Unsanitized user input in OS command","description":"## Description\n\nDirectly incorporating external or user-defined input into an OS command exposes the system to possible command injection attacks. This vulnerability allows attackers to execute unauthorized commands on the operating system, potentially leading to a compromise of system integrity.\n\n## Remediations\n\n- **Do not** use OS commands that include dynamic input directly. Instead, explore safer alternatives such as libraries or built-in functions that achieve the same goal without executing system commands. \n- **Do** use hardcoded values for any input that is incorporated into OS commands. This approach minimizes the risk by ensuring only predefined inputs are used, thus preventing attackers from injecting malicious commands. Use safe lists or dictionaries if you need to be dynamic. \n\n## References\n\n- [OWASP command injection explained](https://owasp.org/www-community/attacks/Command_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/python_lang_os_command_injection","line_number":130,"full_filename":"scripts/docs.py","filename":"scripts/docs.py","category_groups":["PII","Personal Data"],"source":{"start":130,"end":130,"column":{"start":5,"end":88}},"sink":{"start":130,"end":130,"column":{"start":5,"end":88},"content":""},"parent_line_number":130,"fingerprint":"442f43f0254212dc15635d4271055305_0","old_fingerprint":"442f43f0254212dc15635d4271055305_0","code_extract":"    subprocess.run([\"mkdocs\", \"build\", \"--site-dir\", build_site_dist_path], check=True)"}],"high":[{"cwe_ids":["79"],"id":"javascript_lang_dangerous_insert_html","title":"Unsanitized user input in dynamic HTML insertion (XSS)","description":"## Description\n\nUnsanitized user input in dynamic HTML insertion can lead to Cross-Site Scripting (XSS) attacks. This vulnerability arises when user-provided data is directly inserted into the DOM without proper sanitization, potentially allowing attackers to execute malicious scripts.\n\n## Remediations\n\n- **Do** use an HTML sanitization library to clean user input before inserting it into the HTML. This step helps prevent XSS attacks by removing or neutralizing any potentially harmful scripts.\n  ```javascript\n  import sanitizeHtml from 'sanitize-html';\n\n  const html = `\u003cstrong\u003e${user.Input}\u003c/strong\u003e`;\n  document.body.innerHTML = sanitizeHtml(html);\n  ```\n\n## References\n\n- [OWASP XSS explained](https://owasp.org/www-community/attacks/xss/)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_dangerous_insert_html","line_number":107,"full_filename":"docs/en/docs/js/custom.js","filename":"docs/en/docs/js/custom.js","category_groups":["PII","Personal Data"],"source":{"start":107,"end":107,"column":{"start":17,"end":38}},"sink":{"start":107,"end":107,"column":{"start":17,"end":38},"content":""},"parent_line_number":107,"fingerprint":"0c4729860c738123f3888371d14eb1c4_0","old_fingerprint":"0c4729860c738123f3888371d14eb1c4_0","code_extract":"                node.replaceWith(div);"},{"cwe_ids":["79"],"id":"javascript_lang_dangerous_insert_html","title":"Unsanitized user input in dynamic HTML insertion (XSS)","description":"## Description\n\nUnsanitized user input in dynamic HTML insertion can lead to Cross-Site Scripting (XSS) attacks. This vulnerability arises when user-provided data is directly inserted into the DOM without proper sanitization, potentially allowing attackers to execute malicious scripts.\n\n## Remediations\n\n- **Do** use an HTML sanitization library to clean user input before inserting it into the HTML. This step helps prevent XSS attacks by removing or neutralizing any potentially harmful scripts.\n  ```javascript\n  import sanitizeHtml from 'sanitize-html';\n\n  const html = `\u003cstrong\u003e${user.Input}\u003c/strong\u003e`;\n  document.body.innerHTML = sanitizeHtml(html);\n  ```\n\n## References\n\n- [OWASP XSS explained](https://owasp.org/www-community/attacks/xss/)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_dangerous_insert_html","line_number":170,"full_filename":"docs/en/docs/js/custom.js","filename":"docs/en/docs/js/custom.js","category_groups":["PII","Personal Data"],"source":{"start":170,"end":170,"column":{"start":13,"end":187}},"sink":{"start":170,"end":170,"column":{"start":13,"end":187},"content":""},"parent_line_number":170,"fingerprint":"0c4729860c738123f3888371d14eb1c4_1","old_fingerprint":"0c4729860c738123f3888371d14eb1c4_1","code_extract":"            li.innerHTML = `\u003ca href=\"${v.html_url}\" target=\"_blank\"\u003eâ˜… ${v.stargazers_count} - ${v.full_name}\u003c/a\u003e by \u003ca href=\"${v.owner.html_url}\" target=\"_blank\"\u003e@${v.owner.login}\u003c/a\u003e`"},{"cwe_ids":["79"],"id":"javascript_lang_dangerous_insert_html","title":"Unsanitized user input in dynamic HTML insertion (XSS)","description":"## Description\n\nUnsanitized user input in dynamic HTML insertion can lead to Cross-Site Scripting (XSS) attacks. This vulnerability arises when user-provided data is directly inserted into the DOM without proper sanitization, potentially allowing attackers to execute malicious scripts.\n\n## Remediations\n\n- **Do** use an HTML sanitization library to clean user input before inserting it into the HTML. This step helps prevent XSS attacks by removing or neutralizing any potentially harmful scripts.\n  ```javascript\n  import sanitizeHtml from 'sanitize-html';\n\n  const html = `\u003cstrong\u003e${user.Input}\u003c/strong\u003e`;\n  document.body.innerHTML = sanitizeHtml(html);\n  ```\n\n## References\n\n- [OWASP XSS explained](https://owasp.org/www-community/attacks/xss/)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_dangerous_insert_html","line_number":226,"full_filename":"docs/en/docs/js/termynal.js","filename":"docs/en/docs/js/termynal.js","category_groups":["PII","Personal Data"],"source":{"start":226,"end":226,"column":{"start":13,"end":89}},"sink":{"start":226,"end":226,"column":{"start":13,"end":89},"content":""},"parent_line_number":226,"fingerprint":"3f978b1ab6d8afbb6fa07242be212e6e_0","old_fingerprint":"3f978b1ab6d8afbb6fa07242be212e6e_2","code_extract":"            div.innerHTML = `\u003cspan ${this._attributes(line)}\u003e${line.value || ''}\u003c/span\u003e`;"},{"cwe_ids":["22"],"id":"python_lang_path_traversal","title":"Unsanitized dynamic input in file path","description":"## Description\n\nUsing unsanitized dynamic input to determine file paths can allow attackers to gain access to files and folders outside of the intended scope. This vulnerability occurs when input provided by users is directly used to access the filesystem without proper validation or sanitization.\n\n## Remediations\n\n- **Do not** directly use external input to construct file paths. This can lead to unauthorized file access.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** use absolute path checks to confirm that the constructed path is within the expected directory\n    ```python\n    BASE_DIRECTORY = '/path/to/safe/directory'\n    my_path = os.path.abspath(os.path.join(BASE_DIRECTORY, dynamic_input))\n\n    if my_path.startswith(BASE_DIRECTORY):\n      open(my_path)\n   ```\n\n## References\n\n- [OWASP Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n","documentation_url":"https://docs.bearer.com/reference/rules/python_lang_path_traversal","line_number":86,"full_filename":"scripts/docs.py","filename":"scripts/docs.py","category_groups":["PII","Personal Data"],"source":{"start":86,"end":86,"column":{"start":5,"end":80}},"sink":{"start":86,"end":86,"column":{"start":5,"end":80},"content":""},"parent_line_number":86,"fingerprint":"5205eb3282ef5dc2792d013588ae5791_0","old_fingerprint":"5205eb3282ef5dc2792d013588ae5791_1","code_extract":"    new_config_path.write_text(\"INHERIT: ../en/mkdocs.yml\\n\", encoding=\"utf-8\")"},{"cwe_ids":["22"],"id":"python_lang_path_traversal","title":"Unsanitized dynamic input in file path","description":"## Description\n\nUsing unsanitized dynamic input to determine file paths can allow attackers to gain access to files and folders outside of the intended scope. This vulnerability occurs when input provided by users is directly used to access the filesystem without proper validation or sanitization.\n\n## Remediations\n\n- **Do not** directly use external input to construct file paths. This can lead to unauthorized file access.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** use absolute path checks to confirm that the constructed path is within the expected directory\n    ```python\n    BASE_DIRECTORY = '/path/to/safe/directory'\n    my_path = os.path.abspath(os.path.join(BASE_DIRECTORY, dynamic_input))\n\n    if my_path.startswith(BASE_DIRECTORY):\n      open(my_path)\n   ```\n\n## References\n\n- [OWASP Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n","documentation_url":"https://docs.bearer.com/reference/rules/python_lang_path_traversal","line_number":126,"full_filename":"scripts/docs.py","filename":"scripts/docs.py","category_groups":["PII","Personal Data"],"source":{"start":126,"end":126,"column":{"start":9,"end":53}},"sink":{"start":126,"end":126,"column":{"start":9,"end":53},"content":""},"parent_line_number":126,"fingerprint":"5205eb3282ef5dc2792d013588ae5791_1","old_fingerprint":"5205eb3282ef5dc2792d013588ae5791_2","code_extract":"        shutil.rmtree(dist_path, ignore_errors=True)"},{"cwe_ids":["22"],"id":"python_lang_path_traversal","title":"Unsanitized dynamic input in file path","description":"## Description\n\nUsing unsanitized dynamic input to determine file paths can allow attackers to gain access to files and folders outside of the intended scope. This vulnerability occurs when input provided by users is directly used to access the filesystem without proper validation or sanitization.\n\n## Remediations\n\n- **Do not** directly use external input to construct file paths. This can lead to unauthorized file access.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** use absolute path checks to confirm that the constructed path is within the expected directory\n    ```python\n    BASE_DIRECTORY = '/path/to/safe/directory'\n    my_path = os.path.abspath(os.path.join(BASE_DIRECTORY, dynamic_input))\n\n    if my_path.startswith(BASE_DIRECTORY):\n      open(my_path)\n   ```\n\n## References\n\n- [OWASP Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n","documentation_url":"https://docs.bearer.com/reference/rules/python_lang_path_traversal","line_number":128,"full_filename":"scripts/docs.py","filename":"scripts/docs.py","category_groups":["PII","Personal Data"],"source":{"start":128,"end":128,"column":{"start":5,"end":24}},"sink":{"start":128,"end":128,"column":{"start":5,"end":24},"content":""},"parent_line_number":128,"fingerprint":"5205eb3282ef5dc2792d013588ae5791_2","old_fingerprint":"5205eb3282ef5dc2792d013588ae5791_3","code_extract":"    os.chdir(lang_path)"},{"cwe_ids":["22"],"id":"python_lang_path_traversal","title":"Unsanitized dynamic input in file path","description":"## Description\n\nUsing unsanitized dynamic input to determine file paths can allow attackers to gain access to files and folders outside of the intended scope. This vulnerability occurs when input provided by users is directly used to access the filesystem without proper validation or sanitization.\n\n## Remediations\n\n- **Do not** directly use external input to construct file paths. This can lead to unauthorized file access.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** use absolute path checks to confirm that the constructed path is within the expected directory\n    ```python\n    BASE_DIRECTORY = '/path/to/safe/directory'\n    my_path = os.path.abspath(os.path.join(BASE_DIRECTORY, dynamic_input))\n\n    if my_path.startswith(BASE_DIRECTORY):\n      open(my_path)\n   ```\n\n## References\n\n- [OWASP Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n","documentation_url":"https://docs.bearer.com/reference/rules/python_lang_path_traversal","line_number":129,"full_filename":"scripts/docs.py","filename":"scripts/docs.py","category_groups":["PII","Personal Data"],"source":{"start":129,"end":129,"column":{"start":5,"end":60}},"sink":{"start":129,"end":129,"column":{"start":5,"end":60},"content":""},"parent_line_number":129,"fingerprint":"5205eb3282ef5dc2792d013588ae5791_3","old_fingerprint":"5205eb3282ef5dc2792d013588ae5791_4","code_extract":"    shutil.rmtree(build_site_dist_path, ignore_errors=True)"},{"cwe_ids":["22"],"id":"python_lang_path_traversal","title":"Unsanitized dynamic input in file path","description":"## Description\n\nUsing unsanitized dynamic input to determine file paths can allow attackers to gain access to files and folders outside of the intended scope. This vulnerability occurs when input provided by users is directly used to access the filesystem without proper validation or sanitization.\n\n## Remediations\n\n- **Do not** directly use external input to construct file paths. This can lead to unauthorized file access.\n- **Do** use a safelist to define accessible paths or directories. Only allow user input to influence file paths within these predefined, safe boundaries.\n- **Do** use absolute path checks to confirm that the constructed path is within the expected directory\n    ```python\n    BASE_DIRECTORY = '/path/to/safe/directory'\n    my_path = os.path.abspath(os.path.join(BASE_DIRECTORY, dynamic_input))\n\n    if my_path.startswith(BASE_DIRECTORY):\n      open(my_path)\n   ```\n\n## References\n\n- [OWASP Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal)\n","documentation_url":"https://docs.bearer.com/reference/rules/python_lang_path_traversal","line_number":21,"full_filename":"scripts/mkdocs_hooks.py","filename":"scripts/mkdocs_hooks.py","category_groups":["PII","Personal Data"],"source":{"start":21,"end":21,"column":{"start":12,"end":64}},"sink":{"start":21,"end":21,"column":{"start":12,"end":64},"content":""},"parent_line_number":21,"fingerprint":"e8f68a82a568c1e72a6cf3167dd3d8f3_0","old_fingerprint":"e8f68a82a568c1e72a6cf3167dd3d8f3_0","code_extract":"    return missing_translation_path.read_text(encoding=\"utf-8\")"}],"medium":[{"cwe_ids":["1004"],"id":"python_django_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```python\n  response.set_cookie(httponly=True);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/python_django_cookie_missing_http_only","line_number":11,"full_filename":"docs_src/response_cookies/tutorial001.py","filename":"docs_src/response_cookies/tutorial001.py","category_groups":["PII","Personal Data"],"source":{"start":11,"end":11,"column":{"start":5,"end":78}},"sink":{"start":11,"end":11,"column":{"start":5,"end":78},"content":""},"parent_line_number":11,"fingerprint":"16de794bcc6b41c9cb4f594864f2fcff_0","old_fingerprint":"16de794bcc6b41c9cb4f594864f2fcff_1","code_extract":"    response.set_cookie(key=\"fakesession\", value=\"fake-cookie-session-value\")"},{"cwe_ids":["1004"],"id":"python_django_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the HTTP Only attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling HTTP Only is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the HTTP Only attribute to `true` for cookies to prevent them from being accessed by client-side JavaScript. This is a critical step in safeguarding your cookies against unauthorized access, especially in the context of XSS vulnerabilities.\n  ```python\n  response.set_cookie(httponly=True);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/python_django_cookie_missing_http_only","line_number":8,"full_filename":"docs_src/response_cookies/tutorial002.py","filename":"docs_src/response_cookies/tutorial002.py","category_groups":["PII","Personal Data"],"source":{"start":8,"end":8,"column":{"start":5,"end":78}},"sink":{"start":8,"end":8,"column":{"start":5,"end":78},"content":""},"parent_line_number":8,"fingerprint":"3abd224f653cbf9e1edf8f2e5cad8b72_0","old_fingerprint":"3abd224f653cbf9e1edf8f2e5cad8b72_0","code_extract":"    response.set_cookie(key=\"fakesession\", value=\"fake-cookie-session-value\")"},{"cwe_ids":["614"],"id":"python_django_cookie_missing_secure","title":"Missing Secure option in cookie configuration","description":"## Description\n\nNot setting the \"Secure\" attribute in cookie configuration can lead to unauthorized third-party access. This attribute, when enabled, ensures cookies are sent to the server only over HTTPS, enhancing security by preventing potential eavesdropping.\n\n## Remediations\n\n- **Do** set the `secure` attribute to `true` to enforce the transmission of cookies over HTTPS only.\n  ```python\n  response.set_cookie(secure=True)\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/python_django_cookie_missing_secure","line_number":11,"full_filename":"docs_src/response_cookies/tutorial001.py","filename":"docs_src/response_cookies/tutorial001.py","category_groups":["PII","Personal Data"],"source":{"start":11,"end":11,"column":{"start":5,"end":78}},"sink":{"start":11,"end":11,"column":{"start":5,"end":78},"content":""},"parent_line_number":11,"fingerprint":"d7a2bfd96fcba6eca14e67aa639504f8_0","old_fingerprint":"d7a2bfd96fcba6eca14e67aa639504f8_1","code_extract":"    response.set_cookie(key=\"fakesession\", value=\"fake-cookie-session-value\")"},{"cwe_ids":["614"],"id":"python_django_cookie_missing_secure","title":"Missing Secure option in cookie configuration","description":"## Description\n\nNot setting the \"Secure\" attribute in cookie configuration can lead to unauthorized third-party access. This attribute, when enabled, ensures cookies are sent to the server only over HTTPS, enhancing security by preventing potential eavesdropping.\n\n## Remediations\n\n- **Do** set the `secure` attribute to `true` to enforce the transmission of cookies over HTTPS only.\n  ```python\n  response.set_cookie(secure=True)\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/python_django_cookie_missing_secure","line_number":8,"full_filename":"docs_src/response_cookies/tutorial002.py","filename":"docs_src/response_cookies/tutorial002.py","category_groups":["PII","Personal Data"],"source":{"start":8,"end":8,"column":{"start":5,"end":78}},"sink":{"start":8,"end":8,"column":{"start":5,"end":78},"content":""},"parent_line_number":8,"fingerprint":"3c959cb623cc8473666cb980644626a4_0","old_fingerprint":"3c959cb623cc8473666cb980644626a4_0","code_extract":"    response.set_cookie(key=\"fakesession\", value=\"fake-cookie-session-value\")"},{"cwe_ids":["210"],"id":"python_lang_exception","title":"Leakage of sensitive data in exception message","description":"## Description\n\nLeakage of sensitive data in exception messages can lead to data breaches. This vulnerability occurs when sensitive information is included in exceptions, making it accessible to unauthorized users.\n\n## Remediations\n\n- **Do not** include sensitive data in exception messages. This can inadvertently expose private information.\n  ```python\n  raise Exception(f\"User '{user.email}' is unauthorized\") # unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers in exception messages to avoid revealing personal information.\n  ```python\n  raise Exception(f\"User '{user.uuid}' is unauthorized\") # unsafe\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/python_lang_exception","line_number":61,"full_filename":"docs_src/security/tutorial003.py","filename":"docs_src/security/tutorial003.py","data_type":{"category_uuid":"cef587dd-76db-430b-9e18-7b031e1a193b","name":"Email Address"},"category_groups":["PII","Personal Data"],"source":{"start":11,"end":11,"column":{"start":9,"end":39}},"sink":{"start":61,"end":65,"column":{"start":9,"end":10},"content":""},"parent_line_number":61,"fingerprint":"defce8d086877a2ae2ab27f63259e0fe_0","old_fingerprint":"defce8d086877a2ae2ab27f63259e0fe_8","code_extract":"        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )"},{"cwe_ids":["210"],"id":"python_lang_exception","title":"Leakage of sensitive data in exception message","description":"## Description\n\nLeakage of sensitive data in exception messages can lead to data breaches. This vulnerability occurs when sensitive information is included in exceptions, making it accessible to unauthorized users.\n\n## Remediations\n\n- **Do not** include sensitive data in exception messages. This can inadvertently expose private information.\n  ```python\n  raise Exception(f\"User '{user.email}' is unauthorized\") # unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers in exception messages to avoid revealing personal information.\n  ```python\n  raise Exception(f\"User '{user.uuid}' is unauthorized\") # unsafe\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/python_lang_exception","line_number":71,"full_filename":"docs_src/security/tutorial003.py","filename":"docs_src/security/tutorial003.py","data_type":{"category_uuid":"dd88aee5-9d40-4ad2-8983-0c791ddec47c","name":"Passwords"},"category_groups":["PII","Personal Data"],"source":{"start":19,"end":19,"column":{"start":9,"end":47}},"sink":{"start":71,"end":71,"column":{"start":9,"end":69},"content":""},"parent_line_number":71,"fingerprint":"defce8d086877a2ae2ab27f63259e0fe_8","old_fingerprint":"defce8d086877a2ae2ab27f63259e0fe_48","code_extract":"        raise HTTPException(status_code=400, detail=\"Inactive user\")"},{"cwe_ids":["210"],"id":"python_lang_exception","title":"Leakage of sensitive data in exception message","description":"## Description\n\nLeakage of sensitive data in exception messages can lead to data breaches. This vulnerability occurs when sensitive information is included in exceptions, making it accessible to unauthorized users.\n\n## Remediations\n\n- **Do not** include sensitive data in exception messages. This can inadvertently expose private information.\n  ```python\n  raise Exception(f\"User '{user.email}' is unauthorized\") # unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers in exception messages to avoid revealing personal information.\n  ```python\n  raise Exception(f\"User '{user.uuid}' is unauthorized\") # unsafe\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/python_lang_exception","line_number":79,"full_filename":"docs_src/security/tutorial003.py","filename":"docs_src/security/tutorial003.py","data_type":{"category_uuid":"14124881-6b92-4fc5-8005-ea7c1c09592e","name":"Fullname"},"category_groups":["PII","Personal Data"],"source":{"start":10,"end":10,"column":{"start":9,"end":32}},"sink":{"start":79,"end":79,"column":{"start":9,"end":86},"content":""},"parent_line_number":79,"fingerprint":"defce8d086877a2ae2ab27f63259e0fe_16","old_fingerprint":"defce8d086877a2ae2ab27f63259e0fe_88","code_extract":"        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")"},{"cwe_ids":["210"],"id":"python_lang_exception","title":"Leakage of sensitive data in exception message","description":"## Description\n\nLeakage of sensitive data in exception messages can lead to data breaches. This vulnerability occurs when sensitive information is included in exceptions, making it accessible to unauthorized users.\n\n## Remediations\n\n- **Do not** include sensitive data in exception messages. This can inadvertently expose private information.\n  ```python\n  raise Exception(f\"User '{user.email}' is unauthorized\") # unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers in exception messages to avoid revealing personal information.\n  ```python\n  raise Exception(f\"User '{user.uuid}' is unauthorized\") # unsafe\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/python_lang_exception","line_number":62,"full_filename":"docs_src/security/tutorial003_an.py","filename":"docs_src/security/tutorial003_an.py","data_type":{"category_uuid":"14124881-6b92-4fc5-8005-ea7c1c09592e","name":"Username"},"category_groups":["PII","Personal Data"],"source":{"start":10,"end":10,"column":{"start":9,"end":30}},"sink":{"start":62,"end":66,"column":{"start":9,"end":10},"content":""},"parent_line_number":62,"fingerprint":"1d2e01af8e330db0fa9e7599e54046e3_0","old_fingerprint":"1d2e01af8e330db0fa9e7599e54046e3_32","code_extract":"        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )"},{"cwe_ids":["210"],"id":"python_lang_exception","title":"Leakage of sensitive data in exception message","description":"## Description\n\nLeakage of sensitive data in exception messages can lead to data breaches. This vulnerability occurs when sensitive information is included in exceptions, making it accessible to unauthorized users.\n\n## Remediations\n\n- **Do not** include sensitive data in exception messages. This can inadvertently expose private information.\n  ```python\n  raise Exception(f\"User '{user.email}' is unauthorized\") # unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers in exception messages to avoid revealing personal information.\n  ```python\n  raise Exception(f\"User '{user.uuid}' is unauthorized\") # unsafe\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/python_lang_exception","line_number":74,"full_filename":"docs_src/security/tutorial003_an.py","filename":"docs_src/security/tutorial003_an.py","data_type":{"category_uuid":"14124881-6b92-4fc5-8005-ea7c1c09592e","name":"Fullname"},"category_groups":["PII","Personal Data"],"source":{"start":11,"end":11,"column":{"start":9,"end":32}},"sink":{"start":74,"end":74,"column":{"start":9,"end":69},"content":""},"parent_line_number":74,"fingerprint":"1d2e01af8e330db0fa9e7599e54046e3_8","old_fingerprint":"1d2e01af8e330db0fa9e7599e54046e3_72","code_extract":"        raise HTTPException(status_code=400, detail=\"Inactive user\")"},{"cwe_ids":["210"],"id":"python_lang_exception","title":"Leakage of sensitive data in exception message","description":"## Description\n\nLeakage of sensitive data in exception messages can lead to data breaches. This vulnerability occurs when sensitive information is included in exceptions, making it accessible to unauthorized users.\n\n## Remediations\n\n- **Do not** include sensitive data in exception messages. This can inadvertently expose private information.\n  ```python\n  raise Exception(f\"User '{user.email}' is unauthorized\") # unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers in exception messages to avoid revealing personal information.\n  ```python\n  raise Exception(f\"User '{user.uuid}' is unauthorized\") # unsafe\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/python_lang_exception","line_number":82,"full_filename":"docs_src/security/tutorial003_an.py","filename":"docs_src/security/tutorial003_an.py","data_type":{"category_uuid":"14124881-6b92-4fc5-8005-ea7c1c09592e","name":"Username"},"category_groups":["PII","Personal Data"],"source":{"start":17,"end":17,"column":{"start":9,"end":28}},"sink":{"start":82,"end":82,"column":{"start":9,"end":86},"content":""},"parent_line_number":82,"fingerprint":"1d2e01af8e330db0fa9e7599e54046e3_16","old_fingerprint":"1d2e01af8e330db0fa9e7599e54046e3_112","code_extract":"        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")"},{"cwe_ids":["210"],"id":"python_lang_exception","title":"Leakage of sensitive data in exception message","description":"## Description\n\nLeakage of sensitive data in exception messages can lead to data breaches. This vulnerability occurs when sensitive information is included in exceptions, making it accessible to unauthorized users.\n\n## Remediations\n\n- **Do not** include sensitive data in exception messages. This can inadvertently expose private information.\n  ```python\n  raise Exception(f\"User '{user.email}' is unauthorized\") # unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers in exception messages to avoid revealing personal information.\n  ```python\n  raise Exception(f\"User '{user.uuid}' is unauthorized\") # unsafe\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/python_lang_exception","line_number":61,"full_filename":"docs_src/security/tutorial003_an_py310.py","filename":"docs_src/security/tutorial003_an_py310.py","data_type":{"category_uuid":"14124881-6b92-4fc5-8005-ea7c1c09592e","name":"Fullname"},"category_groups":["PII","Personal Data"],"source":{"start":10,"end":10,"column":{"start":9,"end":32}},"sink":{"start":61,"end":65,"column":{"start":9,"end":10},"content":""},"parent_line_number":61,"fingerprint":"68cb12991a7f02378038a20bf16f4dc3_0","old_fingerprint":"68cb12991a7f02378038a20bf16f4dc3_12","code_extract":"        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )"},{"cwe_ids":["210"],"id":"python_lang_exception","title":"Leakage of sensitive data in exception message","description":"## Description\n\nLeakage of sensitive data in exception messages can lead to data breaches. This vulnerability occurs when sensitive information is included in exceptions, making it accessible to unauthorized users.\n\n## Remediations\n\n- **Do not** include sensitive data in exception messages. This can inadvertently expose private information.\n  ```python\n  raise Exception(f\"User '{user.email}' is unauthorized\") # unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers in exception messages to avoid revealing personal information.\n  ```python\n  raise Exception(f\"User '{user.uuid}' is unauthorized\") # unsafe\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/python_lang_exception","line_number":73,"full_filename":"docs_src/security/tutorial003_an_py310.py","filename":"docs_src/security/tutorial003_an_py310.py","data_type":{"category_uuid":"14124881-6b92-4fc5-8005-ea7c1c09592e","name":"Fullname"},"category_groups":["PII","Personal Data"],"source":{"start":10,"end":10,"column":{"start":9,"end":32}},"sink":{"start":73,"end":73,"column":{"start":9,"end":69},"content":""},"parent_line_number":73,"fingerprint":"68cb12991a7f02378038a20bf16f4dc3_8","old_fingerprint":"68cb12991a7f02378038a20bf16f4dc3_56","code_extract":"        raise HTTPException(status_code=400, detail=\"Inactive user\")"},{"cwe_ids":["210"],"id":"python_lang_exception","title":"Leakage of sensitive data in exception message","description":"## Description\n\nLeakage of sensitive data in exception messages can lead to data breaches. This vulnerability occurs when sensitive information is included in exceptions, making it accessible to unauthorized users.\n\n## Remediations\n\n- **Do not** include sensitive data in exception messages. This can inadvertently expose private information.\n  ```python\n  raise Exception(f\"User '{user.email}' is unauthorized\") # unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers in exception messages to avoid revealing personal information.\n  ```python\n  raise Exception(f\"User '{user.uuid}' is unauthorized\") # unsafe\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/python_lang_exception","line_number":81,"full_filename":"docs_src/security/tutorial003_an_py310.py","filename":"docs_src/security/tutorial003_an_py310.py","data_type":{"category_uuid":"cef587dd-76db-430b-9e18-7b031e1a193b","name":"Email Address"},"category_groups":["PII","Personal Data"],"source":{"start":11,"end":11,"column":{"start":9,"end":39}},"sink":{"start":81,"end":81,"column":{"start":9,"end":86},"content":""},"parent_line_number":81,"fingerprint":"68cb12991a7f02378038a20bf16f4dc3_16","old_fingerprint":"68cb12991a7f02378038a20bf16f4dc3_102","code_extract":"        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")"},{"cwe_ids":["210"],"id":"python_lang_exception","title":"Leakage of sensitive data in exception message","description":"## Description\n\nLeakage of sensitive data in exception messages can lead to data breaches. This vulnerability occurs when sensitive information is included in exceptions, making it accessible to unauthorized users.\n\n## Remediations\n\n- **Do not** include sensitive data in exception messages. This can inadvertently expose private information.\n  ```python\n  raise Exception(f\"User '{user.email}' is unauthorized\") # unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers in exception messages to avoid revealing personal information.\n  ```python\n  raise Exception(f\"User '{user.uuid}' is unauthorized\") # unsafe\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/python_lang_exception","line_number":61,"full_filename":"docs_src/security/tutorial003_an_py39.py","filename":"docs_src/security/tutorial003_an_py39.py","data_type":{"category_uuid":"dd88aee5-9d40-4ad2-8983-0c791ddec47c","name":"Passwords"},"category_groups":["PII","Personal Data"],"source":{"start":19,"end":19,"column":{"start":9,"end":47}},"sink":{"start":61,"end":65,"column":{"start":9,"end":10},"content":""},"parent_line_number":61,"fingerprint":"63e8e82f8e5a8c4307cfc13013dbf2b7_0","old_fingerprint":"63e8e82f8e5a8c4307cfc13013dbf2b7_11","code_extract":"        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )"},{"cwe_ids":["210"],"id":"python_lang_exception","title":"Leakage of sensitive data in exception message","description":"## Description\n\nLeakage of sensitive data in exception messages can lead to data breaches. This vulnerability occurs when sensitive information is included in exceptions, making it accessible to unauthorized users.\n\n## Remediations\n\n- **Do not** include sensitive data in exception messages. This can inadvertently expose private information.\n  ```python\n  raise Exception(f\"User '{user.email}' is unauthorized\") # unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers in exception messages to avoid revealing personal information.\n  ```python\n  raise Exception(f\"User '{user.uuid}' is unauthorized\") # unsafe\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/python_lang_exception","line_number":73,"full_filename":"docs_src/security/tutorial003_an_py39.py","filename":"docs_src/security/tutorial003_an_py39.py","data_type":{"category_uuid":"14124881-6b92-4fc5-8005-ea7c1c09592e","name":"Username"},"category_groups":["PII","Personal Data"],"source":{"start":9,"end":9,"column":{"start":9,"end":30}},"sink":{"start":73,"end":73,"column":{"start":9,"end":69},"content":""},"parent_line_number":73,"fingerprint":"63e8e82f8e5a8c4307cfc13013dbf2b7_8","old_fingerprint":"63e8e82f8e5a8c4307cfc13013dbf2b7_57","code_extract":"        raise HTTPException(status_code=400, detail=\"Inactive user\")"},{"cwe_ids":["210"],"id":"python_lang_exception","title":"Leakage of sensitive data in exception message","description":"## Description\n\nLeakage of sensitive data in exception messages can lead to data breaches. This vulnerability occurs when sensitive information is included in exceptions, making it accessible to unauthorized users.\n\n## Remediations\n\n- **Do not** include sensitive data in exception messages. This can inadvertently expose private information.\n  ```python\n  raise Exception(f\"User '{user.email}' is unauthorized\") # unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers in exception messages to avoid revealing personal information.\n  ```python\n  raise Exception(f\"User '{user.uuid}' is unauthorized\") # unsafe\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/python_lang_exception","line_number":81,"full_filename":"docs_src/security/tutorial003_an_py39.py","filename":"docs_src/security/tutorial003_an_py39.py","data_type":{"category_uuid":"dd88aee5-9d40-4ad2-8983-0c791ddec47c","name":"Passwords"},"category_groups":["PII","Personal Data"],"source":{"start":19,"end":19,"column":{"start":9,"end":47}},"sink":{"start":81,"end":81,"column":{"start":9,"end":86},"content":""},"parent_line_number":81,"fingerprint":"63e8e82f8e5a8c4307cfc13013dbf2b7_16","old_fingerprint":"63e8e82f8e5a8c4307cfc13013dbf2b7_96","code_extract":"        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")"},{"cwe_ids":["210"],"id":"python_lang_exception","title":"Leakage of sensitive data in exception message","description":"## Description\n\nLeakage of sensitive data in exception messages can lead to data breaches. This vulnerability occurs when sensitive information is included in exceptions, making it accessible to unauthorized users.\n\n## Remediations\n\n- **Do not** include sensitive data in exception messages. This can inadvertently expose private information.\n  ```python\n  raise Exception(f\"User '{user.email}' is unauthorized\") # unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers in exception messages to avoid revealing personal information.\n  ```python\n  raise Exception(f\"User '{user.uuid}' is unauthorized\") # unsafe\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/python_lang_exception","line_number":59,"full_filename":"docs_src/security/tutorial003_py310.py","filename":"docs_src/security/tutorial003_py310.py","data_type":{"category_uuid":"14124881-6b92-4fc5-8005-ea7c1c09592e","name":"Fullname"},"category_groups":["PII","Personal Data"],"source":{"start":8,"end":8,"column":{"start":9,"end":32}},"sink":{"start":59,"end":63,"column":{"start":9,"end":10},"content":""},"parent_line_number":59,"fingerprint":"b2c1ccfa5f6551c1466031689ffaab93_0","old_fingerprint":"b2c1ccfa5f6551c1466031689ffaab93_0","code_extract":"        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )"},{"cwe_ids":["210"],"id":"python_lang_exception","title":"Leakage of sensitive data in exception message","description":"## Description\n\nLeakage of sensitive data in exception messages can lead to data breaches. This vulnerability occurs when sensitive information is included in exceptions, making it accessible to unauthorized users.\n\n## Remediations\n\n- **Do not** include sensitive data in exception messages. This can inadvertently expose private information.\n  ```python\n  raise Exception(f\"User '{user.email}' is unauthorized\") # unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers in exception messages to avoid revealing personal information.\n  ```python\n  raise Exception(f\"User '{user.uuid}' is unauthorized\") # unsafe\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/python_lang_exception","line_number":69,"full_filename":"docs_src/security/tutorial003_py310.py","filename":"docs_src/security/tutorial003_py310.py","data_type":{"category_uuid":"14124881-6b92-4fc5-8005-ea7c1c09592e","name":"Username"},"category_groups":["PII","Personal Data"],"source":{"start":14,"end":14,"column":{"start":9,"end":28}},"sink":{"start":69,"end":69,"column":{"start":9,"end":69},"content":""},"parent_line_number":69,"fingerprint":"b2c1ccfa5f6551c1466031689ffaab93_8","old_fingerprint":"b2c1ccfa5f6551c1466031689ffaab93_40","code_extract":"        raise HTTPException(status_code=400, detail=\"Inactive user\")"},{"cwe_ids":["210"],"id":"python_lang_exception","title":"Leakage of sensitive data in exception message","description":"## Description\n\nLeakage of sensitive data in exception messages can lead to data breaches. This vulnerability occurs when sensitive information is included in exceptions, making it accessible to unauthorized users.\n\n## Remediations\n\n- **Do not** include sensitive data in exception messages. This can inadvertently expose private information.\n  ```python\n  raise Exception(f\"User '{user.email}' is unauthorized\") # unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers in exception messages to avoid revealing personal information.\n  ```python\n  raise Exception(f\"User '{user.uuid}' is unauthorized\") # unsafe\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/python_lang_exception","line_number":77,"full_filename":"docs_src/security/tutorial003_py310.py","filename":"docs_src/security/tutorial003_py310.py","data_type":{"category_uuid":"cef587dd-76db-430b-9e18-7b031e1a193b","name":"Email Address"},"category_groups":["PII","Personal Data"],"source":{"start":16,"end":16,"column":{"start":9,"end":37}},"sink":{"start":77,"end":77,"column":{"start":9,"end":86},"content":""},"parent_line_number":77,"fingerprint":"b2c1ccfa5f6551c1466031689ffaab93_16","old_fingerprint":"b2c1ccfa5f6551c1466031689ffaab93_80","code_extract":"        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")"},{"cwe_ids":["210"],"id":"python_lang_exception","title":"Leakage of sensitive data in exception message","description":"## Description\n\nLeakage of sensitive data in exception messages can lead to data breaches. This vulnerability occurs when sensitive information is included in exceptions, making it accessible to unauthorized users.\n\n## Remediations\n\n- **Do not** include sensitive data in exception messages. This can inadvertently expose private information.\n  ```python\n  raise Exception(f\"User '{user.email}' is unauthorized\") # unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers in exception messages to avoid revealing personal information.\n  ```python\n  raise Exception(f\"User '{user.uuid}' is unauthorized\") # unsafe\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/python_lang_exception","line_number":111,"full_filename":"docs_src/security/tutorial004.py","filename":"docs_src/security/tutorial004.py","data_type":{"category_uuid":"14124881-6b92-4fc5-8005-ea7c1c09592e","name":"Username"},"category_groups":["PII","Personal Data"],"source":{"start":19,"end":19,"column":{"start":9,"end":30}},"sink":{"start":111,"end":111,"column":{"start":9,"end":69},"content":""},"parent_line_number":111,"fingerprint":"787320314d69309dcb042a485ab6b73d_0","old_fingerprint":"787320314d69309dcb042a485ab6b73d_124","code_extract":"        raise HTTPException(status_code=400, detail=\"Inactive user\")"},{"cwe_ids":["210"],"id":"python_lang_exception","title":"Leakage of sensitive data in exception message","description":"## Description\n\nLeakage of sensitive data in exception messages can lead to data breaches. This vulnerability occurs when sensitive information is included in exceptions, making it accessible to unauthorized users.\n\n## Remediations\n\n- **Do not** include sensitive data in exception messages. This can inadvertently expose private information.\n  ```python\n  raise Exception(f\"User '{user.email}' is unauthorized\") # unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers in exception messages to avoid revealing personal information.\n  ```python\n  raise Exception(f\"User '{user.uuid}' is unauthorized\") # unsafe\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/python_lang_exception","line_number":121,"full_filename":"docs_src/security/tutorial004.py","filename":"docs_src/security/tutorial004.py","data_type":{"category_uuid":"dd88aee5-9d40-4ad2-8983-0c791ddec47c","name":"Passwords"},"category_groups":["PII","Personal Data"],"source":{"start":22,"end":22,"column":{"start":9,"end":90}},"sink":{"start":121,"end":125,"column":{"start":9,"end":10},"content":""},"parent_line_number":121,"fingerprint":"787320314d69309dcb042a485ab6b73d_4","old_fingerprint":"787320314d69309dcb042a485ab6b73d_144","code_extract":"        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )"},{"cwe_ids":["210"],"id":"python_lang_exception","title":"Leakage of sensitive data in exception message","description":"## Description\n\nLeakage of sensitive data in exception messages can lead to data breaches. This vulnerability occurs when sensitive information is included in exceptions, making it accessible to unauthorized users.\n\n## Remediations\n\n- **Do not** include sensitive data in exception messages. This can inadvertently expose private information.\n  ```python\n  raise Exception(f\"User '{user.email}' is unauthorized\") # unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers in exception messages to avoid revealing personal information.\n  ```python\n  raise Exception(f\"User '{user.uuid}' is unauthorized\") # unsafe\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/python_lang_exception","line_number":114,"full_filename":"docs_src/security/tutorial004_an.py","filename":"docs_src/security/tutorial004_an.py","data_type":{"category_uuid":"14124881-6b92-4fc5-8005-ea7c1c09592e","name":"Username"},"category_groups":["PII","Personal Data"],"source":{"start":20,"end":20,"column":{"start":9,"end":30}},"sink":{"start":114,"end":114,"column":{"start":9,"end":69},"content":""},"parent_line_number":114,"fingerprint":"ac192bd7684e6d1a8518f47b6651da86_0","old_fingerprint":"ac192bd7684e6d1a8518f47b6651da86_136","code_extract":"        raise HTTPException(status_code=400, detail=\"Inactive user\")"},{"cwe_ids":["210"],"id":"python_lang_exception","title":"Leakage of sensitive data in exception message","description":"## Description\n\nLeakage of sensitive data in exception messages can lead to data breaches. This vulnerability occurs when sensitive information is included in exceptions, making it accessible to unauthorized users.\n\n## Remediations\n\n- **Do not** include sensitive data in exception messages. This can inadvertently expose private information.\n  ```python\n  raise Exception(f\"User '{user.email}' is unauthorized\") # unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers in exception messages to avoid revealing personal information.\n  ```python\n  raise Exception(f\"User '{user.uuid}' is unauthorized\") # unsafe\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/python_lang_exception","line_number":124,"full_filename":"docs_src/security/tutorial004_an.py","filename":"docs_src/security/tutorial004_an.py","data_type":{"category_uuid":"14124881-6b92-4fc5-8005-ea7c1c09592e","name":"Fullname"},"category_groups":["PII","Personal Data"],"source":{"start":21,"end":21,"column":{"start":9,"end":32}},"sink":{"start":124,"end":128,"column":{"start":9,"end":10},"content":""},"parent_line_number":124,"fingerprint":"ac192bd7684e6d1a8518f47b6651da86_4","old_fingerprint":"ac192bd7684e6d1a8518f47b6651da86_156","code_extract":"        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )"},{"cwe_ids":["210"],"id":"python_lang_exception","title":"Leakage of sensitive data in exception message","description":"## Description\n\nLeakage of sensitive data in exception messages can lead to data breaches. This vulnerability occurs when sensitive information is included in exceptions, making it accessible to unauthorized users.\n\n## Remediations\n\n- **Do not** include sensitive data in exception messages. This can inadvertently expose private information.\n  ```python\n  raise Exception(f\"User '{user.email}' is unauthorized\") # unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers in exception messages to avoid revealing personal information.\n  ```python\n  raise Exception(f\"User '{user.uuid}' is unauthorized\") # unsafe\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/python_lang_exception","line_number":113,"full_filename":"docs_src/security/tutorial004_an_py310.py","filename":"docs_src/security/tutorial004_an_py310.py","data_type":{"category_uuid":"cef587dd-76db-430b-9e18-7b031e1a193b","name":"Email Address"},"category_groups":["PII","Personal Data"],"source":{"start":21,"end":21,"column":{"start":9,"end":39}},"sink":{"start":113,"end":113,"column":{"start":9,"end":69},"content":""},"parent_line_number":113,"fingerprint":"61136f3355f1cf1b1a3495728e6f199e_0","old_fingerprint":"61136f3355f1cf1b1a3495728e6f199e_128","code_extract":"        raise HTTPException(status_code=400, detail=\"Inactive user\")"},{"cwe_ids":["210"],"id":"python_lang_exception","title":"Leakage of sensitive data in exception message","description":"## Description\n\nLeakage of sensitive data in exception messages can lead to data breaches. This vulnerability occurs when sensitive information is included in exceptions, making it accessible to unauthorized users.\n\n## Remediations\n\n- **Do not** include sensitive data in exception messages. This can inadvertently expose private information.\n  ```python\n  raise Exception(f\"User '{user.email}' is unauthorized\") # unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers in exception messages to avoid revealing personal information.\n  ```python\n  raise Exception(f\"User '{user.uuid}' is unauthorized\") # unsafe\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/python_lang_exception","line_number":123,"full_filename":"docs_src/security/tutorial004_an_py310.py","filename":"docs_src/security/tutorial004_an_py310.py","data_type":{"category_uuid":"dd88aee5-9d40-4ad2-8983-0c791ddec47c","name":"Passwords"},"category_groups":["PII","Personal Data"],"source":{"start":22,"end":22,"column":{"start":9,"end":90}},"sink":{"start":123,"end":127,"column":{"start":9,"end":10},"content":""},"parent_line_number":123,"fingerprint":"61136f3355f1cf1b1a3495728e6f199e_4","old_fingerprint":"61136f3355f1cf1b1a3495728e6f199e_150","code_extract":"        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )"},{"cwe_ids":["210"],"id":"python_lang_exception","title":"Leakage of sensitive data in exception message","description":"## Description\n\nLeakage of sensitive data in exception messages can lead to data breaches. This vulnerability occurs when sensitive information is included in exceptions, making it accessible to unauthorized users.\n\n## Remediations\n\n- **Do not** include sensitive data in exception messages. This can inadvertently expose private information.\n  ```python\n  raise Exception(f\"User '{user.email}' is unauthorized\") # unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers in exception messages to avoid revealing personal information.\n  ```python\n  raise Exception(f\"User '{user.uuid}' is unauthorized\") # unsafe\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/python_lang_exception","line_number":113,"full_filename":"docs_src/security/tutorial004_an_py39.py","filename":"docs_src/security/tutorial004_an_py39.py","data_type":{"category_uuid":"cef587dd-76db-430b-9e18-7b031e1a193b","name":"Email Address"},"category_groups":["PII","Personal Data"],"source":{"start":21,"end":21,"column":{"start":9,"end":39}},"sink":{"start":113,"end":113,"column":{"start":9,"end":69},"content":""},"parent_line_number":113,"fingerprint":"be2a70e6537c067151a8798def120785_0","old_fingerprint":"be2a70e6537c067151a8798def120785_129","code_extract":"        raise HTTPException(status_code=400, detail=\"Inactive user\")"},{"cwe_ids":["210"],"id":"python_lang_exception","title":"Leakage of sensitive data in exception message","description":"## Description\n\nLeakage of sensitive data in exception messages can lead to data breaches. This vulnerability occurs when sensitive information is included in exceptions, making it accessible to unauthorized users.\n\n## Remediations\n\n- **Do not** include sensitive data in exception messages. This can inadvertently expose private information.\n  ```python\n  raise Exception(f\"User '{user.email}' is unauthorized\") # unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers in exception messages to avoid revealing personal information.\n  ```python\n  raise Exception(f\"User '{user.uuid}' is unauthorized\") # unsafe\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/python_lang_exception","line_number":123,"full_filename":"docs_src/security/tutorial004_an_py39.py","filename":"docs_src/security/tutorial004_an_py39.py","data_type":{"category_uuid":"14124881-6b92-4fc5-8005-ea7c1c09592e","name":"Username"},"category_groups":["PII","Personal Data"],"source":{"start":19,"end":19,"column":{"start":9,"end":30}},"sink":{"start":123,"end":127,"column":{"start":9,"end":10},"content":""},"parent_line_number":123,"fingerprint":"be2a70e6537c067151a8798def120785_4","old_fingerprint":"be2a70e6537c067151a8798def120785_148","code_extract":"        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )"},{"cwe_ids":["210"],"id":"python_lang_exception","title":"Leakage of sensitive data in exception message","description":"## Description\n\nLeakage of sensitive data in exception messages can lead to data breaches. This vulnerability occurs when sensitive information is included in exceptions, making it accessible to unauthorized users.\n\n## Remediations\n\n- **Do not** include sensitive data in exception messages. This can inadvertently expose private information.\n  ```python\n  raise Exception(f\"User '{user.email}' is unauthorized\") # unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers in exception messages to avoid revealing personal information.\n  ```python\n  raise Exception(f\"User '{user.uuid}' is unauthorized\") # unsafe\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/python_lang_exception","line_number":110,"full_filename":"docs_src/security/tutorial004_py310.py","filename":"docs_src/security/tutorial004_py310.py","data_type":{"category_uuid":"dd88aee5-9d40-4ad2-8983-0c791ddec47c","name":"Passwords"},"category_groups":["PII","Personal Data"],"source":{"start":21,"end":21,"column":{"start":9,"end":90}},"sink":{"start":110,"end":110,"column":{"start":9,"end":69},"content":""},"parent_line_number":110,"fingerprint":"d4a4b0da446a32b1f4a2a6ec83bb7fac_0","old_fingerprint":"d4a4b0da446a32b1f4a2a6ec83bb7fac_120","code_extract":"        raise HTTPException(status_code=400, detail=\"Inactive user\")"},{"cwe_ids":["210"],"id":"python_lang_exception","title":"Leakage of sensitive data in exception message","description":"## Description\n\nLeakage of sensitive data in exception messages can lead to data breaches. This vulnerability occurs when sensitive information is included in exceptions, making it accessible to unauthorized users.\n\n## Remediations\n\n- **Do not** include sensitive data in exception messages. This can inadvertently expose private information.\n  ```python\n  raise Exception(f\"User '{user.email}' is unauthorized\") # unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers in exception messages to avoid revealing personal information.\n  ```python\n  raise Exception(f\"User '{user.uuid}' is unauthorized\") # unsafe\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/python_lang_exception","line_number":120,"full_filename":"docs_src/security/tutorial004_py310.py","filename":"docs_src/security/tutorial004_py310.py","data_type":{"category_uuid":"14124881-6b92-4fc5-8005-ea7c1c09592e","name":"Username"},"category_groups":["PII","Personal Data"],"source":{"start":18,"end":18,"column":{"start":9,"end":30}},"sink":{"start":120,"end":124,"column":{"start":9,"end":10},"content":""},"parent_line_number":120,"fingerprint":"d4a4b0da446a32b1f4a2a6ec83bb7fac_4","old_fingerprint":"d4a4b0da446a32b1f4a2a6ec83bb7fac_140","code_extract":"        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect username or password\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )"},{"cwe_ids":["210"],"id":"python_lang_exception","title":"Leakage of sensitive data in exception message","description":"## Description\n\nLeakage of sensitive data in exception messages can lead to data breaches. This vulnerability occurs when sensitive information is included in exceptions, making it accessible to unauthorized users.\n\n## Remediations\n\n- **Do not** include sensitive data in exception messages. This can inadvertently expose private information.\n  ```python\n  raise Exception(f\"User '{user.email}' is unauthorized\") # unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers in exception messages to avoid revealing personal information.\n  ```python\n  raise Exception(f\"User '{user.uuid}' is unauthorized\") # unsafe\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/python_lang_exception","line_number":130,"full_filename":"docs_src/security/tutorial005.py","filename":"docs_src/security/tutorial005.py","data_type":{"category_uuid":"dd88aee5-9d40-4ad2-8983-0c791ddec47c","name":"Passwords"},"category_groups":["PII","Personal Data"],"source":{"start":33,"end":33,"column":{"start":9,"end":90}},"sink":{"start":130,"end":134,"column":{"start":13,"end":14},"content":""},"parent_line_number":130,"fingerprint":"56ade1568c0cac6b02879f00dd47bb21_0","old_fingerprint":"56ade1568c0cac6b02879f00dd47bb21_174","code_extract":"            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )"},{"cwe_ids":["210"],"id":"python_lang_exception","title":"Leakage of sensitive data in exception message","description":"## Description\n\nLeakage of sensitive data in exception messages can lead to data breaches. This vulnerability occurs when sensitive information is included in exceptions, making it accessible to unauthorized users.\n\n## Remediations\n\n- **Do not** include sensitive data in exception messages. This can inadvertently expose private information.\n  ```python\n  raise Exception(f\"User '{user.email}' is unauthorized\") # unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers in exception messages to avoid revealing personal information.\n  ```python\n  raise Exception(f\"User '{user.uuid}' is unauthorized\") # unsafe\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/python_lang_exception","line_number":142,"full_filename":"docs_src/security/tutorial005.py","filename":"docs_src/security/tutorial005.py","data_type":{"category_uuid":"cef587dd-76db-430b-9e18-7b031e1a193b","name":"Email Address"},"category_groups":["PII","Personal Data"],"source":{"start":25,"end":25,"column":{"start":9,"end":39}},"sink":{"start":142,"end":142,"column":{"start":9,"end":69},"content":""},"parent_line_number":142,"fingerprint":"56ade1568c0cac6b02879f00dd47bb21_8","old_fingerprint":"56ade1568c0cac6b02879f00dd47bb21_216","code_extract":"        raise HTTPException(status_code=400, detail=\"Inactive user\")"},{"cwe_ids":["210"],"id":"python_lang_exception","title":"Leakage of sensitive data in exception message","description":"## Description\n\nLeakage of sensitive data in exception messages can lead to data breaches. This vulnerability occurs when sensitive information is included in exceptions, making it accessible to unauthorized users.\n\n## Remediations\n\n- **Do not** include sensitive data in exception messages. This can inadvertently expose private information.\n  ```python\n  raise Exception(f\"User '{user.email}' is unauthorized\") # unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers in exception messages to avoid revealing personal information.\n  ```python\n  raise Exception(f\"User '{user.uuid}' is unauthorized\") # unsafe\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/python_lang_exception","line_number":152,"full_filename":"docs_src/security/tutorial005.py","filename":"docs_src/security/tutorial005.py","data_type":{"category_uuid":"14124881-6b92-4fc5-8005-ea7c1c09592e","name":"Fullname"},"category_groups":["PII","Personal Data"],"source":{"start":24,"end":24,"column":{"start":9,"end":32}},"sink":{"start":152,"end":152,"column":{"start":9,"end":86},"content":""},"parent_line_number":152,"fingerprint":"56ade1568c0cac6b02879f00dd47bb21_16","old_fingerprint":"56ade1568c0cac6b02879f00dd47bb21_267","code_extract":"        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")"},{"cwe_ids":["210"],"id":"python_lang_exception","title":"Leakage of sensitive data in exception message","description":"## Description\n\nLeakage of sensitive data in exception messages can lead to data breaches. This vulnerability occurs when sensitive information is included in exceptions, making it accessible to unauthorized users.\n\n## Remediations\n\n- **Do not** include sensitive data in exception messages. This can inadvertently expose private information.\n  ```python\n  raise Exception(f\"User '{user.email}' is unauthorized\") # unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers in exception messages to avoid revealing personal information.\n  ```python\n  raise Exception(f\"User '{user.uuid}' is unauthorized\") # unsafe\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/python_lang_exception","line_number":131,"full_filename":"docs_src/security/tutorial005_an.py","filename":"docs_src/security/tutorial005_an.py","data_type":{"category_uuid":"14124881-6b92-4fc5-8005-ea7c1c09592e","name":"Fullname"},"category_groups":["PII","Personal Data"],"source":{"start":25,"end":25,"column":{"start":9,"end":32}},"sink":{"start":131,"end":135,"column":{"start":13,"end":14},"content":""},"parent_line_number":131,"fingerprint":"f1aff3efa909b8240e6e3426ff614dc0_0","old_fingerprint":"f1aff3efa909b8240e6e3426ff614dc0_200","code_extract":"            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )"},{"cwe_ids":["210"],"id":"python_lang_exception","title":"Leakage of sensitive data in exception message","description":"## Description\n\nLeakage of sensitive data in exception messages can lead to data breaches. This vulnerability occurs when sensitive information is included in exceptions, making it accessible to unauthorized users.\n\n## Remediations\n\n- **Do not** include sensitive data in exception messages. This can inadvertently expose private information.\n  ```python\n  raise Exception(f\"User '{user.email}' is unauthorized\") # unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers in exception messages to avoid revealing personal information.\n  ```python\n  raise Exception(f\"User '{user.uuid}' is unauthorized\") # unsafe\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/python_lang_exception","line_number":143,"full_filename":"docs_src/security/tutorial005_an.py","filename":"docs_src/security/tutorial005_an.py","data_type":{"category_uuid":"cef587dd-76db-430b-9e18-7b031e1a193b","name":"Email Address"},"category_groups":["PII","Personal Data"],"source":{"start":33,"end":33,"column":{"start":9,"end":43}},"sink":{"start":143,"end":143,"column":{"start":9,"end":69},"content":""},"parent_line_number":143,"fingerprint":"f1aff3efa909b8240e6e3426ff614dc0_8","old_fingerprint":"f1aff3efa909b8240e6e3426ff614dc0_248","code_extract":"        raise HTTPException(status_code=400, detail=\"Inactive user\")"},{"cwe_ids":["210"],"id":"python_lang_exception","title":"Leakage of sensitive data in exception message","description":"## Description\n\nLeakage of sensitive data in exception messages can lead to data breaches. This vulnerability occurs when sensitive information is included in exceptions, making it accessible to unauthorized users.\n\n## Remediations\n\n- **Do not** include sensitive data in exception messages. This can inadvertently expose private information.\n  ```python\n  raise Exception(f\"User '{user.email}' is unauthorized\") # unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers in exception messages to avoid revealing personal information.\n  ```python\n  raise Exception(f\"User '{user.uuid}' is unauthorized\") # unsafe\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/python_lang_exception","line_number":153,"full_filename":"docs_src/security/tutorial005_an.py","filename":"docs_src/security/tutorial005_an.py","data_type":{"category_uuid":"14124881-6b92-4fc5-8005-ea7c1c09592e","name":"Fullname"},"category_groups":["PII","Personal Data"],"source":{"start":25,"end":25,"column":{"start":9,"end":32}},"sink":{"start":153,"end":153,"column":{"start":9,"end":86},"content":""},"parent_line_number":153,"fingerprint":"f1aff3efa909b8240e6e3426ff614dc0_16","old_fingerprint":"f1aff3efa909b8240e6e3426ff614dc0_296","code_extract":"        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")"},{"cwe_ids":["210"],"id":"python_lang_exception","title":"Leakage of sensitive data in exception message","description":"## Description\n\nLeakage of sensitive data in exception messages can lead to data breaches. This vulnerability occurs when sensitive information is included in exceptions, making it accessible to unauthorized users.\n\n## Remediations\n\n- **Do not** include sensitive data in exception messages. This can inadvertently expose private information.\n  ```python\n  raise Exception(f\"User '{user.email}' is unauthorized\") # unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers in exception messages to avoid revealing personal information.\n  ```python\n  raise Exception(f\"User '{user.uuid}' is unauthorized\") # unsafe\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/python_lang_exception","line_number":130,"full_filename":"docs_src/security/tutorial005_an_py310.py","filename":"docs_src/security/tutorial005_an_py310.py","data_type":{"category_uuid":"dd88aee5-9d40-4ad2-8983-0c791ddec47c","name":"Passwords"},"category_groups":["PII","Personal Data"],"source":{"start":26,"end":26,"column":{"start":9,"end":90}},"sink":{"start":130,"end":134,"column":{"start":13,"end":14},"content":""},"parent_line_number":130,"fingerprint":"f4c6788170cdfe8bb65c92c3ddd9b6a7_0","old_fingerprint":"f4c6788170cdfe8bb65c92c3ddd9b6a7_171","code_extract":"            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )"},{"cwe_ids":["210"],"id":"python_lang_exception","title":"Leakage of sensitive data in exception message","description":"## Description\n\nLeakage of sensitive data in exception messages can lead to data breaches. This vulnerability occurs when sensitive information is included in exceptions, making it accessible to unauthorized users.\n\n## Remediations\n\n- **Do not** include sensitive data in exception messages. This can inadvertently expose private information.\n  ```python\n  raise Exception(f\"User '{user.email}' is unauthorized\") # unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers in exception messages to avoid revealing personal information.\n  ```python\n  raise Exception(f\"User '{user.uuid}' is unauthorized\") # unsafe\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/python_lang_exception","line_number":142,"full_filename":"docs_src/security/tutorial005_an_py310.py","filename":"docs_src/security/tutorial005_an_py310.py","data_type":{"category_uuid":"14124881-6b92-4fc5-8005-ea7c1c09592e","name":"Username"},"category_groups":["PII","Personal Data"],"source":{"start":30,"end":30,"column":{"start":9,"end":28}},"sink":{"start":142,"end":142,"column":{"start":9,"end":69},"content":""},"parent_line_number":142,"fingerprint":"f4c6788170cdfe8bb65c92c3ddd9b6a7_8","old_fingerprint":"f4c6788170cdfe8bb65c92c3ddd9b6a7_221","code_extract":"        raise HTTPException(status_code=400, detail=\"Inactive user\")"},{"cwe_ids":["210"],"id":"python_lang_exception","title":"Leakage of sensitive data in exception message","description":"## Description\n\nLeakage of sensitive data in exception messages can lead to data breaches. This vulnerability occurs when sensitive information is included in exceptions, making it accessible to unauthorized users.\n\n## Remediations\n\n- **Do not** include sensitive data in exception messages. This can inadvertently expose private information.\n  ```python\n  raise Exception(f\"User '{user.email}' is unauthorized\") # unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers in exception messages to avoid revealing personal information.\n  ```python\n  raise Exception(f\"User '{user.uuid}' is unauthorized\") # unsafe\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/python_lang_exception","line_number":152,"full_filename":"docs_src/security/tutorial005_an_py310.py","filename":"docs_src/security/tutorial005_an_py310.py","data_type":{"category_uuid":"14124881-6b92-4fc5-8005-ea7c1c09592e","name":"Fullname"},"category_groups":["PII","Personal Data"],"source":{"start":31,"end":31,"column":{"start":9,"end":36}},"sink":{"start":152,"end":152,"column":{"start":9,"end":86},"content":""},"parent_line_number":152,"fingerprint":"f4c6788170cdfe8bb65c92c3ddd9b6a7_16","old_fingerprint":"f4c6788170cdfe8bb65c92c3ddd9b6a7_269","code_extract":"        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")"},{"cwe_ids":["210"],"id":"python_lang_exception","title":"Leakage of sensitive data in exception message","description":"## Description\n\nLeakage of sensitive data in exception messages can lead to data breaches. This vulnerability occurs when sensitive information is included in exceptions, making it accessible to unauthorized users.\n\n## Remediations\n\n- **Do not** include sensitive data in exception messages. This can inadvertently expose private information.\n  ```python\n  raise Exception(f\"User '{user.email}' is unauthorized\") # unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers in exception messages to avoid revealing personal information.\n  ```python\n  raise Exception(f\"User '{user.uuid}' is unauthorized\") # unsafe\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/python_lang_exception","line_number":130,"full_filename":"docs_src/security/tutorial005_an_py39.py","filename":"docs_src/security/tutorial005_an_py39.py","data_type":{"category_uuid":"dd88aee5-9d40-4ad2-8983-0c791ddec47c","name":"Passwords"},"category_groups":["PII","Personal Data"],"source":{"start":26,"end":26,"column":{"start":9,"end":90}},"sink":{"start":130,"end":134,"column":{"start":13,"end":14},"content":""},"parent_line_number":130,"fingerprint":"7f380351a9a0069b2388e9150caa9597_0","old_fingerprint":"7f380351a9a0069b2388e9150caa9597_170","code_extract":"            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )"},{"cwe_ids":["210"],"id":"python_lang_exception","title":"Leakage of sensitive data in exception message","description":"## Description\n\nLeakage of sensitive data in exception messages can lead to data breaches. This vulnerability occurs when sensitive information is included in exceptions, making it accessible to unauthorized users.\n\n## Remediations\n\n- **Do not** include sensitive data in exception messages. This can inadvertently expose private information.\n  ```python\n  raise Exception(f\"User '{user.email}' is unauthorized\") # unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers in exception messages to avoid revealing personal information.\n  ```python\n  raise Exception(f\"User '{user.uuid}' is unauthorized\") # unsafe\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/python_lang_exception","line_number":142,"full_filename":"docs_src/security/tutorial005_an_py39.py","filename":"docs_src/security/tutorial005_an_py39.py","data_type":{"category_uuid":"cef587dd-76db-430b-9e18-7b031e1a193b","name":"Email Address"},"category_groups":["PII","Personal Data"],"source":{"start":32,"end":32,"column":{"start":9,"end":43}},"sink":{"start":142,"end":142,"column":{"start":9,"end":69},"content":""},"parent_line_number":142,"fingerprint":"7f380351a9a0069b2388e9150caa9597_8","old_fingerprint":"7f380351a9a0069b2388e9150caa9597_219","code_extract":"        raise HTTPException(status_code=400, detail=\"Inactive user\")"},{"cwe_ids":["210"],"id":"python_lang_exception","title":"Leakage of sensitive data in exception message","description":"## Description\n\nLeakage of sensitive data in exception messages can lead to data breaches. This vulnerability occurs when sensitive information is included in exceptions, making it accessible to unauthorized users.\n\n## Remediations\n\n- **Do not** include sensitive data in exception messages. This can inadvertently expose private information.\n  ```python\n  raise Exception(f\"User '{user.email}' is unauthorized\") # unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers in exception messages to avoid revealing personal information.\n  ```python\n  raise Exception(f\"User '{user.uuid}' is unauthorized\") # unsafe\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/python_lang_exception","line_number":152,"full_filename":"docs_src/security/tutorial005_an_py39.py","filename":"docs_src/security/tutorial005_an_py39.py","data_type":{"category_uuid":"dd88aee5-9d40-4ad2-8983-0c791ddec47c","name":"Passwords"},"category_groups":["PII","Personal Data"],"source":{"start":33,"end":33,"column":{"start":9,"end":90}},"sink":{"start":152,"end":152,"column":{"start":9,"end":86},"content":""},"parent_line_number":152,"fingerprint":"7f380351a9a0069b2388e9150caa9597_16","old_fingerprint":"7f380351a9a0069b2388e9150caa9597_264","code_extract":"        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")"},{"cwe_ids":["210"],"id":"python_lang_exception","title":"Leakage of sensitive data in exception message","description":"## Description\n\nLeakage of sensitive data in exception messages can lead to data breaches. This vulnerability occurs when sensitive information is included in exceptions, making it accessible to unauthorized users.\n\n## Remediations\n\n- **Do not** include sensitive data in exception messages. This can inadvertently expose private information.\n  ```python\n  raise Exception(f\"User '{user.email}' is unauthorized\") # unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers in exception messages to avoid revealing personal information.\n  ```python\n  raise Exception(f\"User '{user.uuid}' is unauthorized\") # unsafe\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/python_lang_exception","line_number":129,"full_filename":"docs_src/security/tutorial005_py310.py","filename":"docs_src/security/tutorial005_py310.py","data_type":{"category_uuid":"dd88aee5-9d40-4ad2-8983-0c791ddec47c","name":"Passwords"},"category_groups":["PII","Personal Data"],"source":{"start":25,"end":25,"column":{"start":9,"end":90}},"sink":{"start":129,"end":133,"column":{"start":13,"end":14},"content":""},"parent_line_number":129,"fingerprint":"85404bc471041d605ecdf841cd8b8742_0","old_fingerprint":"85404bc471041d605ecdf841cd8b8742_160","code_extract":"            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )"},{"cwe_ids":["210"],"id":"python_lang_exception","title":"Leakage of sensitive data in exception message","description":"## Description\n\nLeakage of sensitive data in exception messages can lead to data breaches. This vulnerability occurs when sensitive information is included in exceptions, making it accessible to unauthorized users.\n\n## Remediations\n\n- **Do not** include sensitive data in exception messages. This can inadvertently expose private information.\n  ```python\n  raise Exception(f\"User '{user.email}' is unauthorized\") # unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers in exception messages to avoid revealing personal information.\n  ```python\n  raise Exception(f\"User '{user.uuid}' is unauthorized\") # unsafe\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/python_lang_exception","line_number":141,"full_filename":"docs_src/security/tutorial005_py310.py","filename":"docs_src/security/tutorial005_py310.py","data_type":{"category_uuid":"dd88aee5-9d40-4ad2-8983-0c791ddec47c","name":"Passwords"},"category_groups":["PII","Personal Data"],"source":{"start":25,"end":25,"column":{"start":9,"end":90}},"sink":{"start":141,"end":141,"column":{"start":9,"end":69},"content":""},"parent_line_number":141,"fingerprint":"85404bc471041d605ecdf841cd8b8742_8","old_fingerprint":"85404bc471041d605ecdf841cd8b8742_208","code_extract":"        raise HTTPException(status_code=400, detail=\"Inactive user\")"},{"cwe_ids":["210"],"id":"python_lang_exception","title":"Leakage of sensitive data in exception message","description":"## Description\n\nLeakage of sensitive data in exception messages can lead to data breaches. This vulnerability occurs when sensitive information is included in exceptions, making it accessible to unauthorized users.\n\n## Remediations\n\n- **Do not** include sensitive data in exception messages. This can inadvertently expose private information.\n  ```python\n  raise Exception(f\"User '{user.email}' is unauthorized\") # unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers in exception messages to avoid revealing personal information.\n  ```python\n  raise Exception(f\"User '{user.uuid}' is unauthorized\") # unsafe\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/python_lang_exception","line_number":151,"full_filename":"docs_src/security/tutorial005_py310.py","filename":"docs_src/security/tutorial005_py310.py","data_type":{"category_uuid":"14124881-6b92-4fc5-8005-ea7c1c09592e","name":"Username"},"category_groups":["PII","Personal Data"],"source":{"start":22,"end":22,"column":{"start":9,"end":30}},"sink":{"start":151,"end":151,"column":{"start":9,"end":86},"content":""},"parent_line_number":151,"fingerprint":"85404bc471041d605ecdf841cd8b8742_16","old_fingerprint":"85404bc471041d605ecdf841cd8b8742_256","code_extract":"        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")"},{"cwe_ids":["210"],"id":"python_lang_exception","title":"Leakage of sensitive data in exception message","description":"## Description\n\nLeakage of sensitive data in exception messages can lead to data breaches. This vulnerability occurs when sensitive information is included in exceptions, making it accessible to unauthorized users.\n\n## Remediations\n\n- **Do not** include sensitive data in exception messages. This can inadvertently expose private information.\n  ```python\n  raise Exception(f\"User '{user.email}' is unauthorized\") # unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers in exception messages to avoid revealing personal information.\n  ```python\n  raise Exception(f\"User '{user.uuid}' is unauthorized\") # unsafe\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/python_lang_exception","line_number":130,"full_filename":"docs_src/security/tutorial005_py39.py","filename":"docs_src/security/tutorial005_py39.py","data_type":{"category_uuid":"14124881-6b92-4fc5-8005-ea7c1c09592e","name":"Username"},"category_groups":["PII","Personal Data"],"source":{"start":30,"end":30,"column":{"start":9,"end":28}},"sink":{"start":130,"end":134,"column":{"start":13,"end":14},"content":""},"parent_line_number":130,"fingerprint":"4147ffdd0bc40b2f336ca40c120c32b6_0","old_fingerprint":"4147ffdd0bc40b2f336ca40c120c32b6_168","code_extract":"            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": authenticate_value},\n            )"},{"cwe_ids":["210"],"id":"python_lang_exception","title":"Leakage of sensitive data in exception message","description":"## Description\n\nLeakage of sensitive data in exception messages can lead to data breaches. This vulnerability occurs when sensitive information is included in exceptions, making it accessible to unauthorized users.\n\n## Remediations\n\n- **Do not** include sensitive data in exception messages. This can inadvertently expose private information.\n  ```python\n  raise Exception(f\"User '{user.email}' is unauthorized\") # unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers in exception messages to avoid revealing personal information.\n  ```python\n  raise Exception(f\"User '{user.uuid}' is unauthorized\") # unsafe\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/python_lang_exception","line_number":142,"full_filename":"docs_src/security/tutorial005_py39.py","filename":"docs_src/security/tutorial005_py39.py","data_type":{"category_uuid":"14124881-6b92-4fc5-8005-ea7c1c09592e","name":"Fullname"},"category_groups":["PII","Personal Data"],"source":{"start":31,"end":31,"column":{"start":9,"end":36}},"sink":{"start":142,"end":142,"column":{"start":9,"end":69},"content":""},"parent_line_number":142,"fingerprint":"4147ffdd0bc40b2f336ca40c120c32b6_8","old_fingerprint":"4147ffdd0bc40b2f336ca40c120c32b6_217","code_extract":"        raise HTTPException(status_code=400, detail=\"Inactive user\")"},{"cwe_ids":["210"],"id":"python_lang_exception","title":"Leakage of sensitive data in exception message","description":"## Description\n\nLeakage of sensitive data in exception messages can lead to data breaches. This vulnerability occurs when sensitive information is included in exceptions, making it accessible to unauthorized users.\n\n## Remediations\n\n- **Do not** include sensitive data in exception messages. This can inadvertently expose private information.\n  ```python\n  raise Exception(f\"User '{user.email}' is unauthorized\") # unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers in exception messages to avoid revealing personal information.\n  ```python\n  raise Exception(f\"User '{user.uuid}' is unauthorized\") # unsafe\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/python_lang_exception","line_number":152,"full_filename":"docs_src/security/tutorial005_py39.py","filename":"docs_src/security/tutorial005_py39.py","data_type":{"category_uuid":"14124881-6b92-4fc5-8005-ea7c1c09592e","name":"Fullname"},"category_groups":["PII","Personal Data"],"source":{"start":24,"end":24,"column":{"start":9,"end":32}},"sink":{"start":152,"end":152,"column":{"start":9,"end":86},"content":""},"parent_line_number":152,"fingerprint":"4147ffdd0bc40b2f336ca40c120c32b6_16","old_fingerprint":"4147ffdd0bc40b2f336ca40c120c32b6_265","code_extract":"        raise HTTPException(status_code=400, detail=\"Incorrect username or password\")"},{"cwe_ids":["210"],"id":"python_lang_exception","title":"Leakage of sensitive data in exception message","description":"## Description\n\nLeakage of sensitive data in exception messages can lead to data breaches. This vulnerability occurs when sensitive information is included in exceptions, making it accessible to unauthorized users.\n\n## Remediations\n\n- **Do not** include sensitive data in exception messages. This can inadvertently expose private information.\n  ```python\n  raise Exception(f\"User '{user.email}' is unauthorized\") # unsafe\n  ```\n- **Do** use non-sensitive, unique identifiers in exception messages to avoid revealing personal information.\n  ```python\n  raise Exception(f\"User '{user.uuid}' is unauthorized\") # unsafe\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/python_lang_exception","line_number":330,"full_filename":"fastapi/encoders.py","filename":"fastapi/encoders.py","data_type":{"category_uuid":"cef587dd-76db-430b-9e18-7b031e1a193b","name":"Physical Address"},"category_groups":["PII","Personal Data"],"source":{"start":70,"end":70,"column":{"start":5,"end":21}},"sink":{"start":330,"end":330,"column":{"start":13,"end":44},"content":""},"parent_line_number":330,"fingerprint":"96c7c7dcfc7750a28b0e27e2228a2c91_0","old_fingerprint":"96c7c7dcfc7750a28b0e27e2228a2c91_304","code_extract":"            raise ValueError(errors) from e"}]}
