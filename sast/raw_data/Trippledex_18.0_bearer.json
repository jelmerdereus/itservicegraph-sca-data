{"high":[{"cwe_ids":["73"],"id":"javascript_express_path_traversal","title":"Unsanitized user input in file path","description":"## Description\n\nUsing unsanitized user input to construct file paths can allow attackers to access files and directories beyond the intended limits. This vulnerability, known as path traversal, poses a significant security risk.\n\n## Remediations\n\n- **Do not** directly use user input in file path construction. This can lead to unauthorized file access.\n- **Do** sanitize user input before using it in path resolution. Replace or remove dangerous patterns like `\\..\\..` to prevent directory traversal attacks.\n  ```javascript\n  var sanitizedPath = userInput.replace(/^(\\.\\.(\\/|\\\\|$))+/, '');\n  ```\n- **Do** check for and eliminate any instances of the poison NULL byte (\"%00\") in user input, as it can be used to bypass path sanitization.\n  ```javascript\n  if (userInput.indexOf('\\0') !== -1) {\n    // Handle or reject the input\n  }\n  ```\n- **Do** validate the final path to ensure it is within the intended scope before accessing the file system.\n\n## References\n\n- [OWASP Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_express_path_traversal","line_number":721,"full_filename":"routes/admin.js","filename":"routes/admin.js","category_groups":["PII","Personal Data"],"source":{"start":721,"end":721,"column":{"start":27,"end":67}},"sink":{"start":721,"end":721,"column":{"start":27,"end":67},"content":""},"parent_line_number":721,"fingerprint":"a6d1e4478e01d30b0a39d16fc85dc4d8_0","old_fingerprint":"a6d1e4478e01d30b0a39d16fc85dc4d8_1","code_extract":"        const uploadDir = path.join('public/uploads', productPath);"},{"cwe_ids":["73"],"id":"javascript_express_path_traversal","title":"Unsanitized user input in file path","description":"## Description\n\nUsing unsanitized user input to construct file paths can allow attackers to access files and directories beyond the intended limits. This vulnerability, known as path traversal, poses a significant security risk.\n\n## Remediations\n\n- **Do not** directly use user input in file path construction. This can lead to unauthorized file access.\n- **Do** sanitize user input before using it in path resolution. Replace or remove dangerous patterns like `\\..\\..` to prevent directory traversal attacks.\n  ```javascript\n  var sanitizedPath = userInput.replace(/^(\\.\\.(\\/|\\\\|$))+/, '');\n  ```\n- **Do** check for and eliminate any instances of the poison NULL byte (\"%00\") in user input, as it can be used to bypass path sanitization.\n  ```javascript\n  if (userInput.indexOf('\\0') !== -1) {\n    // Handle or reject the input\n  }\n  ```\n- **Do** validate the final path to ensure it is within the intended scope before accessing the file system.\n\n## References\n\n- [OWASP Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_express_path_traversal","line_number":727,"full_filename":"routes/admin.js","filename":"routes/admin.js","category_groups":["PII","Personal Data"],"source":{"start":727,"end":727,"column":{"start":27,"end":99}},"sink":{"start":727,"end":727,"column":{"start":27,"end":99},"content":""},"parent_line_number":727,"fingerprint":"a6d1e4478e01d30b0a39d16fc85dc4d8_1","old_fingerprint":"a6d1e4478e01d30b0a39d16fc85dc4d8_2","code_extract":"        const imagePath = path.join('/uploads', productPath, file.originalname.replace(/ /g, '_'));"},{"cwe_ids":["73"],"id":"javascript_express_path_traversal","title":"Unsanitized user input in file path","description":"## Description\n\nUsing unsanitized user input to construct file paths can allow attackers to access files and directories beyond the intended limits. This vulnerability, known as path traversal, poses a significant security risk.\n\n## Remediations\n\n- **Do not** directly use user input in file path construction. This can lead to unauthorized file access.\n- **Do** sanitize user input before using it in path resolution. Replace or remove dangerous patterns like `\\..\\..` to prevent directory traversal attacks.\n  ```javascript\n  var sanitizedPath = userInput.replace(/^(\\.\\.(\\/|\\\\|$))+/, '');\n  ```\n- **Do** check for and eliminate any instances of the poison NULL byte (\"%00\") in user input, as it can be used to bypass path sanitization.\n  ```javascript\n  if (userInput.indexOf('\\0') !== -1) {\n    // Handle or reject the input\n  }\n  ```\n- **Do** validate the final path to ensure it is within the intended scope before accessing the file system.\n\n## References\n\n- [OWASP Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_express_path_traversal","line_number":730,"full_filename":"routes/admin.js","filename":"routes/admin.js","category_groups":["PII","Personal Data"],"source":{"start":730,"end":730,"column":{"start":43,"end":101}},"sink":{"start":730,"end":730,"column":{"start":43,"end":101},"content":""},"parent_line_number":730,"fingerprint":"a6d1e4478e01d30b0a39d16fc85dc4d8_2","old_fingerprint":"a6d1e4478e01d30b0a39d16fc85dc4d8_3","code_extract":"        const dest = fs.createWriteStream(path.join(uploadDir, file.originalname.replace(/ /g, '_')));"},{"cwe_ids":["73"],"id":"javascript_express_path_traversal","title":"Unsanitized user input in file path","description":"## Description\n\nUsing unsanitized user input to construct file paths can allow attackers to access files and directories beyond the intended limits. This vulnerability, known as path traversal, poses a significant security risk.\n\n## Remediations\n\n- **Do not** directly use user input in file path construction. This can lead to unauthorized file access.\n- **Do** sanitize user input before using it in path resolution. Replace or remove dangerous patterns like `\\..\\..` to prevent directory traversal attacks.\n  ```javascript\n  var sanitizedPath = userInput.replace(/^(\\.\\.(\\/|\\\\|$))+/, '');\n  ```\n- **Do** check for and eliminate any instances of the poison NULL byte (\"%00\") in user input, as it can be used to bypass path sanitization.\n  ```javascript\n  if (userInput.indexOf('\\0') !== -1) {\n    // Handle or reject the input\n  }\n  ```\n- **Do** validate the final path to ensure it is within the intended scope before accessing the file system.\n\n## References\n\n- [OWASP Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_express_path_traversal","line_number":451,"full_filename":"routes/product.js","filename":"routes/product.js","category_groups":["PII","Personal Data"],"source":{"start":451,"end":451,"column":{"start":19,"end":61}},"sink":{"start":451,"end":451,"column":{"start":19,"end":61},"content":""},"parent_line_number":451,"fingerprint":"a1c3ac53c155e434a040eca13d14813b_0","old_fingerprint":"a1c3ac53c155e434a040eca13d14813b_0","code_extract":"        fs.unlink(path.join('public', req.body.productImage), (err) =\u003e {"},{"cwe_ids":["73"],"id":"javascript_lang_non_literal_fs_filename","title":"Unsanitized dynamic input in file path","description":"## Description\n\nAllowing unsanitized dynamic input in file paths can lead to unauthorized file and folder access. This vulnerability arises when dynamic data is used within the file system operations, potentially allowing attackers to access unauthorized or hidden files and folders.\n\n## Remediations\n\n- **Do** sanitize all dynamic data and function arguments before using them in file system operations. This step is crucial to prevent unauthorized access.\n- **Do** use a combination of hard-coded string literals and control logic, instead of directly passing dynamic data or function arguments to file system functions. This ensures safety.\n  ```javascript\n  function write(filename) {\n    switch(filename) {\n      case \"hello.txt\":\n        fs.writeCreateFile(\"hello.txt\");\n        break;\n      // Add more cases as necessary\n    }\n  }\n  ```\n\n## References\n\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_non_literal_fs_filename","line_number":17,"full_filename":"deploy.js","filename":"deploy.js","category_groups":["PII","Personal Data"],"source":{"start":17,"end":17,"column":{"start":39,"end":69}},"sink":{"start":17,"end":17,"column":{"start":39,"end":69},"content":""},"parent_line_number":17,"fingerprint":"daf602bb295933aef70a1f1a09ba9afe_0","old_fingerprint":"daf602bb295933aef70a1f1a09ba9afe_1","code_extract":"        const minified = await minify(fs.readFileSync(file, 'utf-8'));"},{"cwe_ids":["73"],"id":"javascript_lang_non_literal_fs_filename","title":"Unsanitized dynamic input in file path","description":"## Description\n\nAllowing unsanitized dynamic input in file paths can lead to unauthorized file and folder access. This vulnerability arises when dynamic data is used within the file system operations, potentially allowing attackers to access unauthorized or hidden files and folders.\n\n## Remediations\n\n- **Do** sanitize all dynamic data and function arguments before using them in file system operations. This step is crucial to prevent unauthorized access.\n- **Do** use a combination of hard-coded string literals and control logic, instead of directly passing dynamic data or function arguments to file system functions. This ensures safety.\n  ```javascript\n  function write(filename) {\n    switch(filename) {\n      case \"hello.txt\":\n        fs.writeCreateFile(\"hello.txt\");\n        break;\n      // Add more cases as necessary\n    }\n  }\n  ```\n\n## References\n\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_non_literal_fs_filename","line_number":19,"full_filename":"deploy.js","filename":"deploy.js","category_groups":["PII","Personal Data"],"source":{"start":19,"end":19,"column":{"start":9,"end":93}},"sink":{"start":19,"end":19,"column":{"start":9,"end":93},"content":""},"parent_line_number":19,"fingerprint":"daf602bb295933aef70a1f1a09ba9afe_1","old_fingerprint":"daf602bb295933aef70a1f1a09ba9afe_2","code_extract":"        fs.writeFileSync(`${parseFilePath.dir}/${parseFilePath.name}.min.js`, minified.code);"},{"cwe_ids":["73"],"id":"javascript_lang_non_literal_fs_filename","title":"Unsanitized dynamic input in file path","description":"## Description\n\nAllowing unsanitized dynamic input in file paths can lead to unauthorized file and folder access. This vulnerability arises when dynamic data is used within the file system operations, potentially allowing attackers to access unauthorized or hidden files and folders.\n\n## Remediations\n\n- **Do** sanitize all dynamic data and function arguments before using them in file system operations. This step is crucial to prevent unauthorized access.\n- **Do** use a combination of hard-coded string literals and control logic, instead of directly passing dynamic data or function arguments to file system functions. This ensures safety.\n  ```javascript\n  function write(filename) {\n    switch(filename) {\n      case \"hello.txt\":\n        fs.writeCreateFile(\"hello.txt\");\n        break;\n      // Add more cases as necessary\n    }\n  }\n  ```\n\n## References\n\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_non_literal_fs_filename","line_number":29,"full_filename":"deploy.js","filename":"deploy.js","category_groups":["PII","Personal Data"],"source":{"start":29,"end":29,"column":{"start":39,"end":69}},"sink":{"start":29,"end":29,"column":{"start":39,"end":69},"content":""},"parent_line_number":29,"fingerprint":"daf602bb295933aef70a1f1a09ba9afe_2","old_fingerprint":"daf602bb295933aef70a1f1a09ba9afe_3","code_extract":"        const minified = await minify(fs.readFileSync(file, 'utf-8'));"},{"cwe_ids":["73"],"id":"javascript_lang_non_literal_fs_filename","title":"Unsanitized dynamic input in file path","description":"## Description\n\nAllowing unsanitized dynamic input in file paths can lead to unauthorized file and folder access. This vulnerability arises when dynamic data is used within the file system operations, potentially allowing attackers to access unauthorized or hidden files and folders.\n\n## Remediations\n\n- **Do** sanitize all dynamic data and function arguments before using them in file system operations. This step is crucial to prevent unauthorized access.\n- **Do** use a combination of hard-coded string literals and control logic, instead of directly passing dynamic data or function arguments to file system functions. This ensures safety.\n  ```javascript\n  function write(filename) {\n    switch(filename) {\n      case \"hello.txt\":\n        fs.writeCreateFile(\"hello.txt\");\n        break;\n      // Add more cases as necessary\n    }\n  }\n  ```\n\n## References\n\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_non_literal_fs_filename","line_number":31,"full_filename":"deploy.js","filename":"deploy.js","category_groups":["PII","Personal Data"],"source":{"start":31,"end":31,"column":{"start":9,"end":93}},"sink":{"start":31,"end":31,"column":{"start":9,"end":93},"content":""},"parent_line_number":31,"fingerprint":"daf602bb295933aef70a1f1a09ba9afe_3","old_fingerprint":"daf602bb295933aef70a1f1a09ba9afe_4","code_extract":"        fs.writeFileSync(`${parseFilePath.dir}/${parseFilePath.name}.min.js`, minified.code);"},{"cwe_ids":["73"],"id":"javascript_lang_non_literal_fs_filename","title":"Unsanitized dynamic input in file path","description":"## Description\n\nAllowing unsanitized dynamic input in file paths can lead to unauthorized file and folder access. This vulnerability arises when dynamic data is used within the file system operations, potentially allowing attackers to access unauthorized or hidden files and folders.\n\n## Remediations\n\n- **Do** sanitize all dynamic data and function arguments before using them in file system operations. This step is crucial to prevent unauthorized access.\n- **Do** use a combination of hard-coded string literals and control logic, instead of directly passing dynamic data or function arguments to file system functions. This ensures safety.\n  ```javascript\n  function write(filename) {\n    switch(filename) {\n      case \"hello.txt\":\n        fs.writeCreateFile(\"hello.txt\");\n        break;\n      // Add more cases as necessary\n    }\n  }\n  ```\n\n## References\n\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_non_literal_fs_filename","line_number":45,"full_filename":"deploy.js","filename":"deploy.js","category_groups":["PII","Personal Data"],"source":{"start":45,"end":45,"column":{"start":35,"end":65}},"sink":{"start":45,"end":45,"column":{"start":35,"end":65},"content":""},"parent_line_number":45,"fingerprint":"daf602bb295933aef70a1f1a09ba9afe_4","old_fingerprint":"daf602bb295933aef70a1f1a09ba9afe_5","code_extract":"        const less = await render(fs.readFileSync(file, 'utf-8'), {});"},{"cwe_ids":["73"],"id":"javascript_lang_non_literal_fs_filename","title":"Unsanitized dynamic input in file path","description":"## Description\n\nAllowing unsanitized dynamic input in file paths can lead to unauthorized file and folder access. This vulnerability arises when dynamic data is used within the file system operations, potentially allowing attackers to access unauthorized or hidden files and folders.\n\n## Remediations\n\n- **Do** sanitize all dynamic data and function arguments before using them in file system operations. This step is crucial to prevent unauthorized access.\n- **Do** use a combination of hard-coded string literals and control logic, instead of directly passing dynamic data or function arguments to file system functions. This ensures safety.\n  ```javascript\n  function write(filename) {\n    switch(filename) {\n      case \"hello.txt\":\n        fs.writeCreateFile(\"hello.txt\");\n        break;\n      // Add more cases as necessary\n    }\n  }\n  ```\n\n## References\n\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_non_literal_fs_filename","line_number":63,"full_filename":"deploy.js","filename":"deploy.js","category_groups":["PII","Personal Data"],"source":{"start":63,"end":63,"column":{"start":35,"end":65}},"sink":{"start":63,"end":63,"column":{"start":35,"end":65},"content":""},"parent_line_number":63,"fingerprint":"daf602bb295933aef70a1f1a09ba9afe_5","old_fingerprint":"daf602bb295933aef70a1f1a09ba9afe_6","code_extract":"        const less = await render(fs.readFileSync(file, 'utf-8'), {});"},{"cwe_ids":["73"],"id":"javascript_lang_non_literal_fs_filename","title":"Unsanitized dynamic input in file path","description":"## Description\n\nAllowing unsanitized dynamic input in file paths can lead to unauthorized file and folder access. This vulnerability arises when dynamic data is used within the file system operations, potentially allowing attackers to access unauthorized or hidden files and folders.\n\n## Remediations\n\n- **Do** sanitize all dynamic data and function arguments before using them in file system operations. This step is crucial to prevent unauthorized access.\n- **Do** use a combination of hard-coded string literals and control logic, instead of directly passing dynamic data or function arguments to file system functions. This ensures safety.\n  ```javascript\n  function write(filename) {\n    switch(filename) {\n      case \"hello.txt\":\n        fs.writeCreateFile(\"hello.txt\");\n        break;\n      // Add more cases as necessary\n    }\n  }\n  ```\n\n## References\n\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_non_literal_fs_filename","line_number":132,"full_filename":"lib/common.js","filename":"lib/common.js","category_groups":["PII","Personal Data"],"source":{"start":132,"end":132,"column":{"start":9,"end":31}},"sink":{"start":132,"end":132,"column":{"start":9,"end":31},"content":""},"parent_line_number":132,"fingerprint":"574097b312570219fb2cc208e2bc8f1d_0","old_fingerprint":"574097b312570219fb2cc208e2bc8f1d_7","code_extract":"        fs.statSync(directory);"},{"cwe_ids":["73"],"id":"javascript_lang_non_literal_fs_filename","title":"Unsanitized dynamic input in file path","description":"## Description\n\nAllowing unsanitized dynamic input in file paths can lead to unauthorized file and folder access. This vulnerability arises when dynamic data is used within the file system operations, potentially allowing attackers to access unauthorized or hidden files and folders.\n\n## Remediations\n\n- **Do** sanitize all dynamic data and function arguments before using them in file system operations. This step is crucial to prevent unauthorized access.\n- **Do** use a combination of hard-coded string literals and control logic, instead of directly passing dynamic data or function arguments to file system functions. This ensures safety.\n  ```javascript\n  function write(filename) {\n    switch(filename) {\n      case \"hello.txt\":\n        fs.writeCreateFile(\"hello.txt\");\n        break;\n      // Add more cases as necessary\n    }\n  }\n  ```\n\n## References\n\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_non_literal_fs_filename","line_number":135,"full_filename":"lib/common.js","filename":"lib/common.js","category_groups":["PII","Personal Data"],"source":{"start":135,"end":135,"column":{"start":13,"end":36}},"sink":{"start":135,"end":135,"column":{"start":13,"end":36},"content":""},"parent_line_number":135,"fingerprint":"574097b312570219fb2cc208e2bc8f1d_1","old_fingerprint":"574097b312570219fb2cc208e2bc8f1d_8","code_extract":"            fs.mkdirSync(directory);"},{"cwe_ids":["73"],"id":"javascript_lang_non_literal_fs_filename","title":"Unsanitized dynamic input in file path","description":"## Description\n\nAllowing unsanitized dynamic input in file paths can lead to unauthorized file and folder access. This vulnerability arises when dynamic data is used within the file system operations, potentially allowing attackers to access unauthorized or hidden files and folders.\n\n## Remediations\n\n- **Do** sanitize all dynamic data and function arguments before using them in file system operations. This step is crucial to prevent unauthorized access.\n- **Do** use a combination of hard-coded string literals and control logic, instead of directly passing dynamic data or function arguments to file system functions. This ensures safety.\n  ```javascript\n  function write(filename) {\n    switch(filename) {\n      case \"hello.txt\":\n        fs.writeCreateFile(\"hello.txt\");\n        break;\n      // Add more cases as necessary\n    }\n  }\n  ```\n\n## References\n\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_non_literal_fs_filename","line_number":166,"full_filename":"lib/common.js","filename":"lib/common.js","category_groups":["PII","Personal Data"],"source":{"start":166,"end":166,"column":{"start":12,"end":34}},"sink":{"start":166,"end":166,"column":{"start":12,"end":34},"content":""},"parent_line_number":166,"fingerprint":"574097b312570219fb2cc208e2bc8f1d_2","old_fingerprint":"574097b312570219fb2cc208e2bc8f1d_9","code_extract":"        if(fs.lstatSync(files[i]).isDirectory() === false){"},{"cwe_ids":["73"],"id":"javascript_lang_non_literal_fs_filename","title":"Unsanitized dynamic input in file path","description":"## Description\n\nAllowing unsanitized dynamic input in file paths can lead to unauthorized file and folder access. This vulnerability arises when dynamic data is used within the file system operations, potentially allowing attackers to access unauthorized or hidden files and folders.\n\n## Remediations\n\n- **Do** sanitize all dynamic data and function arguments before using them in file system operations. This step is crucial to prevent unauthorized access.\n- **Do** use a combination of hard-coded string literals and control logic, instead of directly passing dynamic data or function arguments to file system functions. This ensures safety.\n  ```javascript\n  function write(filename) {\n    switch(filename) {\n      case \"hello.txt\":\n        fs.writeCreateFile(\"hello.txt\");\n        break;\n      // Add more cases as necessary\n    }\n  }\n  ```\n\n## References\n\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_non_literal_fs_filename","line_number":12,"full_filename":"lib/schema.js","filename":"lib/schema.js","category_groups":["PII","Personal Data"],"source":{"start":12,"end":12,"column":{"start":37,"end":67}},"sink":{"start":12,"end":12,"column":{"start":37,"end":67},"content":""},"parent_line_number":12,"fingerprint":"31e080760ef5fb53c019e8ba6ed8d32e_0","old_fingerprint":"31e080760ef5fb53c019e8ba6ed8d32e_0","code_extract":"        const fileData = JSON.parse(fs.readFileSync(file, 'utf-8'));"},{"cwe_ids":["73"],"id":"javascript_lang_non_literal_fs_filename","title":"Unsanitized dynamic input in file path","description":"## Description\n\nAllowing unsanitized dynamic input in file paths can lead to unauthorized file and folder access. This vulnerability arises when dynamic data is used within the file system operations, potentially allowing attackers to access unauthorized or hidden files and folders.\n\n## Remediations\n\n- **Do** sanitize all dynamic data and function arguments before using them in file system operations. This step is crucial to prevent unauthorized access.\n- **Do** use a combination of hard-coded string literals and control logic, instead of directly passing dynamic data or function arguments to file system functions. This ensures safety.\n  ```javascript\n  function write(filename) {\n    switch(filename) {\n      case \"hello.txt\":\n        fs.writeCreateFile(\"hello.txt\");\n        break;\n      // Add more cases as necessary\n    }\n  }\n  ```\n\n## References\n\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_non_literal_fs_filename","line_number":702,"full_filename":"routes/admin.js","filename":"routes/admin.js","category_groups":["PII","Personal Data"],"source":{"start":702,"end":702,"column":{"start":13,"end":37}},"sink":{"start":702,"end":702,"column":{"start":13,"end":37},"content":""},"parent_line_number":702,"fingerprint":"2a2fcfc8bf27489ee8ee1dd3cc4196b6_0","old_fingerprint":"2a2fcfc8bf27489ee8ee1dd3cc4196b6_10","code_extract":"            fs.unlinkSync(file.path);"},{"cwe_ids":["73"],"id":"javascript_lang_non_literal_fs_filename","title":"Unsanitized dynamic input in file path","description":"## Description\n\nAllowing unsanitized dynamic input in file paths can lead to unauthorized file and folder access. This vulnerability arises when dynamic data is used within the file system operations, potentially allowing attackers to access unauthorized or hidden files and folders.\n\n## Remediations\n\n- **Do** sanitize all dynamic data and function arguments before using them in file system operations. This step is crucial to prevent unauthorized access.\n- **Do** use a combination of hard-coded string literals and control logic, instead of directly passing dynamic data or function arguments to file system functions. This ensures safety.\n  ```javascript\n  function write(filename) {\n    switch(filename) {\n      case \"hello.txt\":\n        fs.writeCreateFile(\"hello.txt\");\n        break;\n      // Add more cases as necessary\n    }\n  }\n  ```\n\n## References\n\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_non_literal_fs_filename","line_number":713,"full_filename":"routes/admin.js","filename":"routes/admin.js","category_groups":["PII","Personal Data"],"source":{"start":713,"end":713,"column":{"start":13,"end":37}},"sink":{"start":713,"end":713,"column":{"start":13,"end":37},"content":""},"parent_line_number":713,"fingerprint":"2a2fcfc8bf27489ee8ee1dd3cc4196b6_1","old_fingerprint":"2a2fcfc8bf27489ee8ee1dd3cc4196b6_11","code_extract":"            fs.unlinkSync(file.path);"},{"cwe_ids":["73"],"id":"javascript_lang_non_literal_fs_filename","title":"Unsanitized dynamic input in file path","description":"## Description\n\nAllowing unsanitized dynamic input in file paths can lead to unauthorized file and folder access. This vulnerability arises when dynamic data is used within the file system operations, potentially allowing attackers to access unauthorized or hidden files and folders.\n\n## Remediations\n\n- **Do** sanitize all dynamic data and function arguments before using them in file system operations. This step is crucial to prevent unauthorized access.\n- **Do** use a combination of hard-coded string literals and control logic, instead of directly passing dynamic data or function arguments to file system functions. This ensures safety.\n  ```javascript\n  function write(filename) {\n    switch(filename) {\n      case \"hello.txt\":\n        fs.writeCreateFile(\"hello.txt\");\n        break;\n      // Add more cases as necessary\n    }\n  }\n  ```\n\n## References\n\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_non_literal_fs_filename","line_number":735,"full_filename":"routes/admin.js","filename":"routes/admin.js","category_groups":["PII","Personal Data"],"source":{"start":735,"end":735,"column":{"start":17,"end":47}},"sink":{"start":735,"end":735,"column":{"start":17,"end":47},"content":""},"parent_line_number":735,"fingerprint":"2a2fcfc8bf27489ee8ee1dd3cc4196b6_2","old_fingerprint":"2a2fcfc8bf27489ee8ee1dd3cc4196b6_12","code_extract":"                fs.createReadStream(file.path),"},{"cwe_ids":["73"],"id":"javascript_lang_non_literal_fs_filename","title":"Unsanitized dynamic input in file path","description":"## Description\n\nAllowing unsanitized dynamic input in file paths can lead to unauthorized file and folder access. This vulnerability arises when dynamic data is used within the file system operations, potentially allowing attackers to access unauthorized or hidden files and folders.\n\n## Remediations\n\n- **Do** sanitize all dynamic data and function arguments before using them in file system operations. This step is crucial to prevent unauthorized access.\n- **Do** use a combination of hard-coded string literals and control logic, instead of directly passing dynamic data or function arguments to file system functions. This ensures safety.\n  ```javascript\n  function write(filename) {\n    switch(filename) {\n      case \"hello.txt\":\n        fs.writeCreateFile(\"hello.txt\");\n        break;\n      // Add more cases as necessary\n    }\n  }\n  ```\n\n## References\n\n- [OWASP path traversal](https://owasp.org/www-community/attacks/Path_Traversal)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_non_literal_fs_filename","line_number":740,"full_filename":"routes/admin.js","filename":"routes/admin.js","category_groups":["PII","Personal Data"],"source":{"start":740,"end":740,"column":{"start":13,"end":37}},"sink":{"start":740,"end":740,"column":{"start":13,"end":37},"content":""},"parent_line_number":740,"fingerprint":"2a2fcfc8bf27489ee8ee1dd3cc4196b6_3","old_fingerprint":"2a2fcfc8bf27489ee8ee1dd3cc4196b6_13","code_extract":"            fs.unlinkSync(file.path);"},{"cwe_ids":["22"],"id":"javascript_lang_path_traversal","title":"Unsanitized dynamic input in file path","description":"## Description\n\nUsing unsanitized dynamic input to determine file paths can allow attackers to gain access to files and folders outside of the intended scope. This vulnerability occurs when input provided by users is directly used to access the filesystem without proper validation or sanitization.\n\n## Remediations\n\n- **Do not** directly use user input to construct file paths. This can lead to unauthorized file access.\n- **Do** sanitize user input used in file paths. Replace patterns that can navigate out of intended directories, such as `..\\..`, to prevent path traversal attacks.\n  ```javascript\n  var folder = target.replace(/^(\\.\\.(\\/|\\\\|$))+/, '');\n  ```\n- **Do** check for and remove any instances of the NULL byte (\"%00\") in user input to guard against poison NULL byte attacks.\n  ```javascript\n  if (target.indexOf('\\0') !== -1) {\n    // Handle or reject the input\n  }\n  ```\n- **Do** use path concatenation methods provided by your programming environment to securely combine user input with your base directory path. This ensures the final path starts within the intended scope.\n  ```javascript\n  const path = require(\"path\");\n  var pathname = path.join(\"/public/\", folder);\n  if (pathname.indexOf(\"/public/\") !== 0) {\n    // Handle or reject the input\n  }\n  ```\n\n## References\n\n- [OWASP Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_path_traversal","line_number":62,"full_filename":"lib/config.js","filename":"lib/config.js","category_groups":["PII","Personal Data"],"source":{"start":62,"end":62,"column":{"start":32,"end":105}},"sink":{"start":62,"end":62,"column":{"start":32,"end":105},"content":""},"parent_line_number":62,"fingerprint":"8d0fd1e000418b9336e58b057ea8ef18_0","old_fingerprint":"8d0fd1e000418b9336e58b057ea8ef18_0","code_extract":"        const gateConfigFile = path.join(__dirname, '../config', 'payment', 'config', `${gateway}.json`);"},{"cwe_ids":["79"],"id":"javascript_lang_raw_html_using_user_input","title":"Unsanitized user input in raw HTML strings (XSS)","description":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```javascript\n  const html = `\u003ch1\u003e${req.params.title}\u003c/h1\u003e` // unsafe\n  ```\n- **Do** use a framework or templating language that automatically handles the encoding and sanitization of user input when constructing HTML. This approach minimizes the risk of XSS attacks.\n- **Do** sanitize user input if you must use HTML strings directly. Utilize libraries designed for input sanitization to ensure that user input does not contain malicious content.\n  ```javascript\n  import sanitizeHtml from 'sanitize-html'\n\n  const sanitizedTitle = sanitizeHtml(req.params.title)\n  const html = `\u003ch1\u003e${sanitizedTitle}\u003c/h1\u003e`\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_raw_html_using_user_input","line_number":128,"full_filename":"lib/payments/adyen.js","filename":"lib/payments/adyen.js","category_groups":["PII","Personal Data"],"source":{"start":128,"end":128,"column":{"start":13,"end":147}},"sink":{"start":128,"end":128,"column":{"start":13,"end":147},"content":""},"parent_line_number":128,"fingerprint":"8b784d6c445a872507a5c50d18300e32_0","old_fingerprint":"8b784d6c445a872507a5c50d18300e32_2","code_extract":"            req.session.paymentDetails = `\u003cp\u003e\u003cstrong\u003eOrder ID: \u003c/strong\u003e${newId}\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eTransaction ID: \u003c/strong\u003e${req.body.paymentId}\u003c/p\u003e`;"},{"cwe_ids":["79"],"id":"javascript_lang_raw_html_using_user_input","title":"Unsanitized user input in raw HTML strings (XSS)","description":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```javascript\n  const html = `\u003ch1\u003e${req.params.title}\u003c/h1\u003e` // unsafe\n  ```\n- **Do** use a framework or templating language that automatically handles the encoding and sanitization of user input when constructing HTML. This approach minimizes the risk of XSS attacks.\n- **Do** sanitize user input if you must use HTML strings directly. Utilize libraries designed for input sanitization to ensure that user input does not contain malicious content.\n  ```javascript\n  import sanitizeHtml from 'sanitize-html'\n\n  const sanitizedTitle = sanitizeHtml(req.params.title)\n  const html = `\u003ch1\u003e${sanitizedTitle}\u003c/h1\u003e`\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_raw_html_using_user_input","line_number":39,"full_filename":"lib/payments/blockonomics.js","filename":"lib/payments/blockonomics.js","category_groups":["PII","Personal Data"],"source":{"start":39,"end":39,"column":{"start":33,"end":144}},"sink":{"start":39,"end":39,"column":{"start":33,"end":144},"content":""},"parent_line_number":39,"fingerprint":"c461b20a46a17fa4920a3c24d66e5c58_0","old_fingerprint":"c461b20a46a17fa4920a3c24d66e5c58_0","code_extract":"                paymentDetails: `\u003cp\u003e\u003cstrong\u003eOrder ID: \u003c/strong\u003e${order._id}\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eTransaction ID: \u003c/strong\u003e${order.orderPaymentId}\u003c/p\u003e`"},{"cwe_ids":["79"],"id":"javascript_lang_raw_html_using_user_input","title":"Unsanitized user input in raw HTML strings (XSS)","description":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```javascript\n  const html = `\u003ch1\u003e${req.params.title}\u003c/h1\u003e` // unsafe\n  ```\n- **Do** use a framework or templating language that automatically handles the encoding and sanitization of user input when constructing HTML. This approach minimizes the risk of XSS attacks.\n- **Do** sanitize user input if you must use HTML strings directly. Utilize libraries designed for input sanitization to ensure that user input does not contain malicious content.\n  ```javascript\n  import sanitizeHtml from 'sanitize-html'\n\n  const sanitizedTitle = sanitizeHtml(req.params.title)\n  const html = `\u003ch1\u003e${sanitizedTitle}\u003c/h1\u003e`\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_raw_html_using_user_input","line_number":127,"full_filename":"lib/payments/payway.js","filename":"lib/payments/payway.js","category_groups":["PII","Personal Data"],"source":{"start":127,"end":128,"column":{"start":21,"end":88}},"sink":{"start":127,"end":128,"column":{"start":21,"end":88},"content":""},"parent_line_number":127,"fingerprint":"b46293c1a17037d12bc124638d80abce_0","old_fingerprint":"b46293c1a17037d12bc124638d80abce_1","code_extract":"                    req.session.paymentDetails = `\u003cp\u003e\u003cstrong\u003eOrder ID: \u003c/strong\u003e${newId}\u003c/p\u003e\n                    \u003cp\u003e\u003cstrong\u003eTransaction ID: \u003c/strong\u003e${orderDoc.orderPaymentId}\u003c/p\u003e`;"},{"cwe_ids":["79"],"id":"javascript_lang_raw_html_using_user_input","title":"Unsanitized user input in raw HTML strings (XSS)","description":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```javascript\n  const html = `\u003ch1\u003e${req.params.title}\u003c/h1\u003e` // unsafe\n  ```\n- **Do** use a framework or templating language that automatically handles the encoding and sanitization of user input when constructing HTML. This approach minimizes the risk of XSS attacks.\n- **Do** sanitize user input if you must use HTML strings directly. Utilize libraries designed for input sanitization to ensure that user input does not contain malicious content.\n  ```javascript\n  import sanitizeHtml from 'sanitize-html'\n\n  const sanitizedTitle = sanitizeHtml(req.params.title)\n  const html = `\u003ch1\u003e${sanitizedTitle}\u003c/h1\u003e`\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_raw_html_using_user_input","line_number":155,"full_filename":"lib/payments/payway.js","filename":"lib/payments/payway.js","category_groups":["PII","Personal Data"],"source":{"start":155,"end":156,"column":{"start":21,"end":83}},"sink":{"start":155,"end":156,"column":{"start":21,"end":83},"content":""},"parent_line_number":155,"fingerprint":"b46293c1a17037d12bc124638d80abce_1","old_fingerprint":"b46293c1a17037d12bc124638d80abce_3","code_extract":"                    req.session.paymentDetails = `\u003cp\u003e\u003cstrong\u003eOrder ID: \u003c/strong\u003e${newId}\n                    \u003c/p\u003e\u003cp\u003e\u003cstrong\u003eTransaction ID: \u003c/strong\u003e ${txn.transHash}\u003c/p\u003e`;"},{"cwe_ids":["79"],"id":"javascript_lang_raw_html_using_user_input","title":"Unsanitized user input in raw HTML strings (XSS)","description":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```javascript\n  const html = `\u003ch1\u003e${req.params.title}\u003c/h1\u003e` // unsafe\n  ```\n- **Do** use a framework or templating language that automatically handles the encoding and sanitization of user input when constructing HTML. This approach minimizes the risk of XSS attacks.\n- **Do** sanitize user input if you must use HTML strings directly. Utilize libraries designed for input sanitization to ensure that user input does not contain malicious content.\n  ```javascript\n  import sanitizeHtml from 'sanitize-html'\n\n  const sanitizedTitle = sanitizeHtml(req.params.title)\n  const html = `\u003ch1\u003e${sanitizedTitle}\u003c/h1\u003e`\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_raw_html_using_user_input","line_number":194,"full_filename":"lib/payments/stripe.js","filename":"lib/payments/stripe.js","category_groups":["PII","Personal Data"],"source":{"start":194,"end":194,"column":{"start":9,"end":143}},"sink":{"start":194,"end":194,"column":{"start":9,"end":143},"content":""},"parent_line_number":194,"fingerprint":"aac263b7cf104cf1fa7a8a7c66a4ed8d_0","old_fingerprint":"aac263b7cf104cf1fa7a8a7c66a4ed8d_4","code_extract":"        req.session.paymentDetails = `\u003cp\u003e\u003cstrong\u003eOrder ID: \u003c/strong\u003e${orderId}\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eTransaction ID: \u003c/strong\u003e${paymentIntent.id}\u003c/p\u003e`;"},{"cwe_ids":["79"],"id":"javascript_lang_raw_html_using_user_input","title":"Unsanitized user input in raw HTML strings (XSS)","description":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```javascript\n  const html = `\u003ch1\u003e${req.params.title}\u003c/h1\u003e` // unsafe\n  ```\n- **Do** use a framework or templating language that automatically handles the encoding and sanitization of user input when constructing HTML. This approach minimizes the risk of XSS attacks.\n- **Do** sanitize user input if you must use HTML strings directly. Utilize libraries designed for input sanitization to ensure that user input does not contain malicious content.\n  ```javascript\n  import sanitizeHtml from 'sanitize-html'\n\n  const sanitizedTitle = sanitizeHtml(req.params.title)\n  const html = `\u003ch1\u003e${sanitizedTitle}\u003c/h1\u003e`\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_raw_html_using_user_input","line_number":223,"full_filename":"lib/payments/stripe.js","filename":"lib/payments/stripe.js","category_groups":["PII","Personal Data"],"source":{"start":223,"end":223,"column":{"start":5,"end":139}},"sink":{"start":223,"end":223,"column":{"start":5,"end":139},"content":""},"parent_line_number":223,"fingerprint":"aac263b7cf104cf1fa7a8a7c66a4ed8d_1","old_fingerprint":"aac263b7cf104cf1fa7a8a7c66a4ed8d_5","code_extract":"    req.session.paymentDetails = `\u003cp\u003e\u003cstrong\u003eOrder ID: \u003c/strong\u003e${orderId}\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eTransaction ID: \u003c/strong\u003e${paymentIntent.id}\u003c/p\u003e`;"}],"medium":[{"cwe_ids":["693"],"id":"javascript_express_default_cookie_config","title":"Usage of default cookie configuration","description":"## Description\n\nUsing default cookie configurations can expose your application to security risks. This vulnerability arises when cookies are set with their default values, making them predictable and easier to exploit.\n\n## Remediations\n\n- **Do not** rely on default cookie names.\n- **Do** use generic, non-descriptive names for session cookies. This makes it harder for attackers to identify and exploit the session management mechanism of your application.\n- **Do** always specify a `maxAge` or `expires` value to control cookie lifetime.\n\n## References\n\n- [Express Security Best Practices](https://expressjs.com/en/advanced/best-practice-security.html#use-cookies-securely)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_express_default_cookie_config","line_number":370,"full_filename":"app.js","filename":"app.js","category_groups":["PII","Personal Data"],"source":{"start":370,"end":374,"column":{"start":13,"end":6}},"sink":{"start":370,"end":374,"column":{"start":13,"end":6},"content":""},"parent_line_number":370,"fingerprint":"cfe858e6b20122a91e03221f745c9dcb_0","old_fingerprint":"cfe858e6b20122a91e03221f745c9dcb_0","code_extract":"    cookie: {\n        path: '/',\n        httpOnly: true,\n        maxAge: 900000\n    },"},{"cwe_ids":["693"],"id":"javascript_express_default_session_config","title":"Usage of default session cookie configuration","description":"## Description\n\nUsing default session cookie configurations can expose your application to security vulnerabilities. This vulnerability arises when session cookie are set with their default values, making them predictable and easier to exploit.\n\n## Remediations\n\n- **Do not** rely on the default session cookie names and values provided by your framework. These defaults can be easily guessed by attackers, increasing the risk of session hijacking.\n- **Do** use generic, non-descriptive names for session cookies. This makes it harder for attackers to identify and exploit the session management mechanism of your application.\n\n## References\n\n- [Express Security Best Practices](https://expressjs.com/en/advanced/best-practice-security.html#use-cookies-securely)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_express_default_session_config","line_number":366,"full_filename":"app.js","filename":"app.js","category_groups":["PII","Personal Data"],"source":{"start":366,"end":376,"column":{"start":17,"end":2}},"sink":{"start":366,"end":376,"column":{"start":17,"end":2},"content":""},"parent_line_number":366,"fingerprint":"03ff68c49b60ef34aa387a5058c1dc7d_0","old_fingerprint":"03ff68c49b60ef34aa387a5058c1dc7d_0","code_extract":"app.use(session({\n    resave: true,\n    saveUninitialized: true,\n    ...omitted (buffer value 3)\n    },\n    store: store\n}));"},{"cwe_ids":["601"],"id":"javascript_express_open_redirect","title":"Unsanitized user input in redirect","description":"## Description\n\nUsing unsanitized user input for redirection can expose your application to phishing attacks. This vulnerability occurs when user input directly influences the destination of a redirect without proper validation, making it easier for attackers to redirect users to malicious sites.\n\n## Remediations\n\n- **Do not** use unsanitized user input to construct URLs for redirection. This can lead to security vulnerabilities where attackers could exploit the redirect to lead users to malicious sites.\n- **Do** validate user input by employing a safe list or a mapping strategy for constructing URLs. This ensures that only pre-approved destinations are used for redirects, significantly reducing the risk of phishing attacks.\n  ```javascript\n  var map = {\n    \"1\": \"/planes\",\n    \"2\": \"/trains\",\n    \"3\": \"/automobiles\",\n  }\n\n  res.redirect(map[req.body.transport])\n  ```\n\n## References\n\n- [OWASP Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_express_open_redirect","line_number":149,"full_filename":"lib/payments/payway.js","filename":"lib/payments/payway.js","category_groups":["PII","Personal Data"],"source":{"start":149,"end":149,"column":{"start":21,"end":54}},"sink":{"start":149,"end":149,"column":{"start":21,"end":54},"content":""},"parent_line_number":149,"fingerprint":"9a8fac3eab9b7f52cd9bcf172bb61a78_0","old_fingerprint":"9a8fac3eab9b7f52cd9bcf172bb61a78_0","code_extract":"                    res.redirect(`/payment/${newId}`);"},{"cwe_ids":["601"],"id":"javascript_express_open_redirect","title":"Unsanitized user input in redirect","description":"## Description\n\nUsing unsanitized user input for redirection can expose your application to phishing attacks. This vulnerability occurs when user input directly influences the destination of a redirect without proper validation, making it easier for attackers to redirect users to malicious sites.\n\n## Remediations\n\n- **Do not** use unsanitized user input to construct URLs for redirection. This can lead to security vulnerabilities where attackers could exploit the redirect to lead users to malicious sites.\n- **Do** validate user input by employing a safe list or a mapping strategy for constructing URLs. This ensures that only pre-approved destinations are used for redirects, significantly reducing the risk of phishing attacks.\n  ```javascript\n  var map = {\n    \"1\": \"/planes\",\n    \"2\": \"/trains\",\n    \"3\": \"/automobiles\",\n  }\n\n  res.redirect(map[req.body.transport])\n  ```\n\n## References\n\n- [OWASP Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_express_open_redirect","line_number":157,"full_filename":"lib/payments/payway.js","filename":"lib/payments/payway.js","category_groups":["PII","Personal Data"],"source":{"start":157,"end":157,"column":{"start":21,"end":54}},"sink":{"start":157,"end":157,"column":{"start":21,"end":54},"content":""},"parent_line_number":157,"fingerprint":"9a8fac3eab9b7f52cd9bcf172bb61a78_1","old_fingerprint":"9a8fac3eab9b7f52cd9bcf172bb61a78_1","code_extract":"                    res.redirect(`/payment/${newId}`);"},{"cwe_ids":["601"],"id":"javascript_express_open_redirect","title":"Unsanitized user input in redirect","description":"## Description\n\nUsing unsanitized user input for redirection can expose your application to phishing attacks. This vulnerability occurs when user input directly influences the destination of a redirect without proper validation, making it easier for attackers to redirect users to malicious sites.\n\n## Remediations\n\n- **Do not** use unsanitized user input to construct URLs for redirection. This can lead to security vulnerabilities where attackers could exploit the redirect to lead users to malicious sites.\n- **Do** validate user input by employing a safe list or a mapping strategy for constructing URLs. This ensures that only pre-approved destinations are used for redirects, significantly reducing the risk of phishing attacks.\n  ```javascript\n  var map = {\n    \"1\": \"/planes\",\n    \"2\": \"/trains\",\n    \"3\": \"/automobiles\",\n  }\n\n  res.redirect(map[req.body.transport])\n  ```\n\n## References\n\n- [OWASP Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_express_open_redirect","line_number":216,"full_filename":"lib/payments/stripe.js","filename":"lib/payments/stripe.js","category_groups":["PII","Personal Data"],"source":{"start":216,"end":216,"column":{"start":9,"end":44}},"sink":{"start":216,"end":216,"column":{"start":9,"end":44},"content":""},"parent_line_number":216,"fingerprint":"07dd51e310b150dc4874b20c867db61d_0","old_fingerprint":"07dd51e310b150dc4874b20c867db61d_2","code_extract":"        res.redirect(`/payment/${orderId}`);"},{"cwe_ids":["601"],"id":"javascript_express_open_redirect","title":"Unsanitized user input in redirect","description":"## Description\n\nUsing unsanitized user input for redirection can expose your application to phishing attacks. This vulnerability occurs when user input directly influences the destination of a redirect without proper validation, making it easier for attackers to redirect users to malicious sites.\n\n## Remediations\n\n- **Do not** use unsanitized user input to construct URLs for redirection. This can lead to security vulnerabilities where attackers could exploit the redirect to lead users to malicious sites.\n- **Do** validate user input by employing a safe list or a mapping strategy for constructing URLs. This ensures that only pre-approved destinations are used for redirects, significantly reducing the risk of phishing attacks.\n  ```javascript\n  var map = {\n    \"1\": \"/planes\",\n    \"2\": \"/trains\",\n    \"3\": \"/automobiles\",\n  }\n\n  res.redirect(map[req.body.transport])\n  ```\n\n## References\n\n- [OWASP Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_express_open_redirect","line_number":224,"full_filename":"lib/payments/stripe.js","filename":"lib/payments/stripe.js","category_groups":["PII","Personal Data"],"source":{"start":224,"end":224,"column":{"start":5,"end":40}},"sink":{"start":224,"end":224,"column":{"start":5,"end":40},"content":""},"parent_line_number":224,"fingerprint":"07dd51e310b150dc4874b20c867db61d_1","old_fingerprint":"07dd51e310b150dc4874b20c867db61d_3","code_extract":"    res.redirect(`/payment/${orderId}`);"},{"cwe_ids":["693"],"id":"javascript_express_reduce_fingerprint","title":"Missing server configuration to reduce server fingerprinting","description":"## Description\n\nReducing server fingerprinting enhances security by making it harder for attackers to identify the software your server is running. Server fingerprinting involves analyzing the unique responses of server software to specific requests, which can reveal information about the server's software and version. While not a direct security vulnerability, minimizing this information leakage is a proactive step to obscure details that could be used in targeted attacks.\n\n## Remediations\n\n- **Do** disable the `X-Powered-By` header in Express.js applications to prevent revealing the server's technology stack. Use the `app.disable()` method to achieve this.\n  ```javascript\n  app.disable('x-powered-by');\n  ```\n\n## References\n\n- [Express Security Best Practices](https://expressjs.com/en/advanced/best-practice-security.html)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_express_reduce_fingerprint","line_number":61,"full_filename":"app.js","filename":"app.js","category_groups":["PII","Personal Data"],"source":{"start":61,"end":61,"column":{"start":13,"end":22}},"sink":{"start":61,"end":61,"column":{"start":13,"end":22},"content":""},"parent_line_number":61,"fingerprint":"56b4b80441669f82df897f20ddcfb1a9_0","old_fingerprint":"56b4b80441669f82df897f20ddcfb1a9_0","code_extract":"const app = express();"},{"cwe_ids":["352"],"id":"javascript_express_static_asset_with_session","title":"Usage of session on static asset (CSRF)","description":"## Description\n\nEnabling sessions for static assets can inadvertently expose your application to Cross-Site Request Forgery (CSRF) attacks. This vulnerability arises because static assets, like images and stylesheets, are often cached by intermediary services such as Content Delivery Networks (CDNs). If these assets are served with session information, attackers can exploit this to hijack a user's session.\n\n## Remediations\n\n- **Do** ensure that static resources are served prior to session initialization in your application's middleware order. This practice prevents session cookies from being unnecessarily attached to static assets, reducing the risk of CSRF attacks.\n  ```javascript\n  app.use(express.static(__dirname + \"/public\"));\n  app.use(session());\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/javascript_express_static_asset_with_session","line_number":391,"full_filename":"app.js","filename":"app.js","category_groups":["PII","Personal Data"],"source":{"start":391,"end":391,"column":{"start":1,"end":57}},"sink":{"start":391,"end":391,"column":{"start":1,"end":57},"content":""},"parent_line_number":391,"fingerprint":"4a691786f826fb4546e42fa804c49322_0","old_fingerprint":"4a691786f826fb4546e42fa804c49322_0","code_extract":"app.use(express.static(path.join(__dirname, 'public')));"},{"cwe_ids":["352"],"id":"javascript_express_static_asset_with_session","title":"Usage of session on static asset (CSRF)","description":"## Description\n\nEnabling sessions for static assets can inadvertently expose your application to Cross-Site Request Forgery (CSRF) attacks. This vulnerability arises because static assets, like images and stylesheets, are often cached by intermediary services such as Content Delivery Networks (CDNs). If these assets are served with session information, attackers can exploit this to hijack a user's session.\n\n## Remediations\n\n- **Do** ensure that static resources are served prior to session initialization in your application's middleware order. This practice prevents session cookies from being unnecessarily attached to static assets, reducing the risk of CSRF attacks.\n  ```javascript\n  app.use(express.static(__dirname + \"/public\"));\n  app.use(session());\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/javascript_express_static_asset_with_session","line_number":392,"full_filename":"app.js","filename":"app.js","category_groups":["PII","Personal Data"],"source":{"start":392,"end":392,"column":{"start":1,"end":66}},"sink":{"start":392,"end":392,"column":{"start":1,"end":66},"content":""},"parent_line_number":392,"fingerprint":"4a691786f826fb4546e42fa804c49322_1","old_fingerprint":"4a691786f826fb4546e42fa804c49322_1","code_extract":"app.use(express.static(path.join(__dirname, 'views', 'themes')));"},{"cwe_ids":["352"],"id":"javascript_express_static_asset_with_session","title":"Usage of session on static asset (CSRF)","description":"## Description\n\nEnabling sessions for static assets can inadvertently expose your application to Cross-Site Request Forgery (CSRF) attacks. This vulnerability arises because static assets, like images and stylesheets, are often cached by intermediary services such as Content Delivery Networks (CDNs). If these assets are served with session information, attackers can exploit this to hijack a user's session.\n\n## Remediations\n\n- **Do** ensure that static resources are served prior to session initialization in your application's middleware order. This practice prevents session cookies from being unnecessarily attached to static assets, reducing the risk of CSRF attacks.\n  ```javascript\n  app.use(express.static(__dirname + \"/public\"));\n  app.use(session());\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/javascript_express_static_asset_with_session","line_number":393,"full_filename":"app.js","filename":"app.js","category_groups":["PII","Personal Data"],"source":{"start":393,"end":393,"column":{"start":1,"end":80}},"sink":{"start":393,"end":393,"column":{"start":1,"end":80},"content":""},"parent_line_number":393,"fingerprint":"4a691786f826fb4546e42fa804c49322_2","old_fingerprint":"4a691786f826fb4546e42fa804c49322_2","code_extract":"app.use(express.static(path.join(__dirname, 'node_modules', 'feather-icons')));"},{"cwe_ids":["1333"],"id":"javascript_lang_dynamic_regex","title":"Unsanitized dynamic input in regular expression","description":"## Description\n\nCreating regular expressions from dynamic input can lead to a vulnerability known as Regular Expression Denial of Service (ReDoS). This issue arises because some regular expressions can be processed with exponential time complexity. When attackers exploit this, it can significantly drain CPU resources, effectively causing a denial of service.\n\n## Remediations\n\n- **Do** validate all dynamic and user-supplied input against a strict safelist of allowed characters before using it in regular expressions. This step helps prevent attackers from injecting malicious patterns.\n- **Do** restrict the length of input that can be processed. Limiting input size is a straightforward way to mitigate many ReDoS vulnerabilities.\n- **Do** implement timeouts for regular expression evaluation to avoid excessive resource consumption. This can be achieved using JavaScript environments or libraries that allow setting execution time limits.\n- **Do** simplify complex regular expressions to reduce the risk of catastrophic backtracking. Breaking down expressions into simpler parts makes them safer and more manageable.\n- **Do not** directly concatenate user input into regular expressions. This practice can introduce unsafe patterns and lead to vulnerabilities.\n  ```javascript\n  var dynamicRegex = new RegExp('^' + userInput); // unsafe\n  ```\n\n## References\n\n- [OWASP Regular expression Denial of Service - ReDoS](https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_dynamic_regex","line_number":825,"full_filename":"routes/admin.js","filename":"routes/admin.js","category_groups":["PII","Personal Data"],"source":{"start":825,"end":825,"column":{"start":36,"end":66}},"sink":{"start":825,"end":825,"column":{"start":36,"end":66},"content":""},"parent_line_number":825,"fingerprint":"a5429febf4e9d9742a782c6afe8d2c72_0","old_fingerprint":"a5429febf4e9d9742a782c6afe8d2c72_0","code_extract":"            { firstName: { $regex: new RegExp(searchValue, 'img') } },"},{"cwe_ids":["1333"],"id":"javascript_lang_dynamic_regex","title":"Unsanitized dynamic input in regular expression","description":"## Description\n\nCreating regular expressions from dynamic input can lead to a vulnerability known as Regular Expression Denial of Service (ReDoS). This issue arises because some regular expressions can be processed with exponential time complexity. When attackers exploit this, it can significantly drain CPU resources, effectively causing a denial of service.\n\n## Remediations\n\n- **Do** validate all dynamic and user-supplied input against a strict safelist of allowed characters before using it in regular expressions. This step helps prevent attackers from injecting malicious patterns.\n- **Do** restrict the length of input that can be processed. Limiting input size is a straightforward way to mitigate many ReDoS vulnerabilities.\n- **Do** implement timeouts for regular expression evaluation to avoid excessive resource consumption. This can be achieved using JavaScript environments or libraries that allow setting execution time limits.\n- **Do** simplify complex regular expressions to reduce the risk of catastrophic backtracking. Breaking down expressions into simpler parts makes them safer and more manageable.\n- **Do not** directly concatenate user input into regular expressions. This practice can introduce unsafe patterns and lead to vulnerabilities.\n  ```javascript\n  var dynamicRegex = new RegExp('^' + userInput); // unsafe\n  ```\n\n## References\n\n- [OWASP Regular expression Denial of Service - ReDoS](https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_dynamic_regex","line_number":826,"full_filename":"routes/admin.js","filename":"routes/admin.js","category_groups":["PII","Personal Data"],"source":{"start":826,"end":826,"column":{"start":35,"end":65}},"sink":{"start":826,"end":826,"column":{"start":35,"end":65},"content":""},"parent_line_number":826,"fingerprint":"a5429febf4e9d9742a782c6afe8d2c72_1","old_fingerprint":"a5429febf4e9d9742a782c6afe8d2c72_1","code_extract":"            { lastName: { $regex: new RegExp(searchValue, 'img') } }"},{"cwe_ids":["1333"],"id":"javascript_lang_dynamic_regex","title":"Unsanitized dynamic input in regular expression","description":"## Description\n\nCreating regular expressions from dynamic input can lead to a vulnerability known as Regular Expression Denial of Service (ReDoS). This issue arises because some regular expressions can be processed with exponential time complexity. When attackers exploit this, it can significantly drain CPU resources, effectively causing a denial of service.\n\n## Remediations\n\n- **Do** validate all dynamic and user-supplied input against a strict safelist of allowed characters before using it in regular expressions. This step helps prevent attackers from injecting malicious patterns.\n- **Do** restrict the length of input that can be processed. Limiting input size is a straightforward way to mitigate many ReDoS vulnerabilities.\n- **Do** implement timeouts for regular expression evaluation to avoid excessive resource consumption. This can be achieved using JavaScript environments or libraries that allow setting execution time limits.\n- **Do** simplify complex regular expressions to reduce the risk of catastrophic backtracking. Breaking down expressions into simpler parts makes them safer and more manageable.\n- **Do not** directly concatenate user input into regular expressions. This practice can introduce unsafe patterns and lead to vulnerabilities.\n  ```javascript\n  var dynamicRegex = new RegExp('^' + userInput); // unsafe\n  ```\n\n## References\n\n- [OWASP Regular expression Denial of Service - ReDoS](https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_dynamic_regex","line_number":829,"full_filename":"routes/admin.js","filename":"routes/admin.js","category_groups":["PII","Personal Data"],"source":{"start":829,"end":829,"column":{"start":41,"end":71}},"sink":{"start":829,"end":829,"column":{"start":41,"end":71},"content":""},"parent_line_number":829,"fingerprint":"a5429febf4e9d9742a782c6afe8d2c72_2","old_fingerprint":"a5429febf4e9d9742a782c6afe8d2c72_2","code_extract":"            { orderFirstname: { $regex: new RegExp(searchValue, 'img') } },"},{"cwe_ids":["1333"],"id":"javascript_lang_dynamic_regex","title":"Unsanitized dynamic input in regular expression","description":"## Description\n\nCreating regular expressions from dynamic input can lead to a vulnerability known as Regular Expression Denial of Service (ReDoS). This issue arises because some regular expressions can be processed with exponential time complexity. When attackers exploit this, it can significantly drain CPU resources, effectively causing a denial of service.\n\n## Remediations\n\n- **Do** validate all dynamic and user-supplied input against a strict safelist of allowed characters before using it in regular expressions. This step helps prevent attackers from injecting malicious patterns.\n- **Do** restrict the length of input that can be processed. Limiting input size is a straightforward way to mitigate many ReDoS vulnerabilities.\n- **Do** implement timeouts for regular expression evaluation to avoid excessive resource consumption. This can be achieved using JavaScript environments or libraries that allow setting execution time limits.\n- **Do** simplify complex regular expressions to reduce the risk of catastrophic backtracking. Breaking down expressions into simpler parts makes them safer and more manageable.\n- **Do not** directly concatenate user input into regular expressions. This practice can introduce unsafe patterns and lead to vulnerabilities.\n  ```javascript\n  var dynamicRegex = new RegExp('^' + userInput); // unsafe\n  ```\n\n## References\n\n- [OWASP Regular expression Denial of Service - ReDoS](https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_dynamic_regex","line_number":830,"full_filename":"routes/admin.js","filename":"routes/admin.js","category_groups":["PII","Personal Data"],"source":{"start":830,"end":830,"column":{"start":40,"end":70}},"sink":{"start":830,"end":830,"column":{"start":40,"end":70},"content":""},"parent_line_number":830,"fingerprint":"a5429febf4e9d9742a782c6afe8d2c72_3","old_fingerprint":"a5429febf4e9d9742a782c6afe8d2c72_3","code_extract":"            { orderLastname: { $regex: new RegExp(searchValue, 'img') } }"},{"cwe_ids":["1333"],"id":"javascript_lang_dynamic_regex","title":"Unsanitized dynamic input in regular expression","description":"## Description\n\nCreating regular expressions from dynamic input can lead to a vulnerability known as Regular Expression Denial of Service (ReDoS). This issue arises because some regular expressions can be processed with exponential time complexity. When attackers exploit this, it can significantly drain CPU resources, effectively causing a denial of service.\n\n## Remediations\n\n- **Do** validate all dynamic and user-supplied input against a strict safelist of allowed characters before using it in regular expressions. This step helps prevent attackers from injecting malicious patterns.\n- **Do** restrict the length of input that can be processed. Limiting input size is a straightforward way to mitigate many ReDoS vulnerabilities.\n- **Do** implement timeouts for regular expression evaluation to avoid excessive resource consumption. This can be achieved using JavaScript environments or libraries that allow setting execution time limits.\n- **Do** simplify complex regular expressions to reduce the risk of catastrophic backtracking. Breaking down expressions into simpler parts makes them safer and more manageable.\n- **Do not** directly concatenate user input into regular expressions. This practice can introduce unsafe patterns and lead to vulnerabilities.\n  ```javascript\n  var dynamicRegex = new RegExp('^' + userInput); // unsafe\n  ```\n\n## References\n\n- [OWASP Regular expression Denial of Service - ReDoS](https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_dynamic_regex","line_number":833,"full_filename":"routes/admin.js","filename":"routes/admin.js","category_groups":["PII","Personal Data"],"source":{"start":833,"end":833,"column":{"start":39,"end":69}},"sink":{"start":833,"end":833,"column":{"start":39,"end":69},"content":""},"parent_line_number":833,"fingerprint":"a5429febf4e9d9742a782c6afe8d2c72_4","old_fingerprint":"a5429febf4e9d9742a782c6afe8d2c72_4","code_extract":"            { productTitle: { $regex: new RegExp(searchValue, 'img') } },"},{"cwe_ids":["1333"],"id":"javascript_lang_dynamic_regex","title":"Unsanitized dynamic input in regular expression","description":"## Description\n\nCreating regular expressions from dynamic input can lead to a vulnerability known as Regular Expression Denial of Service (ReDoS). This issue arises because some regular expressions can be processed with exponential time complexity. When attackers exploit this, it can significantly drain CPU resources, effectively causing a denial of service.\n\n## Remediations\n\n- **Do** validate all dynamic and user-supplied input against a strict safelist of allowed characters before using it in regular expressions. This step helps prevent attackers from injecting malicious patterns.\n- **Do** restrict the length of input that can be processed. Limiting input size is a straightforward way to mitigate many ReDoS vulnerabilities.\n- **Do** implement timeouts for regular expression evaluation to avoid excessive resource consumption. This can be achieved using JavaScript environments or libraries that allow setting execution time limits.\n- **Do** simplify complex regular expressions to reduce the risk of catastrophic backtracking. Breaking down expressions into simpler parts makes them safer and more manageable.\n- **Do not** directly concatenate user input into regular expressions. This practice can introduce unsafe patterns and lead to vulnerabilities.\n  ```javascript\n  var dynamicRegex = new RegExp('^' + userInput); // unsafe\n  ```\n\n## References\n\n- [OWASP Regular expression Denial of Service - ReDoS](https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_dynamic_regex","line_number":834,"full_filename":"routes/admin.js","filename":"routes/admin.js","category_groups":["PII","Personal Data"],"source":{"start":834,"end":834,"column":{"start":45,"end":75}},"sink":{"start":834,"end":834,"column":{"start":45,"end":75},"content":""},"parent_line_number":834,"fingerprint":"a5429febf4e9d9742a782c6afe8d2c72_5","old_fingerprint":"a5429febf4e9d9742a782c6afe8d2c72_5","code_extract":"            { productDescription: { $regex: new RegExp(searchValue, 'img') } }"},{"cwe_ids":["1287"],"id":"javascript_lang_regex_using_user_input","title":"Unsanitized user input in regular expression","description":"## Description\n\nCreating regular expressions from user input can lead to a vulnerability known as Regular Expression Denial of Service (ReDoS). This issue arises because some regular expressions can be processed with exponential time complexity. When attackers exploit this, it can significantly drain CPU resources, effectively causing a denial of service.\n\n## Remediations\n\n- **Do not** use user-supplied data directly in regular expressions. This can prevent attackers from exploiting the ReDoS vulnerability to cause a denial of service.\n  ```javascript\n  new RegExp(`abc${req.params.untrusted}`, 'i'); // unsafe\n  ```\n- **Do** sanitize or validate all user input if it must be used in a regular expression, to ensure it does not contain patterns that can lead to ReDoS attacks.\n- **Do** consider implementing timeouts or other limitations on regex operations to mitigate potential ReDoS attacks when user input is involved.\n\n## References\n\n- [OWASP ReDoS attacks explained](https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_regex_using_user_input","line_number":825,"full_filename":"routes/admin.js","filename":"routes/admin.js","category_groups":["PII","Personal Data"],"source":{"start":825,"end":825,"column":{"start":36,"end":66}},"sink":{"start":825,"end":825,"column":{"start":36,"end":66},"content":""},"parent_line_number":825,"fingerprint":"eeecdc24b29a1d3f3677e22bc01d6dda_0","old_fingerprint":"eeecdc24b29a1d3f3677e22bc01d6dda_0","code_extract":"            { firstName: { $regex: new RegExp(searchValue, 'img') } },"},{"cwe_ids":["1287"],"id":"javascript_lang_regex_using_user_input","title":"Unsanitized user input in regular expression","description":"## Description\n\nCreating regular expressions from user input can lead to a vulnerability known as Regular Expression Denial of Service (ReDoS). This issue arises because some regular expressions can be processed with exponential time complexity. When attackers exploit this, it can significantly drain CPU resources, effectively causing a denial of service.\n\n## Remediations\n\n- **Do not** use user-supplied data directly in regular expressions. This can prevent attackers from exploiting the ReDoS vulnerability to cause a denial of service.\n  ```javascript\n  new RegExp(`abc${req.params.untrusted}`, 'i'); // unsafe\n  ```\n- **Do** sanitize or validate all user input if it must be used in a regular expression, to ensure it does not contain patterns that can lead to ReDoS attacks.\n- **Do** consider implementing timeouts or other limitations on regex operations to mitigate potential ReDoS attacks when user input is involved.\n\n## References\n\n- [OWASP ReDoS attacks explained](https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_regex_using_user_input","line_number":826,"full_filename":"routes/admin.js","filename":"routes/admin.js","category_groups":["PII","Personal Data"],"source":{"start":826,"end":826,"column":{"start":35,"end":65}},"sink":{"start":826,"end":826,"column":{"start":35,"end":65},"content":""},"parent_line_number":826,"fingerprint":"eeecdc24b29a1d3f3677e22bc01d6dda_1","old_fingerprint":"eeecdc24b29a1d3f3677e22bc01d6dda_1","code_extract":"            { lastName: { $regex: new RegExp(searchValue, 'img') } }"},{"cwe_ids":["1287"],"id":"javascript_lang_regex_using_user_input","title":"Unsanitized user input in regular expression","description":"## Description\n\nCreating regular expressions from user input can lead to a vulnerability known as Regular Expression Denial of Service (ReDoS). This issue arises because some regular expressions can be processed with exponential time complexity. When attackers exploit this, it can significantly drain CPU resources, effectively causing a denial of service.\n\n## Remediations\n\n- **Do not** use user-supplied data directly in regular expressions. This can prevent attackers from exploiting the ReDoS vulnerability to cause a denial of service.\n  ```javascript\n  new RegExp(`abc${req.params.untrusted}`, 'i'); // unsafe\n  ```\n- **Do** sanitize or validate all user input if it must be used in a regular expression, to ensure it does not contain patterns that can lead to ReDoS attacks.\n- **Do** consider implementing timeouts or other limitations on regex operations to mitigate potential ReDoS attacks when user input is involved.\n\n## References\n\n- [OWASP ReDoS attacks explained](https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_regex_using_user_input","line_number":829,"full_filename":"routes/admin.js","filename":"routes/admin.js","category_groups":["PII","Personal Data"],"source":{"start":829,"end":829,"column":{"start":41,"end":71}},"sink":{"start":829,"end":829,"column":{"start":41,"end":71},"content":""},"parent_line_number":829,"fingerprint":"eeecdc24b29a1d3f3677e22bc01d6dda_2","old_fingerprint":"eeecdc24b29a1d3f3677e22bc01d6dda_2","code_extract":"            { orderFirstname: { $regex: new RegExp(searchValue, 'img') } },"},{"cwe_ids":["1287"],"id":"javascript_lang_regex_using_user_input","title":"Unsanitized user input in regular expression","description":"## Description\n\nCreating regular expressions from user input can lead to a vulnerability known as Regular Expression Denial of Service (ReDoS). This issue arises because some regular expressions can be processed with exponential time complexity. When attackers exploit this, it can significantly drain CPU resources, effectively causing a denial of service.\n\n## Remediations\n\n- **Do not** use user-supplied data directly in regular expressions. This can prevent attackers from exploiting the ReDoS vulnerability to cause a denial of service.\n  ```javascript\n  new RegExp(`abc${req.params.untrusted}`, 'i'); // unsafe\n  ```\n- **Do** sanitize or validate all user input if it must be used in a regular expression, to ensure it does not contain patterns that can lead to ReDoS attacks.\n- **Do** consider implementing timeouts or other limitations on regex operations to mitigate potential ReDoS attacks when user input is involved.\n\n## References\n\n- [OWASP ReDoS attacks explained](https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_regex_using_user_input","line_number":830,"full_filename":"routes/admin.js","filename":"routes/admin.js","category_groups":["PII","Personal Data"],"source":{"start":830,"end":830,"column":{"start":40,"end":70}},"sink":{"start":830,"end":830,"column":{"start":40,"end":70},"content":""},"parent_line_number":830,"fingerprint":"eeecdc24b29a1d3f3677e22bc01d6dda_3","old_fingerprint":"eeecdc24b29a1d3f3677e22bc01d6dda_3","code_extract":"            { orderLastname: { $regex: new RegExp(searchValue, 'img') } }"},{"cwe_ids":["1287"],"id":"javascript_lang_regex_using_user_input","title":"Unsanitized user input in regular expression","description":"## Description\n\nCreating regular expressions from user input can lead to a vulnerability known as Regular Expression Denial of Service (ReDoS). This issue arises because some regular expressions can be processed with exponential time complexity. When attackers exploit this, it can significantly drain CPU resources, effectively causing a denial of service.\n\n## Remediations\n\n- **Do not** use user-supplied data directly in regular expressions. This can prevent attackers from exploiting the ReDoS vulnerability to cause a denial of service.\n  ```javascript\n  new RegExp(`abc${req.params.untrusted}`, 'i'); // unsafe\n  ```\n- **Do** sanitize or validate all user input if it must be used in a regular expression, to ensure it does not contain patterns that can lead to ReDoS attacks.\n- **Do** consider implementing timeouts or other limitations on regex operations to mitigate potential ReDoS attacks when user input is involved.\n\n## References\n\n- [OWASP ReDoS attacks explained](https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_regex_using_user_input","line_number":833,"full_filename":"routes/admin.js","filename":"routes/admin.js","category_groups":["PII","Personal Data"],"source":{"start":833,"end":833,"column":{"start":39,"end":69}},"sink":{"start":833,"end":833,"column":{"start":39,"end":69},"content":""},"parent_line_number":833,"fingerprint":"eeecdc24b29a1d3f3677e22bc01d6dda_4","old_fingerprint":"eeecdc24b29a1d3f3677e22bc01d6dda_4","code_extract":"            { productTitle: { $regex: new RegExp(searchValue, 'img') } },"},{"cwe_ids":["1287"],"id":"javascript_lang_regex_using_user_input","title":"Unsanitized user input in regular expression","description":"## Description\n\nCreating regular expressions from user input can lead to a vulnerability known as Regular Expression Denial of Service (ReDoS). This issue arises because some regular expressions can be processed with exponential time complexity. When attackers exploit this, it can significantly drain CPU resources, effectively causing a denial of service.\n\n## Remediations\n\n- **Do not** use user-supplied data directly in regular expressions. This can prevent attackers from exploiting the ReDoS vulnerability to cause a denial of service.\n  ```javascript\n  new RegExp(`abc${req.params.untrusted}`, 'i'); // unsafe\n  ```\n- **Do** sanitize or validate all user input if it must be used in a regular expression, to ensure it does not contain patterns that can lead to ReDoS attacks.\n- **Do** consider implementing timeouts or other limitations on regex operations to mitigate potential ReDoS attacks when user input is involved.\n\n## References\n\n- [OWASP ReDoS attacks explained](https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_regex_using_user_input","line_number":834,"full_filename":"routes/admin.js","filename":"routes/admin.js","category_groups":["PII","Personal Data"],"source":{"start":834,"end":834,"column":{"start":45,"end":75}},"sink":{"start":834,"end":834,"column":{"start":45,"end":75},"content":""},"parent_line_number":834,"fingerprint":"eeecdc24b29a1d3f3677e22bc01d6dda_5","old_fingerprint":"eeecdc24b29a1d3f3677e22bc01d6dda_5","code_extract":"            { productDescription: { $regex: new RegExp(searchValue, 'img') } }"}]}
