{"critical":[{"cwe_ids":["78"],"id":"go_gosec_injection_subproc_injection","title":"Unsanitized dynamic input in OS command","description":"## Description\n\nUsing unsanitized dynamic or external input in an OS command is a critical security flaw that can enable attackers to execute unauthorized commands on the host operating system, potentially leading to a complete system takeover.\n\n## Remediations\n\n- **Do not** construct OS commands or command-line arguments using externally-supplied information. This practice can introduce command injection vulnerabilities.\n  ```go\n  cmd := exec.Command(\"bash\", \"-c\", \"echo \" + externalInput) // unsafe\n  ```\n- **Do** validate all external input against a strict set of rules to ensure it does not include harmful characters or patterns.\n  ```go\n  if !regexp.MustCompile(`^[a-zA-Z0-9]+$`).MatchString(externalInput) {\n    log.Fatal(\"Invalid input\")\n  }\n  ```\n- **Do** use hardcoded arguments when invoking OS commands to prevent external input from altering the command's execution.\n  ```go\n  cmd := exec.Command(\"ls\", \"-l\", \"/var/log\")\n  ```\n- **Do** prefer native libraries or programming language features over invoking shell commands for enhanced security and efficiency.\n\n## References\n\n- [OWASP OS Command Injection Defense Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/go_gosec_injection_subproc_injection","line_number":352,"full_filename":"server/web/grace/server.go","filename":"server/web/grace/server.go","category_groups":["PII","Personal Data"],"source":{"start":352,"end":352,"column":{"start":9,"end":36}},"sink":{"start":352,"end":352,"column":{"start":9,"end":36},"content":""},"parent_line_number":352,"fingerprint":"ca98c38032b09d78c88deb1a47c74eec_0","old_fingerprint":"ca98c38032b09d78c88deb1a47c74eec_0","code_extract":"\tcmd := exec.Command(path, args...)"},{"cwe_ids":["89"],"id":"go_gosec_sql_concat_sqli","title":"Unsanitized user input in SQL query","description":"## Description\n\nSQL Injection is a critical vulnerability that arises when SQL queries are dynamically constructed using unsanitized user input. This flaw allows attackers to alter the intended logic of SQL statements, potentially leading to unauthorized access to sensitive data or the execution of arbitrary code on the system.\n\n## Remediations\n\n- **Do** use parameterized queries to prevent SQL injection. This method ensures that user input is treated as data, not as part of the SQL command, effectively neutralizing the threat.\n  ```go\n  db.Query(\"SELECT * FROM users WHERE userName = ?\", userName)\n  ```\n- **Do not** use direct user input in dynamic queries. If you must create dynamic queries, use a predefined map or dictionary of valid values (a safelist). This approach allows you to safely include user input by translating it into safe, predefined commands or values.\n\n## References\n\n- [OWASP SQL Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/go_gosec_sql_concat_sqli","line_number":2105,"full_filename":"client/orm/db.go","filename":"client/orm/db.go","category_groups":["PII","Personal Data"],"source":{"start":2105,"end":2105,"column":{"start":15,"end":42}},"sink":{"start":2105,"end":2105,"column":{"start":15,"end":42},"content":""},"parent_line_number":2105,"fingerprint":"fb9d7dfdc6f87e2c14b1ac4e56f9e45c_0","old_fingerprint":"fb9d7dfdc6f87e2c14b1ac4e56f9e45c_7","code_extract":"\trows, err := db.QueryContext(ctx, query)"},{"cwe_ids":["89"],"id":"go_gosec_sql_concat_sqli","title":"Unsanitized user input in SQL query","description":"## Description\n\nSQL Injection is a critical vulnerability that arises when SQL queries are dynamically constructed using unsanitized user input. This flaw allows attackers to alter the intended logic of SQL statements, potentially leading to unauthorized access to sensitive data or the execution of arbitrary code on the system.\n\n## Remediations\n\n- **Do** use parameterized queries to prevent SQL injection. This method ensures that user input is treated as data, not as part of the SQL command, effectively neutralizing the threat.\n  ```go\n  db.Query(\"SELECT * FROM users WHERE userName = ?\", userName)\n  ```\n- **Do not** use direct user input in dynamic queries. If you must create dynamic queries, use a predefined map or dictionary of valid values (a safelist). This approach allows you to safely include user input by translating it into safe, predefined commands or values.\n\n## References\n\n- [OWASP SQL Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/go_gosec_sql_concat_sqli","line_number":161,"full_filename":"client/orm/db_alias.go","filename":"client/orm/db_alias.go","category_groups":["PII","Personal Data"],"source":{"start":161,"end":161,"column":{"start":9,"end":28}},"sink":{"start":161,"end":161,"column":{"start":9,"end":28},"content":""},"parent_line_number":161,"fingerprint":"45832a423aeb65cb3e15369fd37e5900_0","old_fingerprint":"45832a423aeb65cb3e15369fd37e5900_5","code_extract":"\treturn d.DB.Prepare(query)"},{"cwe_ids":["89"],"id":"go_gosec_sql_concat_sqli","title":"Unsanitized user input in SQL query","description":"## Description\n\nSQL Injection is a critical vulnerability that arises when SQL queries are dynamically constructed using unsanitized user input. This flaw allows attackers to alter the intended logic of SQL statements, potentially leading to unauthorized access to sensitive data or the execution of arbitrary code on the system.\n\n## Remediations\n\n- **Do** use parameterized queries to prevent SQL injection. This method ensures that user input is treated as data, not as part of the SQL command, effectively neutralizing the threat.\n  ```go\n  db.Query(\"SELECT * FROM users WHERE userName = ?\", userName)\n  ```\n- **Do not** use direct user input in dynamic queries. If you must create dynamic queries, use a predefined map or dictionary of valid values (a safelist). This approach allows you to safely include user input by translating it into safe, predefined commands or values.\n\n## References\n\n- [OWASP SQL Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/go_gosec_sql_concat_sqli","line_number":165,"full_filename":"client/orm/db_alias.go","filename":"client/orm/db_alias.go","category_groups":["PII","Personal Data"],"source":{"start":165,"end":165,"column":{"start":9,"end":40}},"sink":{"start":165,"end":165,"column":{"start":9,"end":40},"content":""},"parent_line_number":165,"fingerprint":"45832a423aeb65cb3e15369fd37e5900_1","old_fingerprint":"45832a423aeb65cb3e15369fd37e5900_6","code_extract":"\treturn d.DB.PrepareContext(ctx, query)"},{"cwe_ids":["89"],"id":"go_gosec_sql_concat_sqli","title":"Unsanitized user input in SQL query","description":"## Description\n\nSQL Injection is a critical vulnerability that arises when SQL queries are dynamically constructed using unsanitized user input. This flaw allows attackers to alter the intended logic of SQL statements, potentially leading to unauthorized access to sensitive data or the execution of arbitrary code on the system.\n\n## Remediations\n\n- **Do** use parameterized queries to prevent SQL injection. This method ensures that user input is treated as data, not as part of the SQL command, effectively neutralizing the threat.\n  ```go\n  db.Query(\"SELECT * FROM users WHERE userName = ?\", userName)\n  ```\n- **Do not** use direct user input in dynamic queries. If you must create dynamic queries, use a predefined map or dictionary of valid values (a safelist). This approach allows you to safely include user input by translating it into safe, predefined commands or values.\n\n## References\n\n- [OWASP SQL Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/go_gosec_sql_concat_sqli","line_number":157,"full_filename":"client/orm/db_postgres.go","filename":"client/orm/db_postgres.go","category_groups":["PII","Personal Data"],"source":{"start":157,"end":157,"column":{"start":16,"end":42}},"sink":{"start":157,"end":157,"column":{"start":16,"end":42},"content":""},"parent_line_number":157,"fingerprint":"54781185dc042f4bfe52a3338a05ac9c_0","old_fingerprint":"54781185dc042f4bfe52a3338a05ac9c_4","code_extract":"\t\tif _, err := db.ExecContext(ctx, query); err != nil {"},{"cwe_ids":["89"],"id":"go_gosec_sql_concat_sqli","title":"Unsanitized user input in SQL query","description":"## Description\n\nSQL Injection is a critical vulnerability that arises when SQL queries are dynamically constructed using unsanitized user input. This flaw allows attackers to alter the intended logic of SQL statements, potentially leading to unauthorized access to sensitive data or the execution of arbitrary code on the system.\n\n## Remediations\n\n- **Do** use parameterized queries to prevent SQL injection. This method ensures that user input is treated as data, not as part of the SQL command, effectively neutralizing the threat.\n  ```go\n  db.Query(\"SELECT * FROM users WHERE userName = ?\", userName)\n  ```\n- **Do not** use direct user input in dynamic queries. If you must create dynamic queries, use a predefined map or dictionary of valid values (a safelist). This approach allows you to safely include user input by translating it into safe, predefined commands or values.\n\n## References\n\n- [OWASP SQL Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/go_gosec_sql_concat_sqli","line_number":122,"full_filename":"client/orm/db_sqlite.go","filename":"client/orm/db_sqlite.go","category_groups":["PII","Personal Data"],"source":{"start":122,"end":122,"column":{"start":15,"end":42}},"sink":{"start":122,"end":122,"column":{"start":15,"end":42},"content":""},"parent_line_number":122,"fingerprint":"3ab25634e1d850d15b6e38a7c823545b_0","old_fingerprint":"3ab25634e1d850d15b6e38a7c823545b_1","code_extract":"\trows, err := db.QueryContext(ctx, query)"},{"cwe_ids":["89"],"id":"go_gosec_sql_concat_sqli","title":"Unsanitized user input in SQL query","description":"## Description\n\nSQL Injection is a critical vulnerability that arises when SQL queries are dynamically constructed using unsanitized user input. This flaw allows attackers to alter the intended logic of SQL statements, potentially leading to unauthorized access to sensitive data or the execution of arbitrary code on the system.\n\n## Remediations\n\n- **Do** use parameterized queries to prevent SQL injection. This method ensures that user input is treated as data, not as part of the SQL command, effectively neutralizing the threat.\n  ```go\n  db.Query(\"SELECT * FROM users WHERE userName = ?\", userName)\n  ```\n- **Do not** use direct user input in dynamic queries. If you must create dynamic queries, use a predefined map or dictionary of valid values (a safelist). This approach allows you to safely include user input by translating it into safe, predefined commands or values.\n\n## References\n\n- [OWASP SQL Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/go_gosec_sql_concat_sqli","line_number":148,"full_filename":"client/orm/db_sqlite.go","filename":"client/orm/db_sqlite.go","category_groups":["PII","Personal Data"],"source":{"start":148,"end":148,"column":{"start":15,"end":42}},"sink":{"start":148,"end":148,"column":{"start":15,"end":42},"content":""},"parent_line_number":148,"fingerprint":"3ab25634e1d850d15b6e38a7c823545b_1","old_fingerprint":"3ab25634e1d850d15b6e38a7c823545b_3","code_extract":"\trows, err := db.QueryContext(ctx, query)"},{"cwe_ids":["89"],"id":"go_gosec_sql_concat_sqli","title":"Unsanitized user input in SQL query","description":"## Description\n\nSQL Injection is a critical vulnerability that arises when SQL queries are dynamically constructed using unsanitized user input. This flaw allows attackers to alter the intended logic of SQL statements, potentially leading to unauthorized access to sensitive data or the execution of arbitrary code on the system.\n\n## Remediations\n\n- **Do** use parameterized queries to prevent SQL injection. This method ensures that user input is treated as data, not as part of the SQL command, effectively neutralizing the threat.\n  ```go\n  db.Query(\"SELECT * FROM users WHERE userName = ?\", userName)\n  ```\n- **Do not** use direct user input in dynamic queries. If you must create dynamic queries, use a predefined map or dictionary of valid values (a safelist). This approach allows you to safely include user input by translating it into safe, predefined commands or values.\n\n## References\n\n- [OWASP SQL Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/go_gosec_sql_concat_sqli","line_number":145,"full_filename":"client/orm/orm_log.go","filename":"client/orm/orm_log.go","category_groups":["PII","Personal Data"],"source":{"start":145,"end":145,"column":{"start":15,"end":46}},"sink":{"start":145,"end":145,"column":{"start":15,"end":46},"content":""},"parent_line_number":145,"fingerprint":"9170e9f75c92d49c7d652bfd7d8fc463_0","old_fingerprint":"9170e9f75c92d49c7d652bfd7d8fc463_2","code_extract":"\tstmt, err := d.db.PrepareContext(ctx, query)"},{"cwe_ids":["89"],"id":"go_gosec_sql_concat_sqli","title":"Unsanitized user input in SQL query","description":"## Description\n\nSQL Injection is a critical vulnerability that arises when SQL queries are dynamically constructed using unsanitized user input. This flaw allows attackers to alter the intended logic of SQL statements, potentially leading to unauthorized access to sensitive data or the execution of arbitrary code on the system.\n\n## Remediations\n\n- **Do** use parameterized queries to prevent SQL injection. This method ensures that user input is treated as data, not as part of the SQL command, effectively neutralizing the threat.\n  ```go\n  db.Query(\"SELECT * FROM users WHERE userName = ?\", userName)\n  ```\n- **Do not** use direct user input in dynamic queries. If you must create dynamic queries, use a predefined map or dictionary of valid values (a safelist). This approach allows you to safely include user input by translating it into safe, predefined commands or values.\n\n## References\n\n- [OWASP SQL Injection Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/go_gosec_sql_concat_sqli","line_number":55,"full_filename":"client/orm/orm_raw.go","filename":"client/orm/orm_raw.go","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":13,"end":37}},"sink":{"start":55,"end":55,"column":{"start":13,"end":37},"content":""},"parent_line_number":55,"fingerprint":"48e6316eddbd5fcbe2db1d015e785818_0","old_fingerprint":"48e6316eddbd5fcbe2db1d015e785818_0","code_extract":"\tst, err := rs.orm.db.Prepare(query)"},{"cwe_ids":["94"],"id":"go_gosec_subproc_subproc","title":"Unsanitized external input in code execution","description":"## Description\n\nUnsanitized external input in code execution can result in code injection. This vulnerability arises when external or user-provided data is directly used in the execution flow of a program without proper sanitization, potentially leading to unauthorized actions or access.\n\n## Remediations\n\n- **Do not** pass unsanitized external input directly to execution functions. This practice can introduce code injection vulnerabilities.\n- **Do** implement thorough input validation. Ensure all external input is checked against a strict set of rules to verify it does not contain harmful characters or patterns.\n\n## References\n\n- [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/go_gosec_subproc_subproc","line_number":104,"full_filename":"client/orm/filter/bean/default_value_filter.go","filename":"client/orm/filter/bean/default_value_filter.go","category_groups":["PII","Personal Data"],"source":{"start":104,"end":104,"column":{"start":14,"end":72}},"sink":{"start":104,"end":104,"column":{"start":14,"end":72},"content":""},"parent_line_number":104,"fingerprint":"eaf5e33f4976c2b9b473012e77c5598b_0","old_fingerprint":"eaf5e33f4976c2b9b473012e77c5598b_0","code_extract":"\t\tpkField := reflect.Indirect(reflect.ValueOf(ins)).FieldByName(pkName)"},{"cwe_ids":["94"],"id":"go_gosec_subproc_subproc","title":"Unsanitized external input in code execution","description":"## Description\n\nUnsanitized external input in code execution can result in code injection. This vulnerability arises when external or user-provided data is directly used in the execution flow of a program without proper sanitization, potentially leading to unauthorized actions or access.\n\n## Remediations\n\n- **Do not** pass unsanitized external input directly to execution functions. This practice can introduce code injection vulnerabilities.\n- **Do** implement thorough input validation. Ensure all external input is checked against a strict set of rules to verify it does not contain harmful characters or patterns.\n\n## References\n\n- [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/go_gosec_subproc_subproc","line_number":298,"full_filename":"server/web/router.go","filename":"server/web/router.go","category_groups":["PII","Personal Data"],"source":{"start":298,"end":298,"column":{"start":17,"end":53}},"sink":{"start":298,"end":298,"column":{"start":17,"end":53},"content":""},"parent_line_number":298,"fingerprint":"0c97685dbbb0054734c4f42804d34b3b_0","old_fingerprint":"0c97685dbbb0054734c4f42804d34b3b_1","code_extract":"\t\t\telemField := execElem.FieldByName(fieldType.Name)"},{"cwe_ids":["502"],"id":"go_lang_deserialization_of_user_input","title":"Unsanitized user input in deserialization method","description":"## Description\n\nDeserializing data from untrusted sources, like user inputs or request parameters, without proper verification is a security risk. Attackers can embed malicious code or payloads within serialized data. When your application deserializes this data without checks, it becomes vulnerable to attacks.\n\n## Remediations\n\n- **Do not** deserialize data from untrusted sources directly. This can lead to security vulnerabilities.\n- **Do** validate and sanitize all data before deserializing it. Ensure that the data is coming from a trusted source and is in the expected format.\n\n## References\n\n- [Gob Security Documentation](https://pkg.go.dev/encoding/gob#hdr-Security)\n- [OWASP Deserialization cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/go_lang_deserialization_of_user_input","line_number":327,"full_filename":"client/cache/file.go","filename":"client/cache/file.go","category_groups":["PII","Personal Data"],"source":{"start":327,"end":327,"column":{"start":9,"end":24}},"sink":{"start":327,"end":327,"column":{"start":9,"end":24},"content":""},"parent_line_number":327,"fingerprint":"52ddab9c229b4a41dabf5dc50c9fcffc_0","old_fingerprint":"52ddab9c229b4a41dabf5dc50c9fcffc_1","code_extract":"\terr := dec.Decode(\u0026to)"},{"cwe_ids":["502"],"id":"go_lang_deserialization_of_user_input","title":"Unsanitized user input in deserialization method","description":"## Description\n\nDeserializing data from untrusted sources, like user inputs or request parameters, without proper verification is a security risk. Attackers can embed malicious code or payloads within serialized data. When your application deserializes this data without checks, it becomes vulnerable to attacks.\n\n## Remediations\n\n- **Do not** deserialize data from untrusted sources directly. This can lead to security vulnerabilities.\n- **Do** validate and sanitize all data before deserializing it. Ensure that the data is coming from a trusted source and is in the expected format.\n\n## References\n\n- [Gob Security Documentation](https://pkg.go.dev/encoding/gob#hdr-Security)\n- [OWASP Deserialization cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/go_lang_deserialization_of_user_input","line_number":65,"full_filename":"server/web/session/sess_utils.go","filename":"server/web/session/sess_utils.go","category_groups":["PII","Personal Data"],"source":{"start":65,"end":65,"column":{"start":9,"end":25}},"sink":{"start":65,"end":65,"column":{"start":9,"end":25},"content":""},"parent_line_number":65,"fingerprint":"5e894847cd2342b7d86e1c9445a9ad20_0","old_fingerprint":"5e894847cd2342b7d86e1c9445a9ad20_0","code_extract":"\terr := dec.Decode(\u0026out)"}],"high":[{"cwe_ids":["327"],"id":"go_gosec_crypto_weak_crypto","title":"Usage of weak hashing library","description":"## Description\n\nYour code uses a weak hashing library, which means it relies on cryptographic algorithms that are no longer secure. This vulnerability can lead to compromised data confidentiality and integrity, as it makes the data susceptible to unauthorized decryption and tampering.\n\n## Remediations\n\n- **Do** replace weak or outdated algorithms with strong, modern alternatives. For encryption, use AES (Advanced Encryption Standard), and for hashing, opt for SHA-256 or higher.\n- **Do** always use the latest versions of cryptographic libraries. These versions are more likely to use secure algorithms and settings by default.\n- **Do not** use cryptographic algorithms that have been deprecated due to known vulnerabilities. Avoid MD5, SHA-1, or DES for any cryptographic operations.\n- **Do not** attempt to create custom cryptographic solutions. Instead use well-reviewed and tested standard cryptographic libraries to ensure security.\n\n## References\n\n- [NIST Cryptographic Standards and Guidelines](https://csrc.nist.gov/publications/sp)\n- [Cryptography Coding Standard](https://cryptocoding.net/index.php/Coding_rules)","documentation_url":"https://docs.bearer.com/reference/rules/go_gosec_crypto_weak_crypto","line_number":126,"full_filename":"client/cache/file.go","filename":"client/cache/file.go","category_groups":["PII","Personal Data"],"source":{"start":126,"end":126,"column":{"start":7,"end":16}},"sink":{"start":126,"end":126,"column":{"start":7,"end":16},"content":""},"parent_line_number":126,"fingerprint":"f607fdb971d17411fa7b6e301d18093a_0","old_fingerprint":"f607fdb971d17411fa7b6e301d18093a_1","code_extract":"\tm := md5.New()"},{"cwe_ids":["327"],"id":"go_gosec_crypto_weak_crypto","title":"Usage of weak hashing library","description":"## Description\n\nYour code uses a weak hashing library, which means it relies on cryptographic algorithms that are no longer secure. This vulnerability can lead to compromised data confidentiality and integrity, as it makes the data susceptible to unauthorized decryption and tampering.\n\n## Remediations\n\n- **Do** replace weak or outdated algorithms with strong, modern alternatives. For encryption, use AES (Advanced Encryption Standard), and for hashing, opt for SHA-256 or higher.\n- **Do** always use the latest versions of cryptographic libraries. These versions are more likely to use secure algorithms and settings by default.\n- **Do not** use cryptographic algorithms that have been deprecated due to known vulnerabilities. Avoid MD5, SHA-1, or DES for any cryptographic operations.\n- **Do not** attempt to create custom cryptographic solutions. Instead use well-reviewed and tested standard cryptographic libraries to ensure security.\n\n## References\n\n- [NIST Cryptographic Standards and Guidelines](https://csrc.nist.gov/publications/sp)\n- [Cryptography Coding Standard](https://cryptocoding.net/index.php/Coding_rules)","documentation_url":"https://docs.bearer.com/reference/rules/go_gosec_crypto_weak_crypto","line_number":26,"full_filename":"core/logs/alils/request.go","filename":"core/logs/alils/request.go","category_groups":["PII","Personal Data"],"source":{"start":26,"end":26,"column":{"start":32,"end":45}},"sink":{"start":26,"end":26,"column":{"start":32,"end":45},"content":""},"parent_line_number":26,"fingerprint":"d98113fc4523e9b90e76f4e3b5e80e82_0","old_fingerprint":"d98113fc4523e9b90e76f4e3b5e80e82_0","code_extract":"\t\tbodyMD5 := fmt.Sprintf(\"%X\", md5.Sum(body))"},{"cwe_ids":["327"],"id":"go_gosec_crypto_weak_random","title":"Usage of weak Pseudo-Random Number Generator (PRNG)","description":"## Description\n\nThe `math/rand` package in Go generates pseudorandom numbers that are not secure for cryptographic purposes. These numbers can be predicted if the seed is known, posing a risk to the security of applications that use them for generating secrets, tokens, or other security-sensitive elements.\n\n## Remediations\n\n- **Do** use `crypto/rand` instead of `math/rand` for generating random numbers in contexts where security is crucial. This ensures the randomness is cryptographically secure and unpredictable.\n- **Do not** use `math/rand` for generating random numbers in cryptographic applications, including but not limited to key generation, authentication tokens, or security challenges.\n- **Do not** initialize `math/rand` with predictable seeds, such as timestamps or other easily guessable values, if it is required to use `math/rand`.\n\n## References\n\n- [crypto/rand package documentation](https://pkg.go.dev/crypto/rand)","documentation_url":"https://docs.bearer.com/reference/rules/go_gosec_crypto_weak_random","line_number":68,"full_filename":"client/cache/random_expired_cache.go","filename":"client/cache/random_expired_cache.go","category_groups":["PII","Personal Data"],"source":{"start":68,"end":68,"column":{"start":8,"end":23}},"sink":{"start":68,"end":68,"column":{"start":8,"end":23},"content":""},"parent_line_number":68,"fingerprint":"abc2b0b5d6052729bf33b188417fa8d5_0","old_fingerprint":"abc2b0b5d6052729bf33b188417fa8d5_1","code_extract":"\t\tn := rand.Intn(size)"},{"cwe_ids":["327"],"id":"go_gosec_crypto_weak_random","title":"Usage of weak Pseudo-Random Number Generator (PRNG)","description":"## Description\n\nThe `math/rand` package in Go generates pseudorandom numbers that are not secure for cryptographic purposes. These numbers can be predicted if the seed is known, posing a risk to the security of applications that use them for generating secrets, tokens, or other security-sensitive elements.\n\n## Remediations\n\n- **Do** use `crypto/rand` instead of `math/rand` for generating random numbers in contexts where security is crucial. This ensures the randomness is cryptographically secure and unpredictable.\n- **Do not** use `math/rand` for generating random numbers in cryptographic applications, including but not limited to key generation, authentication tokens, or security challenges.\n- **Do not** initialize `math/rand` with predictable seeds, such as timestamps or other easily guessable values, if it is required to use `math/rand`.\n\n## References\n\n- [crypto/rand package documentation](https://pkg.go.dev/crypto/rand)","documentation_url":"https://docs.bearer.com/reference/rules/go_gosec_crypto_weak_random","line_number":38,"full_filename":"core/utils/rand.go","filename":"core/utils/rand.go","category_groups":["PII","Personal Data"],"source":{"start":38,"end":38,"column":{"start":25,"end":47}},"sink":{"start":38,"end":38,"column":{"start":25,"end":47},"content":""},"parent_line_number":38,"fingerprint":"cdd5d253138cd933ddcd5e1a4907a66a_0","old_fingerprint":"cdd5d253138cd933ddcd5e1a4907a66a_0","code_extract":"\t\t\tbytes[i] = alphabets[r.Intn(len(alphabets))]"},{"cwe_ids":["327"],"id":"go_gosec_crypto_weak_random","title":"Usage of weak Pseudo-Random Number Generator (PRNG)","description":"## Description\n\nThe `math/rand` package in Go generates pseudorandom numbers that are not secure for cryptographic purposes. These numbers can be predicted if the seed is known, posing a risk to the security of applications that use them for generating secrets, tokens, or other security-sensitive elements.\n\n## Remediations\n\n- **Do** use `crypto/rand` instead of `math/rand` for generating random numbers in contexts where security is crucial. This ensures the randomness is cryptographically secure and unpredictable.\n- **Do not** use `math/rand` for generating random numbers in cryptographic applications, including but not limited to key generation, authentication tokens, or security challenges.\n- **Do not** initialize `math/rand` with predictable seeds, such as timestamps or other easily guessable values, if it is required to use `math/rand`.\n\n## References\n\n- [crypto/rand package documentation](https://pkg.go.dev/crypto/rand)","documentation_url":"https://docs.bearer.com/reference/rules/go_gosec_crypto_weak_random","line_number":77,"full_filename":"core/utils/slice.go","filename":"core/utils/slice.go","category_groups":["PII","Personal Data"],"source":{"start":77,"end":77,"column":{"start":13,"end":30}},"sink":{"start":77,"end":77,"column":{"start":13,"end":30},"content":""},"parent_line_number":77,"fingerprint":"1de064d469ccf26396872772ce6d81f3_0","old_fingerprint":"1de064d469ccf26396872772ce6d81f3_2","code_extract":"\trandnum := rand.Intn(len(a))"},{"cwe_ids":["327"],"id":"go_gosec_crypto_weak_random","title":"Usage of weak Pseudo-Random Number Generator (PRNG)","description":"## Description\n\nThe `math/rand` package in Go generates pseudorandom numbers that are not secure for cryptographic purposes. These numbers can be predicted if the seed is known, posing a risk to the security of applications that use them for generating secrets, tokens, or other security-sensitive elements.\n\n## Remediations\n\n- **Do** use `crypto/rand` instead of `math/rand` for generating random numbers in contexts where security is crucial. This ensures the randomness is cryptographically secure and unpredictable.\n- **Do not** use `math/rand` for generating random numbers in cryptographic applications, including but not limited to key generation, authentication tokens, or security challenges.\n- **Do not** initialize `math/rand` with predictable seeds, such as timestamps or other easily guessable values, if it is required to use `math/rand`.\n\n## References\n\n- [crypto/rand package documentation](https://pkg.go.dev/crypto/rand)","documentation_url":"https://docs.bearer.com/reference/rules/go_gosec_crypto_weak_random","line_number":166,"full_filename":"core/utils/slice.go","filename":"core/utils/slice.go","category_groups":["PII","Personal Data"],"source":{"start":166,"end":166,"column":{"start":8,"end":29}},"sink":{"start":166,"end":166,"column":{"start":8,"end":29},"content":""},"parent_line_number":166,"fingerprint":"1de064d469ccf26396872772ce6d81f3_1","old_fingerprint":"1de064d469ccf26396872772ce6d81f3_3","code_extract":"\t\ta := rand.Intn(len(slice))"},{"cwe_ids":["327"],"id":"go_gosec_crypto_weak_random","title":"Usage of weak Pseudo-Random Number Generator (PRNG)","description":"## Description\n\nThe `math/rand` package in Go generates pseudorandom numbers that are not secure for cryptographic purposes. These numbers can be predicted if the seed is known, posing a risk to the security of applications that use them for generating secrets, tokens, or other security-sensitive elements.\n\n## Remediations\n\n- **Do** use `crypto/rand` instead of `math/rand` for generating random numbers in contexts where security is crucial. This ensures the randomness is cryptographically secure and unpredictable.\n- **Do not** use `math/rand` for generating random numbers in cryptographic applications, including but not limited to key generation, authentication tokens, or security challenges.\n- **Do not** initialize `math/rand` with predictable seeds, such as timestamps or other easily guessable values, if it is required to use `math/rand`.\n\n## References\n\n- [crypto/rand package documentation](https://pkg.go.dev/crypto/rand)","documentation_url":"https://docs.bearer.com/reference/rules/go_gosec_crypto_weak_random","line_number":167,"full_filename":"core/utils/slice.go","filename":"core/utils/slice.go","category_groups":["PII","Personal Data"],"source":{"start":167,"end":167,"column":{"start":8,"end":29}},"sink":{"start":167,"end":167,"column":{"start":8,"end":29},"content":""},"parent_line_number":167,"fingerprint":"1de064d469ccf26396872772ce6d81f3_2","old_fingerprint":"1de064d469ccf26396872772ce6d81f3_4","code_extract":"\t\tb := rand.Intn(len(slice))"},{"cwe_ids":["732"],"id":"go_gosec_file_permissions_file_perm","title":"Permissive file assignment","description":"## Description\n\nSetting overly permissive file permissions exposes your system to risks such as unauthorized access, data tampering, and potential system compromise. This vulnerability arises when files are created or updated without adequately restrictive permissions, allowing unauthorized users to read, modify, or execute files.\n\n## Remediations\n\n- **Do not** use overly permissive file permissions, such as `0777`, which grants read, write, and execute permissions to all users.\n- **Do** set file permissions to restrict access appropriately:\n  - `0400` for read-only access by the file's owner.\n  - `0200` for write-only access by the file's owner.\n  - `0600` for read and write access by the file's owner, suitable for files that the application needs to read from and write to.\n- **Do** use Go's `os` package to manage file permissions effectively. For example, use `os.OpenFile` with appropriate permission flags such as 0600.\n  ```go\n    f, err := os.OpenFile(\"file.txt\", os.O_CREATE|os.O_WRONLY, 0600)\n    ...\n  ```\n- **Do** verify file permissions after creation or update to ensure they are set as intended.\n- **Do** consider setting umask to a secure default, if your application creates multiple files, to ensure that files are created with safe default permissions.\n- **Do** regularly review and audit file permissions in your system to ensure they adhere to the principle of least privilege, minimizing the access level to what is strictly necessary for operational functionality.","documentation_url":"https://docs.bearer.com/reference/rules/go_gosec_file_permissions_file_perm","line_number":94,"full_filename":"server/web/session/sess_file.go","filename":"server/web/session/sess_file.go","category_groups":["PII","Personal Data"],"source":{"start":94,"end":94,"column":{"start":12,"end":117}},"sink":{"start":94,"end":94,"column":{"start":12,"end":117},"content":""},"parent_line_number":94,"fingerprint":"1bece27b7bc77c34ca4ec6668c36b410_0","old_fingerprint":"1bece27b7bc77c34ca4ec6668c36b410_0","code_extract":"\t\tf, err = os.OpenFile(path.Join(filepder.savePath, string(fs.sid[0]), string(fs.sid[1]), fs.sid), os.O_RDWR, 0o777)"},{"cwe_ids":["732"],"id":"go_gosec_file_permissions_file_perm","title":"Permissive file assignment","description":"## Description\n\nSetting overly permissive file permissions exposes your system to risks such as unauthorized access, data tampering, and potential system compromise. This vulnerability arises when files are created or updated without adequately restrictive permissions, allowing unauthorized users to read, modify, or execute files.\n\n## Remediations\n\n- **Do not** use overly permissive file permissions, such as `0777`, which grants read, write, and execute permissions to all users.\n- **Do** set file permissions to restrict access appropriately:\n  - `0400` for read-only access by the file's owner.\n  - `0200` for write-only access by the file's owner.\n  - `0600` for read and write access by the file's owner, suitable for files that the application needs to read from and write to.\n- **Do** use Go's `os` package to manage file permissions effectively. For example, use `os.OpenFile` with appropriate permission flags such as 0600.\n  ```go\n    f, err := os.OpenFile(\"file.txt\", os.O_CREATE|os.O_WRONLY, 0600)\n    ...\n  ```\n- **Do** verify file permissions after creation or update to ensure they are set as intended.\n- **Do** consider setting umask to a secure default, if your application creates multiple files, to ensure that files are created with safe default permissions.\n- **Do** regularly review and audit file permissions in your system to ensure they adhere to the principle of least privilege, minimizing the access level to what is strictly necessary for operational functionality.","documentation_url":"https://docs.bearer.com/reference/rules/go_gosec_file_permissions_file_perm","line_number":153,"full_filename":"server/web/session/sess_file.go","filename":"server/web/session/sess_file.go","category_groups":["PII","Personal Data"],"source":{"start":153,"end":153,"column":{"start":12,"end":50}},"sink":{"start":153,"end":153,"column":{"start":12,"end":50},"content":""},"parent_line_number":153,"fingerprint":"1bece27b7bc77c34ca4ec6668c36b410_1","old_fingerprint":"1bece27b7bc77c34ca4ec6668c36b410_1","code_extract":"\t\tf, err = os.OpenFile(sidPath, os.O_RDWR, 0o777)"},{"cwe_ids":["732"],"id":"go_gosec_file_permissions_file_perm","title":"Permissive file assignment","description":"## Description\n\nSetting overly permissive file permissions exposes your system to risks such as unauthorized access, data tampering, and potential system compromise. This vulnerability arises when files are created or updated without adequately restrictive permissions, allowing unauthorized users to read, modify, or execute files.\n\n## Remediations\n\n- **Do not** use overly permissive file permissions, such as `0777`, which grants read, write, and execute permissions to all users.\n- **Do** set file permissions to restrict access appropriately:\n  - `0400` for read-only access by the file's owner.\n  - `0200` for write-only access by the file's owner.\n  - `0600` for read and write access by the file's owner, suitable for files that the application needs to read from and write to.\n- **Do** use Go's `os` package to manage file permissions effectively. For example, use `os.OpenFile` with appropriate permission flags such as 0600.\n  ```go\n    f, err := os.OpenFile(\"file.txt\", os.O_CREATE|os.O_WRONLY, 0600)\n    ...\n  ```\n- **Do** verify file permissions after creation or update to ensure they are set as intended.\n- **Do** consider setting umask to a secure default, if your application creates multiple files, to ensure that files are created with safe default permissions.\n- **Do** regularly review and audit file permissions in your system to ensure they adhere to the principle of least privilege, minimizing the access level to what is strictly necessary for operational functionality.","documentation_url":"https://docs.bearer.com/reference/rules/go_gosec_file_permissions_file_perm","line_number":275,"full_filename":"server/web/session/sess_file.go","filename":"server/web/session/sess_file.go","category_groups":["PII","Personal Data"],"source":{"start":275,"end":275,"column":{"start":3,"end":37}},"sink":{"start":275,"end":275,"column":{"start":3,"end":37},"content":""},"parent_line_number":275,"fingerprint":"1bece27b7bc77c34ca4ec6668c36b410_2","old_fingerprint":"1bece27b7bc77c34ca4ec6668c36b410_2","code_extract":"\t\tos.WriteFile(newSidFile, b, 0o777)"},{"cwe_ids":["73"],"id":"go_gosec_filesystem_filereadtaint","title":"Unsanitized user input in file path","description":"## Description\n\nUsing user input to dynamically construct file paths without proper sanitization introduces a high security risk. This practice can allow attackers to manipulate file paths to access or alter sensitive files, potentially leading to data breaches or system compromise. It is essential to sanitize user input before using it in file system operations to prevent path traversal attacks.\n\n## Remediations\n\n- **Do not** use unsanitized user input directly in file path construction. This can lead to path traversal vulnerabilities.\n- **Do** hash or replace user input with a system-generated unique identifier when constructing file paths. This approach minimizes the risk of path manipulation.\n- **Do** use `filepath.Base` to extract the filename from a path, discarding any directory information. This helps prevent directory traversal attacks.\n  ```go\n  safeFilename := filepath.Base(userInput)\n  ```\n- **Do** validate paths before accessing files to ensure they are within the intended directory. This validation acts as a safeguard against unauthorized file access.\n\n## References\n\n- [OWASP Guide to Preventing Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal)","documentation_url":"https://docs.bearer.com/reference/rules/go_gosec_filesystem_filereadtaint","line_number":297,"full_filename":"client/cache/file.go","filename":"client/cache/file.go","category_groups":["PII","Personal Data"],"source":{"start":297,"end":297,"column":{"start":15,"end":36}},"sink":{"start":297,"end":297,"column":{"start":15,"end":36},"content":""},"parent_line_number":297,"fingerprint":"5312393adb11bd3e689c0cd13feb9da7_0","old_fingerprint":"5312393adb11bd3e689c0cd13feb9da7_10","code_extract":"\tdata, err := os.ReadFile(filename)"},{"cwe_ids":["73"],"id":"go_gosec_filesystem_filereadtaint","title":"Unsanitized user input in file path","description":"## Description\n\nUsing user input to dynamically construct file paths without proper sanitization introduces a high security risk. This practice can allow attackers to manipulate file paths to access or alter sensitive files, potentially leading to data breaches or system compromise. It is essential to sanitize user input before using it in file system operations to prevent path traversal attacks.\n\n## Remediations\n\n- **Do not** use unsanitized user input directly in file path construction. This can lead to path traversal vulnerabilities.\n- **Do** hash or replace user input with a system-generated unique identifier when constructing file paths. This approach minimizes the risk of path manipulation.\n- **Do** use `filepath.Base` to extract the filename from a path, discarding any directory information. This helps prevent directory traversal attacks.\n  ```go\n  safeFilename := filepath.Base(userInput)\n  ```\n- **Do** validate paths before accessing files to ensure they are within the intended directory. This validation acts as a safeguard against unauthorized file access.\n\n## References\n\n- [OWASP Guide to Preventing Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal)","documentation_url":"https://docs.bearer.com/reference/rules/go_gosec_filesystem_filereadtaint","line_number":415,"full_filename":"client/httplib/httplib.go","filename":"client/httplib/httplib.go","category_groups":["PII","Personal Data"],"source":{"start":415,"end":415,"column":{"start":13,"end":30}},"sink":{"start":415,"end":415,"column":{"start":13,"end":30},"content":""},"parent_line_number":415,"fingerprint":"6c8a3f87536583052206ecc1b68a3ed9_0","old_fingerprint":"6c8a3f87536583052206ecc1b68a3ed9_11","code_extract":"\tfh, err := os.Open(filename)"},{"cwe_ids":["73"],"id":"go_gosec_filesystem_filereadtaint","title":"Unsanitized user input in file path","description":"## Description\n\nUsing user input to dynamically construct file paths without proper sanitization introduces a high security risk. This practice can allow attackers to manipulate file paths to access or alter sensitive files, potentially leading to data breaches or system compromise. It is essential to sanitize user input before using it in file system operations to prevent path traversal attacks.\n\n## Remediations\n\n- **Do not** use unsanitized user input directly in file path construction. This can lead to path traversal vulnerabilities.\n- **Do** hash or replace user input with a system-generated unique identifier when constructing file paths. This approach minimizes the risk of path manipulation.\n- **Do** use `filepath.Base` to extract the filename from a path, discarding any directory information. This helps prevent directory traversal attacks.\n  ```go\n  safeFilename := filepath.Base(userInput)\n  ```\n- **Do** validate paths before accessing files to ensure they are within the intended directory. This validation acts as a safeguard against unauthorized file access.\n\n## References\n\n- [OWASP Guide to Preventing Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal)","documentation_url":"https://docs.bearer.com/reference/rules/go_gosec_filesystem_filereadtaint","line_number":55,"full_filename":"core/config/ini.go","filename":"core/config/ini.go","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":15,"end":32}},"sink":{"start":55,"end":55,"column":{"start":15,"end":32},"content":""},"parent_line_number":55,"fingerprint":"495379d4ce9b090ad52799faef583bde_0","old_fingerprint":"495379d4ce9b090ad52799faef583bde_3","code_extract":"\tdata, err := os.ReadFile(name)"},{"cwe_ids":["73"],"id":"go_gosec_filesystem_filereadtaint","title":"Unsanitized user input in file path","description":"## Description\n\nUsing user input to dynamically construct file paths without proper sanitization introduces a high security risk. This practice can allow attackers to manipulate file paths to access or alter sensitive files, potentially leading to data breaches or system compromise. It is essential to sanitize user input before using it in file system operations to prevent path traversal attacks.\n\n## Remediations\n\n- **Do not** use unsanitized user input directly in file path construction. This can lead to path traversal vulnerabilities.\n- **Do** hash or replace user input with a system-generated unique identifier when constructing file paths. This approach minimizes the risk of path manipulation.\n- **Do** use `filepath.Base` to extract the filename from a path, discarding any directory information. This helps prevent directory traversal attacks.\n  ```go\n  safeFilename := filepath.Base(userInput)\n  ```\n- **Do** validate paths before accessing files to ensure they are within the intended directory. This validation acts as a safeguard against unauthorized file access.\n\n## References\n\n- [OWASP Guide to Preventing Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal)","documentation_url":"https://docs.bearer.com/reference/rules/go_gosec_filesystem_filereadtaint","line_number":38,"full_filename":"core/config/json/json.go","filename":"core/config/json/json.go","category_groups":["PII","Personal Data"],"source":{"start":38,"end":38,"column":{"start":15,"end":32}},"sink":{"start":38,"end":38,"column":{"start":15,"end":32},"content":""},"parent_line_number":38,"fingerprint":"7afcda8aa7344ff0a773e10faa92dc4e_0","old_fingerprint":"7afcda8aa7344ff0a773e10faa92dc4e_2","code_extract":"\tfile, err := os.Open(filename)"},{"cwe_ids":["73"],"id":"go_gosec_filesystem_filereadtaint","title":"Unsanitized user input in file path","description":"## Description\n\nUsing user input to dynamically construct file paths without proper sanitization introduces a high security risk. This practice can allow attackers to manipulate file paths to access or alter sensitive files, potentially leading to data breaches or system compromise. It is essential to sanitize user input before using it in file system operations to prevent path traversal attacks.\n\n## Remediations\n\n- **Do not** use unsanitized user input directly in file path construction. This can lead to path traversal vulnerabilities.\n- **Do** hash or replace user input with a system-generated unique identifier when constructing file paths. This approach minimizes the risk of path manipulation.\n- **Do** use `filepath.Base` to extract the filename from a path, discarding any directory information. This helps prevent directory traversal attacks.\n  ```go\n  safeFilename := filepath.Base(userInput)\n  ```\n- **Do** validate paths before accessing files to ensure they are within the intended directory. This validation acts as a safeguard against unauthorized file access.\n\n## References\n\n- [OWASP Guide to Preventing Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal)","documentation_url":"https://docs.bearer.com/reference/rules/go_gosec_filesystem_filereadtaint","line_number":34,"full_filename":"core/config/toml/toml.go","filename":"core/config/toml/toml.go","category_groups":["PII","Personal Data"],"source":{"start":34,"end":34,"column":{"start":14,"end":35}},"sink":{"start":34,"end":34,"column":{"start":14,"end":35},"content":""},"parent_line_number":34,"fingerprint":"b9875d1523616659737d88c33cda83e8_0","old_fingerprint":"b9875d1523616659737d88c33cda83e8_1","code_extract":"\tctx, err := os.ReadFile(filename)"},{"cwe_ids":["73"],"id":"go_gosec_filesystem_filereadtaint","title":"Unsanitized user input in file path","description":"## Description\n\nUsing user input to dynamically construct file paths without proper sanitization introduces a high security risk. This practice can allow attackers to manipulate file paths to access or alter sensitive files, potentially leading to data breaches or system compromise. It is essential to sanitize user input before using it in file system operations to prevent path traversal attacks.\n\n## Remediations\n\n- **Do not** use unsanitized user input directly in file path construction. This can lead to path traversal vulnerabilities.\n- **Do** hash or replace user input with a system-generated unique identifier when constructing file paths. This approach minimizes the risk of path manipulation.\n- **Do** use `filepath.Base` to extract the filename from a path, discarding any directory information. This helps prevent directory traversal attacks.\n  ```go\n  safeFilename := filepath.Base(userInput)\n  ```\n- **Do** validate paths before accessing files to ensure they are within the intended directory. This validation acts as a safeguard against unauthorized file access.\n\n## References\n\n- [OWASP Guide to Preventing Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal)","documentation_url":"https://docs.bearer.com/reference/rules/go_gosec_filesystem_filereadtaint","line_number":55,"full_filename":"core/config/xml/xml.go","filename":"core/config/xml/xml.go","category_groups":["PII","Personal Data"],"source":{"start":55,"end":55,"column":{"start":18,"end":39}},"sink":{"start":55,"end":55,"column":{"start":18,"end":39},"content":""},"parent_line_number":55,"fingerprint":"8004d89daa48452041b82f39955894b8_0","old_fingerprint":"8004d89daa48452041b82f39955894b8_4","code_extract":"\tcontext, err := os.ReadFile(filename)"},{"cwe_ids":["73"],"id":"go_gosec_filesystem_filereadtaint","title":"Unsanitized user input in file path","description":"## Description\n\nUsing user input to dynamically construct file paths without proper sanitization introduces a high security risk. This practice can allow attackers to manipulate file paths to access or alter sensitive files, potentially leading to data breaches or system compromise. It is essential to sanitize user input before using it in file system operations to prevent path traversal attacks.\n\n## Remediations\n\n- **Do not** use unsanitized user input directly in file path construction. This can lead to path traversal vulnerabilities.\n- **Do** hash or replace user input with a system-generated unique identifier when constructing file paths. This approach minimizes the risk of path manipulation.\n- **Do** use `filepath.Base` to extract the filename from a path, discarding any directory information. This helps prevent directory traversal attacks.\n  ```go\n  safeFilename := filepath.Base(userInput)\n  ```\n- **Do** validate paths before accessing files to ensure they are within the intended directory. This validation acts as a safeguard against unauthorized file access.\n\n## References\n\n- [OWASP Guide to Preventing Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal)","documentation_url":"https://docs.bearer.com/reference/rules/go_gosec_filesystem_filereadtaint","line_number":68,"full_filename":"core/config/yaml/yaml.go","filename":"core/config/yaml/yaml.go","category_groups":["PII","Personal Data"],"source":{"start":68,"end":68,"column":{"start":14,"end":31}},"sink":{"start":68,"end":68,"column":{"start":14,"end":31},"content":""},"parent_line_number":68,"fingerprint":"9237147a8c7c714fa6bdaf043b23c34e_0","old_fingerprint":"9237147a8c7c714fa6bdaf043b23c34e_5","code_extract":"\tbuf, err := os.ReadFile(path)"},{"cwe_ids":["73"],"id":"go_gosec_filesystem_filereadtaint","title":"Unsanitized user input in file path","description":"## Description\n\nUsing user input to dynamically construct file paths without proper sanitization introduces a high security risk. This practice can allow attackers to manipulate file paths to access or alter sensitive files, potentially leading to data breaches or system compromise. It is essential to sanitize user input before using it in file system operations to prevent path traversal attacks.\n\n## Remediations\n\n- **Do not** use unsanitized user input directly in file path construction. This can lead to path traversal vulnerabilities.\n- **Do** hash or replace user input with a system-generated unique identifier when constructing file paths. This approach minimizes the risk of path manipulation.\n- **Do** use `filepath.Base` to extract the filename from a path, discarding any directory information. This helps prevent directory traversal attacks.\n  ```go\n  safeFilename := filepath.Base(userInput)\n  ```\n- **Do** validate paths before accessing files to ensure they are within the intended directory. This validation acts as a safeguard against unauthorized file access.\n\n## References\n\n- [OWASP Guide to Preventing Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal)","documentation_url":"https://docs.bearer.com/reference/rules/go_gosec_filesystem_filereadtaint","line_number":68,"full_filename":"core/utils/file.go","filename":"core/utils/file.go","category_groups":["PII","Personal Data"],"source":{"start":68,"end":68,"column":{"start":13,"end":30}},"sink":{"start":68,"end":68,"column":{"start":13,"end":30},"content":""},"parent_line_number":68,"fingerprint":"ba152d4d71a30be421b7ef0986beb42c_0","old_fingerprint":"ba152d4d71a30be421b7ef0986beb42c_6","code_extract":"\tfd, err := os.Open(filename)"},{"cwe_ids":["73"],"id":"go_gosec_filesystem_filereadtaint","title":"Unsanitized user input in file path","description":"## Description\n\nUsing user input to dynamically construct file paths without proper sanitization introduces a high security risk. This practice can allow attackers to manipulate file paths to access or alter sensitive files, potentially leading to data breaches or system compromise. It is essential to sanitize user input before using it in file system operations to prevent path traversal attacks.\n\n## Remediations\n\n- **Do not** use unsanitized user input directly in file path construction. This can lead to path traversal vulnerabilities.\n- **Do** hash or replace user input with a system-generated unique identifier when constructing file paths. This approach minimizes the risk of path manipulation.\n- **Do** use `filepath.Base` to extract the filename from a path, discarding any directory information. This helps prevent directory traversal attacks.\n  ```go\n  safeFilename := filepath.Base(userInput)\n  ```\n- **Do** validate paths before accessing files to ensure they are within the intended directory. This validation acts as a safeguard against unauthorized file access.\n\n## References\n\n- [OWASP Guide to Preventing Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal)","documentation_url":"https://docs.bearer.com/reference/rules/go_gosec_filesystem_filereadtaint","line_number":691,"full_filename":"server/web/controller.go","filename":"server/web/controller.go","category_groups":["PII","Personal Data"],"source":{"start":691,"end":691,"column":{"start":14,"end":79}},"sink":{"start":691,"end":691,"column":{"start":14,"end":79},"content":""},"parent_line_number":691,"fingerprint":"f684081d82efad8f0eaaf83015579f49_0","old_fingerprint":"f684081d82efad8f0eaaf83015579f49_12","code_extract":"\tdst, err := os.OpenFile(toFile, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, filePerm)"},{"cwe_ids":["73"],"id":"go_gosec_filesystem_filereadtaint","title":"Unsanitized user input in file path","description":"## Description\n\nUsing user input to dynamically construct file paths without proper sanitization introduces a high security risk. This practice can allow attackers to manipulate file paths to access or alter sensitive files, potentially leading to data breaches or system compromise. It is essential to sanitize user input before using it in file system operations to prevent path traversal attacks.\n\n## Remediations\n\n- **Do not** use unsanitized user input directly in file path construction. This can lead to path traversal vulnerabilities.\n- **Do** hash or replace user input with a system-generated unique identifier when constructing file paths. This approach minimizes the risk of path manipulation.\n- **Do** use `filepath.Base` to extract the filename from a path, discarding any directory information. This helps prevent directory traversal attacks.\n  ```go\n  safeFilename := filepath.Base(userInput)\n  ```\n- **Do** validate paths before accessing files to ensure they are within the intended directory. This validation acts as a safeguard against unauthorized file access.\n\n## References\n\n- [OWASP Guide to Preventing Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal)","documentation_url":"https://docs.bearer.com/reference/rules/go_gosec_filesystem_filereadtaint","line_number":12,"full_filename":"server/web/fs.go","filename":"server/web/fs.go","category_groups":["PII","Personal Data"],"source":{"start":12,"end":12,"column":{"start":9,"end":22}},"sink":{"start":12,"end":12,"column":{"start":9,"end":22},"content":""},"parent_line_number":12,"fingerprint":"afd55c875b12280ca7954a9a06e57766_0","old_fingerprint":"afd55c875b12280ca7954a9a06e57766_0","code_extract":"\treturn os.Open(name)"},{"cwe_ids":["73"],"id":"go_gosec_filesystem_filereadtaint","title":"Unsanitized user input in file path","description":"## Description\n\nUsing user input to dynamically construct file paths without proper sanitization introduces a high security risk. This practice can allow attackers to manipulate file paths to access or alter sensitive files, potentially leading to data breaches or system compromise. It is essential to sanitize user input before using it in file system operations to prevent path traversal attacks.\n\n## Remediations\n\n- **Do not** use unsanitized user input directly in file path construction. This can lead to path traversal vulnerabilities.\n- **Do** hash or replace user input with a system-generated unique identifier when constructing file paths. This approach minimizes the risk of path manipulation.\n- **Do** use `filepath.Base` to extract the filename from a path, discarding any directory information. This helps prevent directory traversal attacks.\n  ```go\n  safeFilename := filepath.Base(userInput)\n  ```\n- **Do** validate paths before accessing files to ensure they are within the intended directory. This validation acts as a safeguard against unauthorized file access.\n\n## References\n\n- [OWASP Guide to Preventing Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal)","documentation_url":"https://docs.bearer.com/reference/rules/go_gosec_filesystem_filereadtaint","line_number":196,"full_filename":"server/web/grace/server.go","filename":"server/web/grace/server.go","category_groups":["PII","Personal Data"],"source":{"start":196,"end":196,"column":{"start":15,"end":37}},"sink":{"start":196,"end":196,"column":{"start":15,"end":37},"content":""},"parent_line_number":196,"fingerprint":"24a4e5ff5f493c7c52de0428f6d3c7a9_0","old_fingerprint":"24a4e5ff5f493c7c52de0428f6d3c7a9_9","code_extract":"\tdata, err := os.ReadFile(trustFile)"},{"cwe_ids":["73"],"id":"go_gosec_filesystem_filereadtaint","title":"Unsanitized user input in file path","description":"## Description\n\nUsing user input to dynamically construct file paths without proper sanitization introduces a high security risk. This practice can allow attackers to manipulate file paths to access or alter sensitive files, potentially leading to data breaches or system compromise. It is essential to sanitize user input before using it in file system operations to prevent path traversal attacks.\n\n## Remediations\n\n- **Do not** use unsanitized user input directly in file path construction. This can lead to path traversal vulnerabilities.\n- **Do** hash or replace user input with a system-generated unique identifier when constructing file paths. This approach minimizes the risk of path manipulation.\n- **Do** use `filepath.Base` to extract the filename from a path, discarding any directory information. This helps prevent directory traversal attacks.\n  ```go\n  safeFilename := filepath.Base(userInput)\n  ```\n- **Do** validate paths before accessing files to ensure they are within the intended directory. This validation acts as a safeguard against unauthorized file access.\n\n## References\n\n- [OWASP Guide to Preventing Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal)","documentation_url":"https://docs.bearer.com/reference/rules/go_gosec_filesystem_filereadtaint","line_number":153,"full_filename":"server/web/session/sess_file.go","filename":"server/web/session/sess_file.go","category_groups":["PII","Personal Data"],"source":{"start":153,"end":153,"column":{"start":12,"end":50}},"sink":{"start":153,"end":153,"column":{"start":12,"end":50},"content":""},"parent_line_number":153,"fingerprint":"9b1d1709b9141ed4f518783f5b19a235_0","old_fingerprint":"9b1d1709b9141ed4f518783f5b19a235_8","code_extract":"\t\tf, err = os.OpenFile(sidPath, os.O_RDWR, 0o777)"},{"cwe_ids":["73"],"id":"go_gosec_filesystem_filereadtaint","title":"Unsanitized user input in file path","description":"## Description\n\nUsing user input to dynamically construct file paths without proper sanitization introduces a high security risk. This practice can allow attackers to manipulate file paths to access or alter sensitive files, potentially leading to data breaches or system compromise. It is essential to sanitize user input before using it in file system operations to prevent path traversal attacks.\n\n## Remediations\n\n- **Do not** use unsanitized user input directly in file path construction. This can lead to path traversal vulnerabilities.\n- **Do** hash or replace user input with a system-generated unique identifier when constructing file paths. This approach minimizes the risk of path manipulation.\n- **Do** use `filepath.Base` to extract the filename from a path, discarding any directory information. This helps prevent directory traversal attacks.\n  ```go\n  safeFilename := filepath.Base(userInput)\n  ```\n- **Do** validate paths before accessing files to ensure they are within the intended directory. This validation acts as a safeguard against unauthorized file access.\n\n## References\n\n- [OWASP Guide to Preventing Path Traversal](https://owasp.org/www-community/attacks/Path_Traversal)","documentation_url":"https://docs.bearer.com/reference/rules/go_gosec_filesystem_filereadtaint","line_number":144,"full_filename":"server/web/staticfile.go","filename":"server/web/staticfile.go","category_groups":["PII","Personal Data"],"source":{"start":144,"end":144,"column":{"start":16,"end":33}},"sink":{"start":144,"end":144,"column":{"start":16,"end":33},"content":""},"parent_line_number":144,"fingerprint":"c6a987a8102434c5b23eebdb401393b7_0","old_fingerprint":"c6a987a8102434c5b23eebdb401393b7_7","code_extract":"\t\tfile, err := os.Open(filePath)"},{"cwe_ids":["400"],"id":"go_gosec_http_http_slowloris","title":"Missing protection against 'Slowloris' attack","description":"## Description\n\nYour server configuration is missing the `ReadHeaderTimeout` setting, making it vulnerable to a type of Distributed Denial of Service (DDoS) attack known as a Slowloris attack. In such an attack, a hacker initiates many connections to your server, sending incomplete requests. Your server then keeps each connection open, waiting for the headers to be completed. This can lead to resource exhaustion, where your server cannot handle additional (legitimate) requests.\n\n## Remediations\n\n- **Do not** use default serve functions like `http.ListenAndServe` and `http.Serve` in production environments. You cannot set timeouts for these functions, making the server vulnerable to attacks.\n  ```go\n  http.ListenAndServe(\":8080\", nil) // unsafe\n  ```\n- **Do** create a custom `http.Server` object with configured timeouts to safeguard against resource exhaustion. For Slowloris attacks in particular, set `ReadHeaderTimeout` to an appropriate value to ensure that connections do not remain open indefinitely.\n  ```go\n  myServer := \u0026http.Server{\n      Addr:             \"localhost:8000\",\n      ReadHeaderTimeout: 15 * time.Second,\n      ReadTimeout:      15 * time.Second,\n      WriteTimeout:     10 * time.Second,\n      IdleTimeout:      30 * time.Second,\n  }\n  ```\n\n## References\n\n- [Configuring Timeouts in http.Server](https://pkg.go.dev/net/http#Server)\n- [How to Set Request-Based Timeouts](https://pkg.go.dev/net/http#TimeoutHandler)\n- [Understanding Slowloris Attacks](https://en.wikipedia.org/wiki/Slowloris_(computer_security))","documentation_url":"https://docs.bearer.com/reference/rules/go_gosec_http_http_slowloris","line_number":69,"full_filename":"server/web/server.go","filename":"server/web/server.go","category_groups":["PII","Personal Data"],"source":{"start":69,"end":69,"column":{"start":13,"end":27}},"sink":{"start":69,"end":69,"column":{"start":13,"end":27},"content":""},"parent_line_number":69,"fingerprint":"1123aea40ddf3832da542deeda7aa326_0","old_fingerprint":"1123aea40ddf3832da542deeda7aa326_0","code_extract":"\t\tServer:   \u0026http.Server{},"},{"cwe_ids":["918"],"id":"go_gosec_injection_ssrf_injection","title":"Unsanitized user input in HTTP request (SSRF)","description":"## Description\n\nIncluding unsanitized user input in HTTP requests puts your application at risk of Server-Side Request Forgery (SSRF). This is a security vulnerability that occurs when a server-side application makes HTTP requests to arbitrary URLs controlled by the user. SSRF can be exploited by attackers to target internal systems behind firewalls that are otherwise inaccessible from the external network, by tricking the server into making requests to these systems.\n\n## Remediations\n\n- **Do not** use direct user input to construct URLs for backend requests. If user input is necessary, ensure it is strictly validated or sanitized to prevent malicious manipulation.\n- **Do** use a safelist or predefined mapping when incorporating user input in URLs. This ensures that your application only redirects users to safe and intended destinations.\n  ```go\n  safeURLs := map[string]string{\n      \"key1\": \"https://safe-domain1.com\",\n      \"key2\": \"https://safe-domain2.com\",\n  }\n  requestedKey := getUserInput()\n  if url, ok := safeURLs[requestedKey]; ok {\n      // continue with request\n  } else {\n      log.Fatal(\"Requested URL is not allowed\")\n  }\n  ```\n- **Do** implement IP safelists and blocklists to customize and block specific IP ranges, especially those that are private, loopback, or otherwise non-routable.\n- **Do** use network-level security measures. If your HTTP client does not support IP range blocking, run it with restricted system permissions or within a network environment where firewall rules can effectively block requests to dangerous addresses.\n- **Do** consider using a secure HTTP proxy to route all backend HTTP requests. This proxy can serve as a filter to block requests to potentially harmful addresses, acting as an additional layer of security.\n\n## References\n\n- [OWASP SSRF Prevention Cheat Sheet](https://owasp.org/www-community/attacks/Server_Side_Request_Forgery)","documentation_url":"https://docs.bearer.com/reference/rules/go_gosec_injection_ssrf_injection","line_number":47,"full_filename":"core/logs/alils/request.go","filename":"core/logs/alils/request.go","category_groups":["PII","Personal Data"],"source":{"start":47,"end":47,"column":{"start":14,"end":53}},"sink":{"start":47,"end":47,"column":{"start":14,"end":53},"content":""},"parent_line_number":47,"fingerprint":"cfe95309d1f3453affb9ee850512cd0c_0","old_fingerprint":"cfe95309d1f3453affb9ee850512cd0c_0","code_extract":"\treq, err := http.NewRequest(method, urlStr, reader)"},{"cwe_ids":["79"],"id":"go_gosec_injection_template_injection","title":"Unsanitized user input in web page generation (XSS)","description":"## Description\n\nCross-Site Scripting (XSS) is a vulnerability that allows attackers to run malicious scripts in the context of a trusted web application. This can happen when an application includes untrusted data without proper validation or escaping. There are several contexts where XSS can occur, each requiring specific encoding strategies to mitigate the risk.\n\n## Remediations\n\n- **Do** encode user input based on the context it is used in, such as HTML content, HTML attributes, JavaScript, and CSS contexts. This helps prevent malicious scripts from being executed.\n  ```go\n  html.EscapeString(userInput)\n  ```\n- **Do** use templating engines like `html/template` that automatically encode data based on its context.\n- **Do** sanitize data using libraries or functions specifically designed for this purpose, especially when inserting content into a web page.\n- **Do** separate data from code by avoiding inline scripting and event handlers. Use separate JavaScript files for event handling to minimize script injection risks.\n- **Do not** mix server-side and client-side templating systems, as server-side systems may not escape output safely for client-side use.\n- **Do not** encode user input before storing it in a database. Any encoding should be applied when the data is output, not before storage, to ensure that it is encoded appropriately for its context.\n\n## References\n\n- [OWASP XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [Go html/template Documentation](https://pkg.go.dev/html/template)","documentation_url":"https://docs.bearer.com/reference/rules/go_gosec_injection_template_injection","line_number":382,"full_filename":"server/web/error.go","filename":"server/web/error.go","category_groups":["PII","Personal Data"],"source":{"start":382,"end":382,"column":{"start":19,"end":44}},"sink":{"start":382,"end":382,"column":{"start":19,"end":44},"content":""},"parent_line_number":382,"fingerprint":"0a329fb7b92660ea7c97f92f5ed2c5fc_0","old_fingerprint":"0a329fb7b92660ea7c97f92f5ed2c5fc_3","code_extract":"\t\t\"Content\":      template.HTML(errContent),"},{"cwe_ids":["79"],"id":"go_gosec_injection_template_injection","title":"Unsanitized user input in web page generation (XSS)","description":"## Description\n\nCross-Site Scripting (XSS) is a vulnerability that allows attackers to run malicious scripts in the context of a trusted web application. This can happen when an application includes untrusted data without proper validation or escaping. There are several contexts where XSS can occur, each requiring specific encoding strategies to mitigate the risk.\n\n## Remediations\n\n- **Do** encode user input based on the context it is used in, such as HTML content, HTML attributes, JavaScript, and CSS contexts. This helps prevent malicious scripts from being executed.\n  ```go\n  html.EscapeString(userInput)\n  ```\n- **Do** use templating engines like `html/template` that automatically encode data based on its context.\n- **Do** sanitize data using libraries or functions specifically designed for this purpose, especially when inserting content into a web page.\n- **Do** separate data from code by avoiding inline scripting and event handlers. Use separate JavaScript files for event handling to minimize script injection risks.\n- **Do not** mix server-side and client-side templating systems, as server-side systems may not escape output safely for client-side use.\n- **Do not** encode user input before storing it in a database. Any encoding should be applied when the data is output, not before storage, to ensure that it is encoded appropriately for its context.\n\n## References\n\n- [OWASP XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [Go html/template Documentation](https://pkg.go.dev/html/template)","documentation_url":"https://docs.bearer.com/reference/rules/go_gosec_injection_template_injection","line_number":193,"full_filename":"server/web/templatefunc.go","filename":"server/web/templatefunc.go","category_groups":["PII","Personal Data"],"source":{"start":193,"end":193,"column":{"start":9,"end":27}},"sink":{"start":193,"end":193,"column":{"start":9,"end":27},"content":""},"parent_line_number":193,"fingerprint":"4458ba05a9134ba5b86dfed35a70730f_0","old_fingerprint":"4458ba05a9134ba5b86dfed35a70730f_0","code_extract":"\treturn template.HTML(raw)"},{"cwe_ids":["79"],"id":"go_gosec_injection_template_injection","title":"Unsanitized user input in web page generation (XSS)","description":"## Description\n\nCross-Site Scripting (XSS) is a vulnerability that allows attackers to run malicious scripts in the context of a trusted web application. This can happen when an application includes untrusted data without proper validation or escaping. There are several contexts where XSS can occur, each requiring specific encoding strategies to mitigate the risk.\n\n## Remediations\n\n- **Do** encode user input based on the context it is used in, such as HTML content, HTML attributes, JavaScript, and CSS contexts. This helps prevent malicious scripts from being executed.\n  ```go\n  html.EscapeString(userInput)\n  ```\n- **Do** use templating engines like `html/template` that automatically encode data based on its context.\n- **Do** sanitize data using libraries or functions specifically designed for this purpose, especially when inserting content into a web page.\n- **Do** separate data from code by avoiding inline scripting and event handlers. Use separate JavaScript files for event handling to minimize script injection risks.\n- **Do not** mix server-side and client-side templating systems, as server-side systems may not escape output safely for client-side use.\n- **Do not** encode user input before storing it in a database. Any encoding should be applied when the data is output, not before storage, to ensure that it is encoded appropriately for its context.\n\n## References\n\n- [OWASP XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [Go html/template Documentation](https://pkg.go.dev/html/template)","documentation_url":"https://docs.bearer.com/reference/rules/go_gosec_injection_template_injection","line_number":253,"full_filename":"server/web/templatefunc.go","filename":"server/web/templatefunc.go","category_groups":["PII","Personal Data"],"source":{"start":253,"end":253,"column":{"start":9,"end":28}},"sink":{"start":253,"end":253,"column":{"start":9,"end":28},"content":""},"parent_line_number":253,"fingerprint":"4458ba05a9134ba5b86dfed35a70730f_1","old_fingerprint":"4458ba05a9134ba5b86dfed35a70730f_1","code_extract":"\treturn template.HTML(text)"},{"cwe_ids":["79"],"id":"go_gosec_injection_template_injection","title":"Unsanitized user input in web page generation (XSS)","description":"## Description\n\nCross-Site Scripting (XSS) is a vulnerability that allows attackers to run malicious scripts in the context of a trusted web application. This can happen when an application includes untrusted data without proper validation or escaping. There are several contexts where XSS can occur, each requiring specific encoding strategies to mitigate the risk.\n\n## Remediations\n\n- **Do** encode user input based on the context it is used in, such as HTML content, HTML attributes, JavaScript, and CSS contexts. This helps prevent malicious scripts from being executed.\n  ```go\n  html.EscapeString(userInput)\n  ```\n- **Do** use templating engines like `html/template` that automatically encode data based on its context.\n- **Do** sanitize data using libraries or functions specifically designed for this purpose, especially when inserting content into a web page.\n- **Do** separate data from code by avoiding inline scripting and event handlers. Use separate JavaScript files for event handling to minimize script injection risks.\n- **Do not** mix server-side and client-side templating systems, as server-side systems may not escape output safely for client-side use.\n- **Do not** encode user input before storing it in a database. Any encoding should be applied when the data is output, not before storage, to ensure that it is encoded appropriately for its context.\n\n## References\n\n- [OWASP XSS Prevention Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)\n- [Go html/template Documentation](https://pkg.go.dev/html/template)","documentation_url":"https://docs.bearer.com/reference/rules/go_gosec_injection_template_injection","line_number":260,"full_filename":"server/web/templatefunc.go","filename":"server/web/templatefunc.go","category_groups":["PII","Personal Data"],"source":{"start":260,"end":260,"column":{"start":9,"end":28}},"sink":{"start":260,"end":260,"column":{"start":9,"end":28},"content":""},"parent_line_number":260,"fingerprint":"4458ba05a9134ba5b86dfed35a70730f_2","old_fingerprint":"4458ba05a9134ba5b86dfed35a70730f_2","code_extract":"\treturn template.HTML(text)"},{"cwe_ids":["327"],"id":"go_lang_missing_tls_minversion","title":"Missing TLS MinVersion","description":"## Description\n\nOlder versions of TLS (Transport Layer Security) have been deprecated because of known security issues. To enhance security, it is crucial to specify the highest possible minimum version of TLS that your server will accept.\n\n## Remediations\n\n- **Do** set `MinVersion` in the `tls.Config` struct to `tls.VersionTLS13`. This ensures your server only accepts connections using the most secure, up-to-date version of TLS.\n  ```go\n  {\n    MinVersion: tls.VersionTLS13\n  }\n  ```\n- **Do** configure `MinVersion` to the highest possible supported version of TLS for legacy applications that cannot use TLS 1.3. This step is essential for maintaining security while ensuring compatibility.\n\n## References\n\n- [OWASP TLS Cipher String Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/TLS_Cipher_String_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/go_lang_missing_tls_minversion","line_number":93,"full_filename":"core/logs/smtp.go","filename":"core/logs/smtp.go","category_groups":["PII","Personal Data"],"source":{"start":93,"end":96,"column":{"start":14,"end":3}},"sink":{"start":93,"end":96,"column":{"start":14,"end":3},"content":""},"parent_line_number":93,"fingerprint":"ef55a01f53a1ae67b618362d0d104cac_0","old_fingerprint":"ef55a01f53a1ae67b618362d0d104cac_0","code_extract":"\ttlsConn := \u0026tls.Config{\n\t\tInsecureSkipVerify: true,\n\t\tServerName:         host,\n\t}"},{"cwe_ids":["327"],"id":"go_lang_missing_tls_minversion","title":"Missing TLS MinVersion","description":"## Description\n\nOlder versions of TLS (Transport Layer Security) have been deprecated because of known security issues. To enhance security, it is crucial to specify the highest possible minimum version of TLS that your server will accept.\n\n## Remediations\n\n- **Do** set `MinVersion` in the `tls.Config` struct to `tls.VersionTLS13`. This ensures your server only accepts connections using the most secure, up-to-date version of TLS.\n  ```go\n  {\n    MinVersion: tls.VersionTLS13\n  }\n  ```\n- **Do** configure `MinVersion` to the highest possible supported version of TLS for legacy applications that cannot use TLS 1.3. This step is essential for maintaining security while ensuring compatibility.\n\n## References\n\n- [OWASP TLS Cipher String Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/TLS_Cipher_String_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/go_lang_missing_tls_minversion","line_number":123,"full_filename":"server/web/grace/server.go","filename":"server/web/grace/server.go","category_groups":["PII","Personal Data"],"source":{"start":123,"end":123,"column":{"start":20,"end":32}},"sink":{"start":123,"end":123,"column":{"start":20,"end":32},"content":""},"parent_line_number":123,"fingerprint":"b80afa1b21c06e2e2e7429d8f7bdc808_0","old_fingerprint":"b80afa1b21c06e2e2e7429d8f7bdc808_1","code_extract":"\t\tsrv.TLSConfig = \u0026tls.Config{}"},{"cwe_ids":["327"],"id":"go_lang_missing_tls_minversion","title":"Missing TLS MinVersion","description":"## Description\n\nOlder versions of TLS (Transport Layer Security) have been deprecated because of known security issues. To enhance security, it is crucial to specify the highest possible minimum version of TLS that your server will accept.\n\n## Remediations\n\n- **Do** set `MinVersion` in the `tls.Config` struct to `tls.VersionTLS13`. This ensures your server only accepts connections using the most secure, up-to-date version of TLS.\n  ```go\n  {\n    MinVersion: tls.VersionTLS13\n  }\n  ```\n- **Do** configure `MinVersion` to the highest possible supported version of TLS for legacy applications that cannot use TLS 1.3. This step is essential for maintaining security while ensuring compatibility.\n\n## References\n\n- [OWASP TLS Cipher String Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/TLS_Cipher_String_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/go_lang_missing_tls_minversion","line_number":182,"full_filename":"server/web/grace/server.go","filename":"server/web/grace/server.go","category_groups":["PII","Personal Data"],"source":{"start":182,"end":182,"column":{"start":20,"end":32}},"sink":{"start":182,"end":182,"column":{"start":20,"end":32},"content":""},"parent_line_number":182,"fingerprint":"b80afa1b21c06e2e2e7429d8f7bdc808_1","old_fingerprint":"b80afa1b21c06e2e2e7429d8f7bdc808_2","code_extract":"\t\tsrv.TLSConfig = \u0026tls.Config{}"},{"cwe_ids":["327"],"id":"go_lang_missing_tls_minversion","title":"Missing TLS MinVersion","description":"## Description\n\nOlder versions of TLS (Transport Layer Security) have been deprecated because of known security issues. To enhance security, it is crucial to specify the highest possible minimum version of TLS that your server will accept.\n\n## Remediations\n\n- **Do** set `MinVersion` in the `tls.Config` struct to `tls.VersionTLS13`. This ensures your server only accepts connections using the most secure, up-to-date version of TLS.\n  ```go\n  {\n    MinVersion: tls.VersionTLS13\n  }\n  ```\n- **Do** configure `MinVersion` to the highest possible supported version of TLS for legacy applications that cannot use TLS 1.3. This step is essential for maintaining security while ensuring compatibility.\n\n## References\n\n- [OWASP TLS Cipher String Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/TLS_Cipher_String_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/go_lang_missing_tls_minversion","line_number":191,"full_filename":"server/web/server.go","filename":"server/web/server.go","category_groups":["PII","Personal Data"],"source":{"start":191,"end":191,"column":{"start":31,"end":75}},"sink":{"start":191,"end":191,"column":{"start":31,"end":75},"content":""},"parent_line_number":191,"fingerprint":"5d22d8b31d925b08f8e9d26279a05d6a_0","old_fingerprint":"5d22d8b31d925b08f8e9d26279a05d6a_3","code_extract":"\t\t\t\t\t\tapp.Server.TLSConfig = \u0026tls.Config{GetCertificate: m.GetCertificate}"},{"cwe_ids":["327"],"id":"go_lang_missing_tls_minversion","title":"Missing TLS MinVersion","description":"## Description\n\nOlder versions of TLS (Transport Layer Security) have been deprecated because of known security issues. To enhance security, it is crucial to specify the highest possible minimum version of TLS that your server will accept.\n\n## Remediations\n\n- **Do** set `MinVersion` in the `tls.Config` struct to `tls.VersionTLS13`. This ensures your server only accepts connections using the most secure, up-to-date version of TLS.\n  ```go\n  {\n    MinVersion: tls.VersionTLS13\n  }\n  ```\n- **Do** configure `MinVersion` to the highest possible supported version of TLS for legacy applications that cannot use TLS 1.3. This step is essential for maintaining security while ensuring compatibility.\n\n## References\n\n- [OWASP TLS Cipher String Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/TLS_Cipher_String_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/go_lang_missing_tls_minversion","line_number":255,"full_filename":"server/web/server.go","filename":"server/web/server.go","category_groups":["PII","Personal Data"],"source":{"start":255,"end":255,"column":{"start":29,"end":73}},"sink":{"start":255,"end":255,"column":{"start":29,"end":73},"content":""},"parent_line_number":255,"fingerprint":"5d22d8b31d925b08f8e9d26279a05d6a_1","old_fingerprint":"5d22d8b31d925b08f8e9d26279a05d6a_4","code_extract":"\t\t\t\tapp.Server.TLSConfig = \u0026tls.Config{GetCertificate: m.GetCertificate}"},{"cwe_ids":["327"],"id":"go_lang_missing_tls_minversion","title":"Missing TLS MinVersion","description":"## Description\n\nOlder versions of TLS (Transport Layer Security) have been deprecated because of known security issues. To enhance security, it is crucial to specify the highest possible minimum version of TLS that your server will accept.\n\n## Remediations\n\n- **Do** set `MinVersion` in the `tls.Config` struct to `tls.VersionTLS13`. This ensures your server only accepts connections using the most secure, up-to-date version of TLS.\n  ```go\n  {\n    MinVersion: tls.VersionTLS13\n  }\n  ```\n- **Do** configure `MinVersion` to the highest possible supported version of TLS for legacy applications that cannot use TLS 1.3. This step is essential for maintaining security while ensuring compatibility.\n\n## References\n\n- [OWASP TLS Cipher String Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/TLS_Cipher_String_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/go_lang_missing_tls_minversion","line_number":265,"full_filename":"server/web/server.go","filename":"server/web/server.go","category_groups":["PII","Personal Data"],"source":{"start":265,"end":268,"column":{"start":29,"end":6}},"sink":{"start":265,"end":268,"column":{"start":29,"end":6},"content":""},"parent_line_number":265,"fingerprint":"5d22d8b31d925b08f8e9d26279a05d6a_2","old_fingerprint":"5d22d8b31d925b08f8e9d26279a05d6a_5","code_extract":"\t\t\t\tapp.Server.TLSConfig = \u0026tls.Config{\n\t\t\t\t\tClientCAs:  pool,\n\t\t\t\t\tClientAuth: tls.ClientAuthType(app.Cfg.Listen.ClientAuth),\n\t\t\t\t}"},{"cwe_ids":["295"],"id":"go_lang_ssl_verification","title":"Missing SSL certificate verification","description":"## Description\n\nYour application's security is compromised if it fails to verify SSL certificates. This vulnerability occurs when your application communicates over HTTPS without validating the authenticity of the SSL certificate presented by the server. It exposes sensitive data to interception by attackers.\n\n## Remediations\n\n- **Do not** disable SSL certificate validation in your HTTP client. Disabling it makes your application vulnerable to Man-in-the-Middle (MitM) attacks.\n- **Do** ensure that your HTTP client is configured to verify both the SSL certificate's validity and the hostname. This step is crucial for establishing a secure connection.","documentation_url":"https://docs.bearer.com/reference/rules/go_lang_ssl_verification","line_number":94,"full_filename":"core/logs/smtp.go","filename":"core/logs/smtp.go","category_groups":["PII","Personal Data"],"source":{"start":94,"end":94,"column":{"start":3,"end":27}},"sink":{"start":94,"end":94,"column":{"start":3,"end":27},"content":""},"parent_line_number":94,"fingerprint":"4bccf03f43dc700276f708292dbffb16_0","old_fingerprint":"4bccf03f43dc700276f708292dbffb16_0","code_extract":"\t\tInsecureSkipVerify: true,"}],"medium":[{"cwe_ids":["328"],"id":"go_gosec_blocklist_md5","title":"Import of weak hashing library (MD5)","description":"## Description\n\nUsing a weak hashing library like MD5 increases the risk of data breaches. MD5 is vulnerable to collision attacks, where two different inputs produce the same output, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing. It is considered a weak hash algorithm and can compromise data security.\n- **Do** use stronger hashing algorithms such as SHA-3 or BLAKE2 for general hashing purposes, such as file integrity checks or generating unique identifiers.\n- **Do** use recommended algorithms such as bcrypt or Argon2id for password hashing, as these are designed to be slower and therefore more effective against brute-force attacks.\n\n## References\n\n- [OWASP Password Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/go_gosec_blocklist_md5","line_number":20,"full_filename":"client/cache/file.go","filename":"client/cache/file.go","category_groups":["PII","Personal Data"],"source":{"start":20,"end":20,"column":{"start":2,"end":14}},"sink":{"start":20,"end":20,"column":{"start":2,"end":14},"content":""},"parent_line_number":20,"fingerprint":"c3c8b6592df3728161cf7f4f83144735_0","old_fingerprint":"c3c8b6592df3728161cf7f4f83144735_1","code_extract":"\t\"crypto/md5\""},{"cwe_ids":["328"],"id":"go_gosec_blocklist_md5","title":"Import of weak hashing library (MD5)","description":"## Description\n\nUsing a weak hashing library like MD5 increases the risk of data breaches. MD5 is vulnerable to collision attacks, where two different inputs produce the same output, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing. It is considered a weak hash algorithm and can compromise data security.\n- **Do** use stronger hashing algorithms such as SHA-3 or BLAKE2 for general hashing purposes, such as file integrity checks or generating unique identifiers.\n- **Do** use recommended algorithms such as bcrypt or Argon2id for password hashing, as these are designed to be slower and therefore more effective against brute-force attacks.\n\n## References\n\n- [OWASP Password Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/go_gosec_blocklist_md5","line_number":5,"full_filename":"core/logs/alils/request.go","filename":"core/logs/alils/request.go","category_groups":["PII","Personal Data"],"source":{"start":5,"end":5,"column":{"start":2,"end":14}},"sink":{"start":5,"end":5,"column":{"start":2,"end":14},"content":""},"parent_line_number":5,"fingerprint":"e6ef57249b417ad650b53fdf1983dac3_0","old_fingerprint":"e6ef57249b417ad650b53fdf1983dac3_0","code_extract":"\t\"crypto/md5\""},{"cwe_ids":["328"],"id":"go_gosec_blocklist_sha1","title":"Import of weak hashing library (SHA-1)","description":"## Description\n\nThe SHA-1 hashing algorithm is outdated and vulnerable to collision attacks, where two distinct inputs produce the same output hash. This flaw compromises the algorithm's ability to securely verify data integrity and authenticity, making it unsuitable for cryptographic security.\n\n## Remediations\n\n- **Do not** use SHA-1 for cryptographic purposes or to ensure data integrity. Its susceptibility to collision attacks poses a significant security risk.\n- **Do** use stronger hashing algorithms such as SHA-3 or BLAKE2 for general hashing purposes, such as file integrity checks or generating unique identifiers.\n- **Do** use recommended algorithms such as bcrypt or Argon2id for password hashing, as these are designed to be slower and therefore more effective against brute-force attacks.\n\n## References\n\n- [OWASP Cryptographic Storage Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html)\n- [NIST Policy on Hash Functions](https://csrc.nist.gov/projects/hash-functions)","documentation_url":"https://docs.bearer.com/reference/rules/go_gosec_blocklist_sha1","line_number":5,"full_filename":"core/logs/alils/signature.go","filename":"core/logs/alils/signature.go","category_groups":["PII","Personal Data"],"source":{"start":5,"end":5,"column":{"start":2,"end":15}},"sink":{"start":5,"end":5,"column":{"start":2,"end":15},"content":""},"parent_line_number":5,"fingerprint":"b0f4304c34986367380e459f0de03973_0","old_fingerprint":"b0f4304c34986367380e459f0de03973_0","code_extract":"\t\"crypto/sha1\""},{"cwe_ids":["1004"],"id":"go_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nMissing the HTTP Only option in cookie configuration exposes cookies to client-side script access. This vulnerability occurs when cookies are set without the `HttpOnly` attribute, allowing them to be accessible via JavaScript. This can lead to sensitive information being compromised, especially if the site is susceptible to Cross-Site Scripting (XSS) attacks.\n\n## Remediations\n\n- **Do** set the `HttpOnly` attribute for cookies to `true`. This action prevents client-side scripts from accessing the cookie, significantly reducing the risk of XSS attacks.\n  ```go\n  http.SetCookie(w, \u0026http.Cookie{\n      Name:     \"session_token\",\n      Value:    sessionToken,\n      HttpOnly: true,\n      ...\n  })\n  ```\n- **Do** also consider setting `Secure`, `SameSite`, and `Domain` attributes for cookies. These additional configurations help in further securing cookies against various web vulnerabilities, tailoring the protection to your application's specific needs.\n\n## References\n\n- [OWASP Secure Session Management Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html)\n- [MDN Web Docs: HttpOnly Cookie Attribute](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#restrict_access_to_cookies)","documentation_url":"https://docs.bearer.com/reference/rules/go_lang_cookie_missing_http_only","line_number":213,"full_filename":"server/web/session/session.go","filename":"server/web/session/session.go","category_groups":["PII","Personal Data"],"source":{"start":213,"end":221,"column":{"start":13,"end":3}},"sink":{"start":213,"end":221,"column":{"start":13,"end":3},"content":""},"parent_line_number":213,"fingerprint":"2f4dda08b114d091837cc3e988f664fa_0","old_fingerprint":"2f4dda08b114d091837cc3e988f664fa_0","code_extract":"\tcookie := \u0026http.Cookie{\n\t\tName:     manager.config.CookieName,\n\t\tValue:    url.QueryEscape(sid),\n...omitted (buffer value 3)\n\t\tDomain:   manager.config.Domain,\n\t\tSameSite: manager.config.CookieSameSite,\n\t}"},{"cwe_ids":["1004"],"id":"go_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nMissing the HTTP Only option in cookie configuration exposes cookies to client-side script access. This vulnerability occurs when cookies are set without the `HttpOnly` attribute, allowing them to be accessible via JavaScript. This can lead to sensitive information being compromised, especially if the site is susceptible to Cross-Site Scripting (XSS) attacks.\n\n## Remediations\n\n- **Do** set the `HttpOnly` attribute for cookies to `true`. This action prevents client-side scripts from accessing the cookie, significantly reducing the risk of XSS attacks.\n  ```go\n  http.SetCookie(w, \u0026http.Cookie{\n      Name:     \"session_token\",\n      Value:    sessionToken,\n      HttpOnly: true,\n      ...\n  })\n  ```\n- **Do** also consider setting `Secure`, `SameSite`, and `Domain` attributes for cookies. These additional configurations help in further securing cookies against various web vulnerabilities, tailoring the protection to your application's specific needs.\n\n## References\n\n- [OWASP Secure Session Management Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html)\n- [MDN Web Docs: HttpOnly Cookie Attribute](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#restrict_access_to_cookies)","documentation_url":"https://docs.bearer.com/reference/rules/go_lang_cookie_missing_http_only","line_number":255,"full_filename":"server/web/session/session.go","filename":"server/web/session/session.go","category_groups":["PII","Personal Data"],"source":{"start":255,"end":263,"column":{"start":13,"end":4}},"sink":{"start":255,"end":263,"column":{"start":13,"end":4},"content":""},"parent_line_number":255,"fingerprint":"2f4dda08b114d091837cc3e988f664fa_1","old_fingerprint":"2f4dda08b114d091837cc3e988f664fa_1","code_extract":"\t\tcookie = \u0026http.Cookie{\n\t\t\tName:     manager.config.CookieName,\n\t\t\tPath:     \"/\",\n...omitted (buffer value 3)\n\t\t\tDomain:   manager.config.Domain,\n\t\t\tSameSite: manager.config.CookieSameSite,\n\t\t}"},{"cwe_ids":["1004"],"id":"go_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nMissing the HTTP Only option in cookie configuration exposes cookies to client-side script access. This vulnerability occurs when cookies are set without the `HttpOnly` attribute, allowing them to be accessible via JavaScript. This can lead to sensitive information being compromised, especially if the site is susceptible to Cross-Site Scripting (XSS) attacks.\n\n## Remediations\n\n- **Do** set the `HttpOnly` attribute for cookies to `true`. This action prevents client-side scripts from accessing the cookie, significantly reducing the risk of XSS attacks.\n  ```go\n  http.SetCookie(w, \u0026http.Cookie{\n      Name:     \"session_token\",\n      Value:    sessionToken,\n      HttpOnly: true,\n      ...\n  })\n  ```\n- **Do** also consider setting `Secure`, `SameSite`, and `Domain` attributes for cookies. These additional configurations help in further securing cookies against various web vulnerabilities, tailoring the protection to your application's specific needs.\n\n## References\n\n- [OWASP Secure Session Management Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html)\n- [MDN Web Docs: HttpOnly Cookie Attribute](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#restrict_access_to_cookies)","documentation_url":"https://docs.bearer.com/reference/rules/go_lang_cookie_missing_http_only","line_number":298,"full_filename":"server/web/session/session.go","filename":"server/web/session/session.go","category_groups":["PII","Personal Data"],"source":{"start":298,"end":306,"column":{"start":13,"end":4}},"sink":{"start":298,"end":306,"column":{"start":13,"end":4},"content":""},"parent_line_number":298,"fingerprint":"2f4dda08b114d091837cc3e988f664fa_2","old_fingerprint":"2f4dda08b114d091837cc3e988f664fa_2","code_extract":"\t\tcookie = \u0026http.Cookie{\n\t\t\tName:     manager.config.CookieName,\n\t\t\tValue:    url.QueryEscape(sid),\n...omitted (buffer value 3)\n\t\t\tDomain:   manager.config.Domain,\n\t\t\tSameSite: manager.config.CookieSameSite,\n\t\t}"},{"cwe_ids":["614"],"id":"go_lang_insecure_cookie","title":"Missing Secure option in cookie configuration","description":"## Description\n\nMissing the Secure option in cookie configuration can compromise cookie security. The Secure attribute, when set to true, ensures cookies are sent to the server only over HTTPS, protecting them from interception by unauthorized parties.\n\n## Remediations\n\n- **Do** set the `Secure` attribute for cookies to `true`. This ensures cookies are transmitted securely over HTTPS, preventing unauthorized access.\n  ```go\n  http.SetCookie(w, \u0026http.Cookie{\n      Name:     \"session_token\",\n      Value:    sessionToken,\n      Secure:   true,\n      // Additional flags like HttpOnly, SameSite, etc., should be set as needed.\n  })\n  ```\n- **Do** also set `HttpOnly`, `SameSite`, and `Domain` attributes for cookies as needed by your application. These attributes provide additional layers of security for your cookies.\n\n## References\n\n- [OWASP Secure Session Management Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html)\n- [MDN Web Docs: HttpOnly Cookie Attribute](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#restrict_access_to_cookies)","documentation_url":"https://docs.bearer.com/reference/rules/go_lang_insecure_cookie","line_number":84,"full_filename":"server/web/session/sess_cookie.go","filename":"server/web/session/sess_cookie.go","category_groups":["PII","Personal Data"],"source":{"start":84,"end":91,"column":{"start":14,"end":4}},"sink":{"start":84,"end":91,"column":{"start":14,"end":4},"content":""},"parent_line_number":84,"fingerprint":"6b7417878b398efae1c170c2f68fb34e_0","old_fingerprint":"6b7417878b398efae1c170c2f68fb34e_0","code_extract":"\t\tcookie := \u0026http.Cookie{\n\t\t\tName:     cookiepder.config.CookieName,\n\t\t\tValue:    url.QueryEscape(encodedCookie),\n...omitted (buffer value 3)\n\t\t\tSecure:   cookiepder.config.Secure,\n\t\t\tMaxAge:   cookiepder.config.Maxage,\n\t\t}"},{"cwe_ids":["614"],"id":"go_lang_insecure_cookie","title":"Missing Secure option in cookie configuration","description":"## Description\n\nMissing the Secure option in cookie configuration can compromise cookie security. The Secure attribute, when set to true, ensures cookies are sent to the server only over HTTPS, protecting them from interception by unauthorized parties.\n\n## Remediations\n\n- **Do** set the `Secure` attribute for cookies to `true`. This ensures cookies are transmitted securely over HTTPS, preventing unauthorized access.\n  ```go\n  http.SetCookie(w, \u0026http.Cookie{\n      Name:     \"session_token\",\n      Value:    sessionToken,\n      Secure:   true,\n      // Additional flags like HttpOnly, SameSite, etc., should be set as needed.\n  })\n  ```\n- **Do** also set `HttpOnly`, `SameSite`, and `Domain` attributes for cookies as needed by your application. These attributes provide additional layers of security for your cookies.\n\n## References\n\n- [OWASP Secure Session Management Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html)\n- [MDN Web Docs: HttpOnly Cookie Attribute](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#restrict_access_to_cookies)","documentation_url":"https://docs.bearer.com/reference/rules/go_lang_insecure_cookie","line_number":213,"full_filename":"server/web/session/session.go","filename":"server/web/session/session.go","category_groups":["PII","Personal Data"],"source":{"start":213,"end":221,"column":{"start":13,"end":3}},"sink":{"start":213,"end":221,"column":{"start":13,"end":3},"content":""},"parent_line_number":213,"fingerprint":"70b3d2507dd0aaebef409aa7ebd17ed7_0","old_fingerprint":"70b3d2507dd0aaebef409aa7ebd17ed7_1","code_extract":"\tcookie := \u0026http.Cookie{\n\t\tName:     manager.config.CookieName,\n\t\tValue:    url.QueryEscape(sid),\n...omitted (buffer value 3)\n\t\tDomain:   manager.config.Domain,\n\t\tSameSite: manager.config.CookieSameSite,\n\t}"},{"cwe_ids":["614"],"id":"go_lang_insecure_cookie","title":"Missing Secure option in cookie configuration","description":"## Description\n\nMissing the Secure option in cookie configuration can compromise cookie security. The Secure attribute, when set to true, ensures cookies are sent to the server only over HTTPS, protecting them from interception by unauthorized parties.\n\n## Remediations\n\n- **Do** set the `Secure` attribute for cookies to `true`. This ensures cookies are transmitted securely over HTTPS, preventing unauthorized access.\n  ```go\n  http.SetCookie(w, \u0026http.Cookie{\n      Name:     \"session_token\",\n      Value:    sessionToken,\n      Secure:   true,\n      // Additional flags like HttpOnly, SameSite, etc., should be set as needed.\n  })\n  ```\n- **Do** also set `HttpOnly`, `SameSite`, and `Domain` attributes for cookies as needed by your application. These attributes provide additional layers of security for your cookies.\n\n## References\n\n- [OWASP Secure Session Management Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html)\n- [MDN Web Docs: HttpOnly Cookie Attribute](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#restrict_access_to_cookies)","documentation_url":"https://docs.bearer.com/reference/rules/go_lang_insecure_cookie","line_number":255,"full_filename":"server/web/session/session.go","filename":"server/web/session/session.go","category_groups":["PII","Personal Data"],"source":{"start":255,"end":263,"column":{"start":13,"end":4}},"sink":{"start":255,"end":263,"column":{"start":13,"end":4},"content":""},"parent_line_number":255,"fingerprint":"70b3d2507dd0aaebef409aa7ebd17ed7_1","old_fingerprint":"70b3d2507dd0aaebef409aa7ebd17ed7_2","code_extract":"\t\tcookie = \u0026http.Cookie{\n\t\t\tName:     manager.config.CookieName,\n\t\t\tPath:     \"/\",\n...omitted (buffer value 3)\n\t\t\tDomain:   manager.config.Domain,\n\t\t\tSameSite: manager.config.CookieSameSite,\n\t\t}"},{"cwe_ids":["614"],"id":"go_lang_insecure_cookie","title":"Missing Secure option in cookie configuration","description":"## Description\n\nMissing the Secure option in cookie configuration can compromise cookie security. The Secure attribute, when set to true, ensures cookies are sent to the server only over HTTPS, protecting them from interception by unauthorized parties.\n\n## Remediations\n\n- **Do** set the `Secure` attribute for cookies to `true`. This ensures cookies are transmitted securely over HTTPS, preventing unauthorized access.\n  ```go\n  http.SetCookie(w, \u0026http.Cookie{\n      Name:     \"session_token\",\n      Value:    sessionToken,\n      Secure:   true,\n      // Additional flags like HttpOnly, SameSite, etc., should be set as needed.\n  })\n  ```\n- **Do** also set `HttpOnly`, `SameSite`, and `Domain` attributes for cookies as needed by your application. These attributes provide additional layers of security for your cookies.\n\n## References\n\n- [OWASP Secure Session Management Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html)\n- [MDN Web Docs: HttpOnly Cookie Attribute](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#restrict_access_to_cookies)","documentation_url":"https://docs.bearer.com/reference/rules/go_lang_insecure_cookie","line_number":298,"full_filename":"server/web/session/session.go","filename":"server/web/session/session.go","category_groups":["PII","Personal Data"],"source":{"start":298,"end":306,"column":{"start":13,"end":4}},"sink":{"start":298,"end":306,"column":{"start":13,"end":4},"content":""},"parent_line_number":298,"fingerprint":"70b3d2507dd0aaebef409aa7ebd17ed7_2","old_fingerprint":"70b3d2507dd0aaebef409aa7ebd17ed7_3","code_extract":"\t\tcookie = \u0026http.Cookie{\n\t\t\tName:     manager.config.CookieName,\n\t\t\tValue:    url.QueryEscape(sid),\n...omitted (buffer value 3)\n\t\t\tDomain:   manager.config.Domain,\n\t\t\tSameSite: manager.config.CookieSameSite,\n\t\t}"},{"cwe_ids":["330"],"id":"go_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nYour application is at risk when it uses predictable random values, particularly for security-related functions.\n\n## Remediations\n\n- **Do** use a stronger, more secure library for generating random values. This is crucial for enhancing the security of your application.\n  ```go\n  import (\n    \"crypto/rand\"\n    \"encoding/base64\"\n    \"fmt\"\n  )\n\n  func generateSecureToken(length int) (string, error) {\n    bytes := make([]byte, length)\n    _, err := rand.Read(bytes)\n    if err != nil {\n      return \"\", err\n    }\n\n    // Encode the binary data to a string for easier use\n    return base64.URLEncoding.EncodeToString(bytes), nil\n  }\n  ```\n\n## References\n\n- [Use of Insufficiently Random Values](https://cwe.mitre.org/data/definitions/330.html)","documentation_url":"https://docs.bearer.com/reference/rules/go_lang_insufficiently_random_values","line_number":33,"full_filename":"core/utils/rand.go","filename":"core/utils/rand.go","category_groups":["PII","Personal Data"],"source":{"start":33,"end":33,"column":{"start":3,"end":32}},"sink":{"start":33,"end":33,"column":{"start":3,"end":32},"content":""},"parent_line_number":33,"fingerprint":"9fdff42394d836a1a5f9b0e548b78c9a_0","old_fingerprint":"9fdff42394d836a1a5f9b0e548b78c9a_0","code_extract":"\t\tr.Seed(time.Now().UnixNano())"},{"cwe_ids":["330"],"id":"go_lang_insufficiently_random_values","title":"Usage of insufficient random value","description":"## Description\n\nYour application is at risk when it uses predictable random values, particularly for security-related functions.\n\n## Remediations\n\n- **Do** use a stronger, more secure library for generating random values. This is crucial for enhancing the security of your application.\n  ```go\n  import (\n    \"crypto/rand\"\n    \"encoding/base64\"\n    \"fmt\"\n  )\n\n  func generateSecureToken(length int) (string, error) {\n    bytes := make([]byte, length)\n    _, err := rand.Read(bytes)\n    if err != nil {\n      return \"\", err\n    }\n\n    // Encode the binary data to a string for easier use\n    return base64.URLEncoding.EncodeToString(bytes), nil\n  }\n  ```\n\n## References\n\n- [Use of Insufficiently Random Values](https://cwe.mitre.org/data/definitions/330.html)","documentation_url":"https://docs.bearer.com/reference/rules/go_lang_insufficiently_random_values","line_number":53,"full_filename":"core/utils/slice.go","filename":"core/utils/slice.go","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":2,"end":35}},"sink":{"start":53,"end":53,"column":{"start":2,"end":35},"content":""},"parent_line_number":53,"fingerprint":"d2ee924250d74d019af823682dd3a231_0","old_fingerprint":"d2ee924250d74d019af823682dd3a231_1","code_extract":"\trand.Seed(int64(t0.Nanosecond()))"},{"cwe_ids":["328"],"id":"go_lang_weak_hash_md5","title":"Usage of weak hashing library (MD5)","description":"## Description\n\nUsing a weak hashing library like MD5 increases the risk of data breaches. MD5 is vulnerable to collision attacks, where two different inputs produce the same output, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing. It is considered a weak hash algorithm and can compromise data security.\n  ```go\n  md5.Sum([]byte(\"password\")) // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms such as SHA-256 to enhance security.\n  ```go\n  sha256.Sum256([]byte(\"string\"))\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/go_lang_weak_hash_md5","line_number":128,"full_filename":"client/cache/file.go","filename":"client/cache/file.go","category_groups":["PII","Personal Data"],"source":{"start":128,"end":128,"column":{"start":31,"end":41}},"sink":{"start":128,"end":128,"column":{"start":31,"end":41},"content":""},"parent_line_number":128,"fingerprint":"81de967c642e12e896850de2ef172c6e_0","old_fingerprint":"81de967c642e12e896850de2ef172c6e_1","code_extract":"\tkeyMd5 := hex.EncodeToString(m.Sum(nil))"},{"cwe_ids":["328"],"id":"go_lang_weak_hash_md5","title":"Usage of weak hashing library (MD5)","description":"## Description\n\nUsing a weak hashing library like MD5 increases the risk of data breaches. MD5 is vulnerable to collision attacks, where two different inputs produce the same output, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing. It is considered a weak hash algorithm and can compromise data security.\n  ```go\n  md5.Sum([]byte(\"password\")) // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms such as SHA-256 to enhance security.\n  ```go\n  sha256.Sum256([]byte(\"string\"))\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/go_lang_weak_hash_md5","line_number":26,"full_filename":"core/logs/alils/request.go","filename":"core/logs/alils/request.go","category_groups":["PII","Personal Data"],"source":{"start":26,"end":26,"column":{"start":32,"end":45}},"sink":{"start":26,"end":26,"column":{"start":32,"end":45},"content":""},"parent_line_number":26,"fingerprint":"8ae00a3336ec2cb54df563ba30381366_0","old_fingerprint":"8ae00a3336ec2cb54df563ba30381366_0","code_extract":"\t\tbodyMD5 := fmt.Sprintf(\"%X\", md5.Sum(body))"}]}
